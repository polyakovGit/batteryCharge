
batteryCharge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002254  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002314  08002314  00003314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002344  08002344  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002344  08002344  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002344  08002344  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002344  08002344  00003344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002348  08002348  00003348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800234c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08002358  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002358  000040e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ec5  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001758  00000000  00000000  0000bef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0000d658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006bd  00000000  00000000  0000df18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182f5  00000000  00000000  0000e5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb5e  00000000  00000000  000268ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b341  00000000  00000000  00032428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd769  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e9c  00000000  00000000  000bd7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000bf648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022fc 	.word	0x080022fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080022fc 	.word	0x080022fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b089      	sub	sp, #36	@ 0x24
 8000224:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	uint8_t RG_off = 0b11111111; //all off
 8000226:	211f      	movs	r1, #31
 8000228:	187b      	adds	r3, r7, r1
 800022a:	22ff      	movs	r2, #255	@ 0xff
 800022c:	701a      	strb	r2, [r3, #0]
	uint8_t mixled_off = 0b10001110; //all mixled off
 800022e:	241e      	movs	r4, #30
 8000230:	193b      	adds	r3, r7, r4
 8000232:	228e      	movs	r2, #142	@ 0x8e
 8000234:	701a      	strb	r2, [r3, #0]
	uint8_t RG9 = 0b00000000, //диоды справа
 8000236:	251d      	movs	r5, #29
 8000238:	197b      	adds	r3, r7, r5
 800023a:	2200      	movs	r2, #0
 800023c:	701a      	strb	r2, [r3, #0]
			RG8 = 0b00000000, //середина верхний
 800023e:	261c      	movs	r6, #28
 8000240:	19bb      	adds	r3, r7, r6
 8000242:	2200      	movs	r2, #0
 8000244:	701a      	strb	r2, [r3, #0]
			RG7 = 0b00000000, //верхний слева
 8000246:	231b      	movs	r3, #27
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
			RG6 = 0b00000000, //верхний справа
 800024e:	201a      	movs	r0, #26
 8000250:	183b      	adds	r3, r7, r0
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]
			RG5 = 0b01110000, //mixled
 8000256:	2319      	movs	r3, #25
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	2270      	movs	r2, #112	@ 0x70
 800025c:	701a      	strb	r2, [r3, #0]
			RG4 = 0b00000000, //диоды слева
 800025e:	2018      	movs	r0, #24
 8000260:	183b      	adds	r3, r7, r0
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
			RG3 = 0b00000000, //середина нижний
 8000266:	2317      	movs	r3, #23
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
			RG2 = 0b00000000, //левый нижний
 800026e:	2016      	movs	r0, #22
 8000270:	183b      	adds	r3, r7, r0
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
			RG1 = 0b00000000; //правый нижний
 8000276:	2315      	movs	r3, #21
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
	uint8_t transmit_data_all_RGs_on[RGS_NUMBER] = { RG9, RG8, RG7, RG6, RG5, RG4, RG3, RG2, RG1};
 800027e:	200c      	movs	r0, #12
 8000280:	183b      	adds	r3, r7, r0
 8000282:	197a      	adds	r2, r7, r5
 8000284:	7812      	ldrb	r2, [r2, #0]
 8000286:	701a      	strb	r2, [r3, #0]
 8000288:	183b      	adds	r3, r7, r0
 800028a:	19ba      	adds	r2, r7, r6
 800028c:	7812      	ldrb	r2, [r2, #0]
 800028e:	705a      	strb	r2, [r3, #1]
 8000290:	183b      	adds	r3, r7, r0
 8000292:	221b      	movs	r2, #27
 8000294:	18ba      	adds	r2, r7, r2
 8000296:	7812      	ldrb	r2, [r2, #0]
 8000298:	709a      	strb	r2, [r3, #2]
 800029a:	183b      	adds	r3, r7, r0
 800029c:	221a      	movs	r2, #26
 800029e:	18ba      	adds	r2, r7, r2
 80002a0:	7812      	ldrb	r2, [r2, #0]
 80002a2:	70da      	strb	r2, [r3, #3]
 80002a4:	183b      	adds	r3, r7, r0
 80002a6:	2219      	movs	r2, #25
 80002a8:	18ba      	adds	r2, r7, r2
 80002aa:	7812      	ldrb	r2, [r2, #0]
 80002ac:	711a      	strb	r2, [r3, #4]
 80002ae:	183b      	adds	r3, r7, r0
 80002b0:	2218      	movs	r2, #24
 80002b2:	18ba      	adds	r2, r7, r2
 80002b4:	7812      	ldrb	r2, [r2, #0]
 80002b6:	715a      	strb	r2, [r3, #5]
 80002b8:	183b      	adds	r3, r7, r0
 80002ba:	2217      	movs	r2, #23
 80002bc:	18ba      	adds	r2, r7, r2
 80002be:	7812      	ldrb	r2, [r2, #0]
 80002c0:	719a      	strb	r2, [r3, #6]
 80002c2:	183b      	adds	r3, r7, r0
 80002c4:	2216      	movs	r2, #22
 80002c6:	18ba      	adds	r2, r7, r2
 80002c8:	7812      	ldrb	r2, [r2, #0]
 80002ca:	71da      	strb	r2, [r3, #7]
 80002cc:	183b      	adds	r3, r7, r0
 80002ce:	2215      	movs	r2, #21
 80002d0:	18ba      	adds	r2, r7, r2
 80002d2:	7812      	ldrb	r2, [r2, #0]
 80002d4:	721a      	strb	r2, [r3, #8]
	uint8_t transmit_data_all_RGs_off[RGS_NUMBER] = { RG_off, RG_off, RG_off, RG_off, mixled_off, RG_off, RG_off,
 80002d6:	003b      	movs	r3, r7
 80002d8:	187a      	adds	r2, r7, r1
 80002da:	7812      	ldrb	r2, [r2, #0]
 80002dc:	701a      	strb	r2, [r3, #0]
 80002de:	003b      	movs	r3, r7
 80002e0:	187a      	adds	r2, r7, r1
 80002e2:	7812      	ldrb	r2, [r2, #0]
 80002e4:	705a      	strb	r2, [r3, #1]
 80002e6:	003b      	movs	r3, r7
 80002e8:	187a      	adds	r2, r7, r1
 80002ea:	7812      	ldrb	r2, [r2, #0]
 80002ec:	709a      	strb	r2, [r3, #2]
 80002ee:	003b      	movs	r3, r7
 80002f0:	187a      	adds	r2, r7, r1
 80002f2:	7812      	ldrb	r2, [r2, #0]
 80002f4:	70da      	strb	r2, [r3, #3]
 80002f6:	003b      	movs	r3, r7
 80002f8:	193a      	adds	r2, r7, r4
 80002fa:	7812      	ldrb	r2, [r2, #0]
 80002fc:	711a      	strb	r2, [r3, #4]
 80002fe:	003b      	movs	r3, r7
 8000300:	187a      	adds	r2, r7, r1
 8000302:	7812      	ldrb	r2, [r2, #0]
 8000304:	715a      	strb	r2, [r3, #5]
 8000306:	003b      	movs	r3, r7
 8000308:	187a      	adds	r2, r7, r1
 800030a:	7812      	ldrb	r2, [r2, #0]
 800030c:	719a      	strb	r2, [r3, #6]
 800030e:	003b      	movs	r3, r7
 8000310:	187a      	adds	r2, r7, r1
 8000312:	7812      	ldrb	r2, [r2, #0]
 8000314:	71da      	strb	r2, [r3, #7]
 8000316:	003b      	movs	r3, r7
 8000318:	187a      	adds	r2, r7, r1
 800031a:	7812      	ldrb	r2, [r2, #0]
 800031c:	721a      	strb	r2, [r3, #8]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800031e:	f000 fa87 	bl	8000830 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000322:	f000 f823 	bl	800036c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000326:	f000 f8f9 	bl	800051c <MX_GPIO_Init>
	MX_I2C1_Init();
 800032a:	f000 f879 	bl	8000420 <MX_I2C1_Init>
	MX_SPI2_Init();
 800032e:	f000 f8b7 	bl	80004a0 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	//cs_reset();
	//HAL_SPI_Transmit(&hspi1, &spi2_data, 1, 5000);//
	HAL_SPI_Transmit(&hspi2, (uint8_t*)transmit_data_all_RGs_off, RGS_NUMBER, 5000);  //SN74HC595N
 8000332:	4b0b      	ldr	r3, [pc, #44]	@ (8000360 <main+0x140>)
 8000334:	0039      	movs	r1, r7
 8000336:	480b      	ldr	r0, [pc, #44]	@ (8000364 <main+0x144>)
 8000338:	2209      	movs	r2, #9
 800033a:	f001 fcdd 	bl	8001cf8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800033e:	2380      	movs	r3, #128	@ 0x80
 8000340:	01db      	lsls	r3, r3, #7
 8000342:	4809      	ldr	r0, [pc, #36]	@ (8000368 <main+0x148>)
 8000344:	2201      	movs	r2, #1
 8000346:	0019      	movs	r1, r3
 8000348:	f000 fd02 	bl	8000d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800034c:	2380      	movs	r3, #128	@ 0x80
 800034e:	01db      	lsls	r3, r3, #7
 8000350:	4805      	ldr	r0, [pc, #20]	@ (8000368 <main+0x148>)
 8000352:	2200      	movs	r2, #0
 8000354:	0019      	movs	r1, r3
 8000356:	f000 fcfb 	bl	8000d50 <HAL_GPIO_WritePin>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800035a:	46c0      	nop			@ (mov r8, r8)
 800035c:	e7fd      	b.n	800035a <main+0x13a>
 800035e:	46c0      	nop			@ (mov r8, r8)
 8000360:	00001388 	.word	0x00001388
 8000364:	2000007c 	.word	0x2000007c
 8000368:	48000400 	.word	0x48000400

0800036c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b099      	sub	sp, #100	@ 0x64
 8000370:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000372:	242c      	movs	r4, #44	@ 0x2c
 8000374:	193b      	adds	r3, r7, r4
 8000376:	0018      	movs	r0, r3
 8000378:	2334      	movs	r3, #52	@ 0x34
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f001 ff91 	bl	80022a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000382:	231c      	movs	r3, #28
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	0018      	movs	r0, r3
 8000388:	2310      	movs	r3, #16
 800038a:	001a      	movs	r2, r3
 800038c:	2100      	movs	r1, #0
 800038e:	f001 ff89 	bl	80022a4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000392:	003b      	movs	r3, r7
 8000394:	0018      	movs	r0, r3
 8000396:	231c      	movs	r3, #28
 8000398:	001a      	movs	r2, r3
 800039a:	2100      	movs	r1, #0
 800039c:	f001 ff82 	bl	80022a4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48;
 80003a0:	0021      	movs	r1, r4
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2222      	movs	r2, #34	@ 0x22
 80003a6:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2201      	movs	r2, #1
 80003ac:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2201      	movs	r2, #1
 80003b2:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2210      	movs	r2, #16
 80003b8:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 fe10 	bl	8000fe8 <HAL_RCC_OscConfig>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x64>
		Error_Handler();
 80003cc:	f000 f922 	bl	8000614 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80003d0:	211c      	movs	r1, #28
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2207      	movs	r2, #7
 80003d6:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2203      	movs	r2, #3
 80003dc:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2101      	movs	r1, #1
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 f980 	bl	80016f4 <HAL_RCC_ClockConfig>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x90>
		Error_Handler();
 80003f8:	f000 f90c 	bl	8000614 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003fc:	003b      	movs	r3, r7
 80003fe:	2220      	movs	r2, #32
 8000400:	601a      	str	r2, [r3, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000402:	003b      	movs	r3, r7
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000408:	003b      	movs	r3, r7
 800040a:	0018      	movs	r0, r3
 800040c:	f001 fabe 	bl	800198c <HAL_RCCEx_PeriphCLKConfig>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0xac>
		Error_Handler();
 8000414:	f000 f8fe 	bl	8000614 <Error_Handler>
	}
}
 8000418:	46c0      	nop			@ (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b019      	add	sp, #100	@ 0x64
 800041e:	bd90      	pop	{r4, r7, pc}

08000420 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <MX_I2C1_Init+0x74>)
 8000426:	4a1c      	ldr	r2, [pc, #112]	@ (8000498 <MX_I2C1_Init+0x78>)
 8000428:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 800042a:	4b1a      	ldr	r3, [pc, #104]	@ (8000494 <MX_I2C1_Init+0x74>)
 800042c:	4a1b      	ldr	r2, [pc, #108]	@ (800049c <MX_I2C1_Init+0x7c>)
 800042e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <MX_I2C1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000436:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <MX_I2C1_Init+0x74>)
 8000438:	2201      	movs	r2, #1
 800043a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800043c:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <MX_I2C1_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000442:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <MX_I2C1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <MX_I2C1_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800044e:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <MX_I2C1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <MX_I2C1_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800045a:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <MX_I2C1_Init+0x74>)
 800045c:	0018      	movs	r0, r3
 800045e:	f000 fc95 	bl	8000d8c <HAL_I2C_Init>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d001      	beq.n	800046a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000466:	f000 f8d5 	bl	8000614 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800046a:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <MX_I2C1_Init+0x74>)
 800046c:	2100      	movs	r1, #0
 800046e:	0018      	movs	r0, r3
 8000470:	f000 fd22 	bl	8000eb8 <HAL_I2CEx_ConfigAnalogFilter>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <MX_I2C1_Init+0x5c>
		Error_Handler();
 8000478:	f000 f8cc 	bl	8000614 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800047c:	4b05      	ldr	r3, [pc, #20]	@ (8000494 <MX_I2C1_Init+0x74>)
 800047e:	2100      	movs	r1, #0
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fd65 	bl	8000f50 <HAL_I2CEx_ConfigDigitalFilter>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <MX_I2C1_Init+0x6e>
		Error_Handler();
 800048a:	f000 f8c3 	bl	8000614 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000028 	.word	0x20000028
 8000498:	40005400 	.word	0x40005400
 800049c:	2000090e 	.word	0x2000090e

080004a0 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80004a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000518 <MX_SPI2_Init+0x78>)
 80004a8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80004aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004ac:	2282      	movs	r2, #130	@ 0x82
 80004ae:	0052      	lsls	r2, r2, #1
 80004b0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004b2:	4b18      	ldr	r3, [pc, #96]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80004b8:	4b16      	ldr	r3, [pc, #88]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004ba:	22e0      	movs	r2, #224	@ 0xe0
 80004bc:	00d2      	lsls	r2, r2, #3
 80004be:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004c0:	4b14      	ldr	r3, [pc, #80]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004c6:	4b13      	ldr	r3, [pc, #76]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80004cc:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004ce:	2280      	movs	r2, #128	@ 0x80
 80004d0:	0092      	lsls	r2, r2, #2
 80004d2:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004d6:	2208      	movs	r2, #8
 80004d8:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004da:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
 80004ec:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004ee:	2207      	movs	r2, #7
 80004f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004f2:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <MX_SPI2_Init+0x74>)
 80004fa:	2208      	movs	r2, #8
 80004fc:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80004fe:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <MX_SPI2_Init+0x74>)
 8000500:	0018      	movs	r0, r3
 8000502:	f001 fb41 	bl	8001b88 <HAL_SPI_Init>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d001      	beq.n	800050e <MX_SPI2_Init+0x6e>
		Error_Handler();
 800050a:	f000 f883 	bl	8000614 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	2000007c 	.word	0x2000007c
 8000518:	40003800 	.word	0x40003800

0800051c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b089      	sub	sp, #36	@ 0x24
 8000520:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000522:	240c      	movs	r4, #12
 8000524:	193b      	adds	r3, r7, r4
 8000526:	0018      	movs	r0, r3
 8000528:	2314      	movs	r3, #20
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f001 feb9 	bl	80022a4 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000532:	4b36      	ldr	r3, [pc, #216]	@ (800060c <MX_GPIO_Init+0xf0>)
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	4b35      	ldr	r3, [pc, #212]	@ (800060c <MX_GPIO_Init+0xf0>)
 8000538:	2180      	movs	r1, #128	@ 0x80
 800053a:	03c9      	lsls	r1, r1, #15
 800053c:	430a      	orrs	r2, r1
 800053e:	615a      	str	r2, [r3, #20]
 8000540:	4b32      	ldr	r3, [pc, #200]	@ (800060c <MX_GPIO_Init+0xf0>)
 8000542:	695a      	ldr	r2, [r3, #20]
 8000544:	2380      	movs	r3, #128	@ 0x80
 8000546:	03db      	lsls	r3, r3, #15
 8000548:	4013      	ands	r3, r2
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b2f      	ldr	r3, [pc, #188]	@ (800060c <MX_GPIO_Init+0xf0>)
 8000550:	695a      	ldr	r2, [r3, #20]
 8000552:	4b2e      	ldr	r3, [pc, #184]	@ (800060c <MX_GPIO_Init+0xf0>)
 8000554:	2180      	movs	r1, #128	@ 0x80
 8000556:	02c9      	lsls	r1, r1, #11
 8000558:	430a      	orrs	r2, r1
 800055a:	615a      	str	r2, [r3, #20]
 800055c:	4b2b      	ldr	r3, [pc, #172]	@ (800060c <MX_GPIO_Init+0xf0>)
 800055e:	695a      	ldr	r2, [r3, #20]
 8000560:	2380      	movs	r3, #128	@ 0x80
 8000562:	02db      	lsls	r3, r3, #11
 8000564:	4013      	ands	r3, r2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b28      	ldr	r3, [pc, #160]	@ (800060c <MX_GPIO_Init+0xf0>)
 800056c:	695a      	ldr	r2, [r3, #20]
 800056e:	4b27      	ldr	r3, [pc, #156]	@ (800060c <MX_GPIO_Init+0xf0>)
 8000570:	2180      	movs	r1, #128	@ 0x80
 8000572:	0289      	lsls	r1, r1, #10
 8000574:	430a      	orrs	r2, r1
 8000576:	615a      	str	r2, [r3, #20]
 8000578:	4b24      	ldr	r3, [pc, #144]	@ (800060c <MX_GPIO_Init+0xf0>)
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	2380      	movs	r3, #128	@ 0x80
 800057e:	029b      	lsls	r3, r3, #10
 8000580:	4013      	ands	r3, r2
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_11 | RG_STROBE_Pin, GPIO_PIN_RESET);
 8000586:	2398      	movs	r3, #152	@ 0x98
 8000588:	01db      	lsls	r3, r3, #7
 800058a:	4821      	ldr	r0, [pc, #132]	@ (8000610 <MX_GPIO_Init+0xf4>)
 800058c:	2200      	movs	r2, #0
 800058e:	0019      	movs	r1, r3
 8000590:	f000 fbde 	bl	8000d50 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000594:	2380      	movs	r3, #128	@ 0x80
 8000596:	015b      	lsls	r3, r3, #5
 8000598:	481d      	ldr	r0, [pc, #116]	@ (8000610 <MX_GPIO_Init+0xf4>)
 800059a:	2201      	movs	r2, #1
 800059c:	0019      	movs	r1, r3
 800059e:	f000 fbd7 	bl	8000d50 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);
 80005a2:	23e0      	movs	r3, #224	@ 0xe0
 80005a4:	00d9      	lsls	r1, r3, #3
 80005a6:	2390      	movs	r3, #144	@ 0x90
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	2200      	movs	r2, #0
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 fbcf 	bl	8000d50 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB10 PB11 PB12 RG_STROBE_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | RG_STROBE_Pin;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	22b8      	movs	r2, #184	@ 0xb8
 80005b6:	01d2      	lsls	r2, r2, #7
 80005b8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2201      	movs	r2, #1
 80005be:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	4a10      	ldr	r2, [pc, #64]	@ (8000610 <MX_GPIO_Init+0xf4>)
 80005d0:	0019      	movs	r1, r3
 80005d2:	0010      	movs	r0, r2
 80005d4:	f000 fa44 	bl	8000a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 80005d8:	0021      	movs	r1, r4
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	22e0      	movs	r2, #224	@ 0xe0
 80005de:	00d2      	lsls	r2, r2, #3
 80005e0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2201      	movs	r2, #1
 80005e6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	187a      	adds	r2, r7, r1
 80005f6:	2390      	movs	r3, #144	@ 0x90
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fa2f 	bl	8000a60 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b009      	add	sp, #36	@ 0x24
 8000608:	bd90      	pop	{r4, r7, pc}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	40021000 	.word	0x40021000
 8000610:	48000400 	.word	0x48000400

08000614 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	e7fd      	b.n	800061c <Error_Handler+0x8>

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <HAL_MspInit+0x44>)
 8000628:	699a      	ldr	r2, [r3, #24]
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <HAL_MspInit+0x44>)
 800062c:	2101      	movs	r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	619a      	str	r2, [r3, #24]
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <HAL_MspInit+0x44>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <HAL_MspInit+0x44>)
 8000640:	69da      	ldr	r2, [r3, #28]
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <HAL_MspInit+0x44>)
 8000644:	2180      	movs	r1, #128	@ 0x80
 8000646:	0549      	lsls	r1, r1, #21
 8000648:	430a      	orrs	r2, r1
 800064a:	61da      	str	r2, [r3, #28]
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <HAL_MspInit+0x44>)
 800064e:	69da      	ldr	r2, [r3, #28]
 8000650:	2380      	movs	r3, #128	@ 0x80
 8000652:	055b      	lsls	r3, r3, #21
 8000654:	4013      	ands	r3, r2
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b08b      	sub	sp, #44	@ 0x2c
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	2414      	movs	r4, #20
 8000672:	193b      	adds	r3, r7, r4
 8000674:	0018      	movs	r0, r3
 8000676:	2314      	movs	r3, #20
 8000678:	001a      	movs	r2, r3
 800067a:	2100      	movs	r1, #0
 800067c:	f001 fe12 	bl	80022a4 <memset>
  if(hi2c->Instance==I2C1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <HAL_I2C_MspInit+0x90>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d132      	bne.n	80006f0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <HAL_I2C_MspInit+0x94>)
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <HAL_I2C_MspInit+0x94>)
 8000690:	2180      	movs	r1, #128	@ 0x80
 8000692:	02c9      	lsls	r1, r1, #11
 8000694:	430a      	orrs	r2, r1
 8000696:	615a      	str	r2, [r3, #20]
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <HAL_I2C_MspInit+0x94>)
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	2380      	movs	r3, #128	@ 0x80
 800069e:	02db      	lsls	r3, r3, #11
 80006a0:	4013      	ands	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	22c0      	movs	r2, #192	@ 0xc0
 80006aa:	0092      	lsls	r2, r2, #2
 80006ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ae:	0021      	movs	r1, r4
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2212      	movs	r2, #18
 80006b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2203      	movs	r2, #3
 80006c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2201      	movs	r2, #1
 80006c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000700 <HAL_I2C_MspInit+0x98>)
 80006cc:	0019      	movs	r1, r3
 80006ce:	0010      	movs	r0, r2
 80006d0:	f000 f9c6 	bl	8000a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <HAL_I2C_MspInit+0x94>)
 80006d6:	69da      	ldr	r2, [r3, #28]
 80006d8:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <HAL_I2C_MspInit+0x94>)
 80006da:	2180      	movs	r1, #128	@ 0x80
 80006dc:	0389      	lsls	r1, r1, #14
 80006de:	430a      	orrs	r2, r1
 80006e0:	61da      	str	r2, [r3, #28]
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_I2C_MspInit+0x94>)
 80006e4:	69da      	ldr	r2, [r3, #28]
 80006e6:	2380      	movs	r3, #128	@ 0x80
 80006e8:	039b      	lsls	r3, r3, #14
 80006ea:	4013      	ands	r3, r2
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b00b      	add	sp, #44	@ 0x2c
 80006f6:	bd90      	pop	{r4, r7, pc}
 80006f8:	40005400 	.word	0x40005400
 80006fc:	40021000 	.word	0x40021000
 8000700:	48000400 	.word	0x48000400

08000704 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	2414      	movs	r4, #20
 800070e:	193b      	adds	r3, r7, r4
 8000710:	0018      	movs	r0, r3
 8000712:	2314      	movs	r3, #20
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f001 fdc4 	bl	80022a4 <memset>
  if(hspi->Instance==SPI2)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <HAL_SPI_MspInit+0x90>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d132      	bne.n	800078c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000726:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <HAL_SPI_MspInit+0x94>)
 8000728:	69da      	ldr	r2, [r3, #28]
 800072a:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <HAL_SPI_MspInit+0x94>)
 800072c:	2180      	movs	r1, #128	@ 0x80
 800072e:	01c9      	lsls	r1, r1, #7
 8000730:	430a      	orrs	r2, r1
 8000732:	61da      	str	r2, [r3, #28]
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <HAL_SPI_MspInit+0x94>)
 8000736:	69da      	ldr	r2, [r3, #28]
 8000738:	2380      	movs	r3, #128	@ 0x80
 800073a:	01db      	lsls	r3, r3, #7
 800073c:	4013      	ands	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <HAL_SPI_MspInit+0x94>)
 8000744:	695a      	ldr	r2, [r3, #20]
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <HAL_SPI_MspInit+0x94>)
 8000748:	2180      	movs	r1, #128	@ 0x80
 800074a:	02c9      	lsls	r1, r1, #11
 800074c:	430a      	orrs	r2, r1
 800074e:	615a      	str	r2, [r3, #20]
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <HAL_SPI_MspInit+0x94>)
 8000752:	695a      	ldr	r2, [r3, #20]
 8000754:	2380      	movs	r3, #128	@ 0x80
 8000756:	02db      	lsls	r3, r3, #11
 8000758:	4013      	ands	r3, r2
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	22a0      	movs	r2, #160	@ 0xa0
 8000762:	0212      	lsls	r2, r2, #8
 8000764:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	0021      	movs	r1, r4
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2202      	movs	r2, #2
 800076c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2203      	movs	r2, #3
 8000778:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	187b      	adds	r3, r7, r1
 8000782:	4a06      	ldr	r2, [pc, #24]	@ (800079c <HAL_SPI_MspInit+0x98>)
 8000784:	0019      	movs	r1, r3
 8000786:	0010      	movs	r0, r2
 8000788:	f000 f96a 	bl	8000a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b00b      	add	sp, #44	@ 0x2c
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	40003800 	.word	0x40003800
 8000798:	40021000 	.word	0x40021000
 800079c:	48000400 	.word	0x48000400

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	e7fd      	b.n	80007a4 <NMI_Handler+0x4>

080007a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	e7fd      	b.n	80007ac <HardFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f87a 	bl	80008c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007dc:	480d      	ldr	r0, [pc, #52]	@ (8000814 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007de:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007e0:	f7ff fff7 	bl	80007d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e4:	480c      	ldr	r0, [pc, #48]	@ (8000818 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e6:	490d      	ldr	r1, [pc, #52]	@ (800081c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000820 <LoopForever+0xe>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000828 <LoopForever+0x16>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800080a:	f001 fd53 	bl	80022b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080e:	f7ff fd07 	bl	8000220 <main>

08000812 <LoopForever>:

LoopForever:
    b LoopForever
 8000812:	e7fe      	b.n	8000812 <LoopForever>
  ldr   r0, =_estack
 8000814:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800081c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000820:	0800234c 	.word	0x0800234c
  ldr r2, =_sbss
 8000824:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000828:	200000e4 	.word	0x200000e4

0800082c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_COMP_IRQHandler>
	...

08000830 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <HAL_Init+0x24>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <HAL_Init+0x24>)
 800083a:	2110      	movs	r1, #16
 800083c:	430a      	orrs	r2, r1
 800083e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f809 	bl	8000858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000846:	f7ff feeb 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
}
 800084c:	0018      	movs	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	40022000 	.word	0x40022000

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <HAL_InitTick+0x5c>)
 8000862:	681c      	ldr	r4, [r3, #0]
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <HAL_InitTick+0x60>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	0019      	movs	r1, r3
 800086a:	23fa      	movs	r3, #250	@ 0xfa
 800086c:	0098      	lsls	r0, r3, #2
 800086e:	f7ff fc4b 	bl	8000108 <__udivsi3>
 8000872:	0003      	movs	r3, r0
 8000874:	0019      	movs	r1, r3
 8000876:	0020      	movs	r0, r4
 8000878:	f7ff fc46 	bl	8000108 <__udivsi3>
 800087c:	0003      	movs	r3, r0
 800087e:	0018      	movs	r0, r3
 8000880:	f000 f8e1 	bl	8000a46 <HAL_SYSTICK_Config>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	e00f      	b.n	80008ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d80b      	bhi.n	80008aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	2301      	movs	r3, #1
 8000896:	425b      	negs	r3, r3
 8000898:	2200      	movs	r2, #0
 800089a:	0018      	movs	r0, r3
 800089c:	f000 f8be 	bl	8000a1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_InitTick+0x64>)
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e000      	b.n	80008ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b003      	add	sp, #12
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000004 	.word	0x20000004

080008c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c4:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <HAL_IncTick+0x1c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	001a      	movs	r2, r3
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <HAL_IncTick+0x20>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	18d2      	adds	r2, r2, r3
 80008d0:	4b03      	ldr	r3, [pc, #12]	@ (80008e0 <HAL_IncTick+0x20>)
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	46c0      	nop			@ (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	20000008 	.word	0x20000008
 80008e0:	200000e0 	.word	0x200000e0

080008e4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;
 80008e8:	4b02      	ldr	r3, [pc, #8]	@ (80008f4 <HAL_GetTick+0x10>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	200000e0 	.word	0x200000e0

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	0002      	movs	r2, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b7f      	cmp	r3, #127	@ 0x7f
 800090c:	d828      	bhi.n	8000960 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800090e:	4a2f      	ldr	r2, [pc, #188]	@ (80009cc <__NVIC_SetPriority+0xd4>)
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b25b      	sxtb	r3, r3
 8000916:	089b      	lsrs	r3, r3, #2
 8000918:	33c0      	adds	r3, #192	@ 0xc0
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	589b      	ldr	r3, [r3, r2]
 800091e:	1dfa      	adds	r2, r7, #7
 8000920:	7812      	ldrb	r2, [r2, #0]
 8000922:	0011      	movs	r1, r2
 8000924:	2203      	movs	r2, #3
 8000926:	400a      	ands	r2, r1
 8000928:	00d2      	lsls	r2, r2, #3
 800092a:	21ff      	movs	r1, #255	@ 0xff
 800092c:	4091      	lsls	r1, r2
 800092e:	000a      	movs	r2, r1
 8000930:	43d2      	mvns	r2, r2
 8000932:	401a      	ands	r2, r3
 8000934:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	019b      	lsls	r3, r3, #6
 800093a:	22ff      	movs	r2, #255	@ 0xff
 800093c:	401a      	ands	r2, r3
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	0018      	movs	r0, r3
 8000944:	2303      	movs	r3, #3
 8000946:	4003      	ands	r3, r0
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800094c:	481f      	ldr	r0, [pc, #124]	@ (80009cc <__NVIC_SetPriority+0xd4>)
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b25b      	sxtb	r3, r3
 8000954:	089b      	lsrs	r3, r3, #2
 8000956:	430a      	orrs	r2, r1
 8000958:	33c0      	adds	r3, #192	@ 0xc0
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800095e:	e031      	b.n	80009c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000960:	4a1b      	ldr	r2, [pc, #108]	@ (80009d0 <__NVIC_SetPriority+0xd8>)
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	0019      	movs	r1, r3
 8000968:	230f      	movs	r3, #15
 800096a:	400b      	ands	r3, r1
 800096c:	3b08      	subs	r3, #8
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	3306      	adds	r3, #6
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	18d3      	adds	r3, r2, r3
 8000976:	3304      	adds	r3, #4
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	1dfa      	adds	r2, r7, #7
 800097c:	7812      	ldrb	r2, [r2, #0]
 800097e:	0011      	movs	r1, r2
 8000980:	2203      	movs	r2, #3
 8000982:	400a      	ands	r2, r1
 8000984:	00d2      	lsls	r2, r2, #3
 8000986:	21ff      	movs	r1, #255	@ 0xff
 8000988:	4091      	lsls	r1, r2
 800098a:	000a      	movs	r2, r1
 800098c:	43d2      	mvns	r2, r2
 800098e:	401a      	ands	r2, r3
 8000990:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	22ff      	movs	r2, #255	@ 0xff
 8000998:	401a      	ands	r2, r3
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	0018      	movs	r0, r3
 80009a0:	2303      	movs	r3, #3
 80009a2:	4003      	ands	r3, r0
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a8:	4809      	ldr	r0, [pc, #36]	@ (80009d0 <__NVIC_SetPriority+0xd8>)
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	001c      	movs	r4, r3
 80009b0:	230f      	movs	r3, #15
 80009b2:	4023      	ands	r3, r4
 80009b4:	3b08      	subs	r3, #8
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	430a      	orrs	r2, r1
 80009ba:	3306      	adds	r3, #6
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	18c3      	adds	r3, r0, r3
 80009c0:	3304      	adds	r3, #4
 80009c2:	601a      	str	r2, [r3, #0]
}
 80009c4:	46c0      	nop			@ (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b003      	add	sp, #12
 80009ca:	bd90      	pop	{r4, r7, pc}
 80009cc:	e000e100 	.word	0xe000e100
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	1e5a      	subs	r2, r3, #1
 80009e0:	2380      	movs	r3, #128	@ 0x80
 80009e2:	045b      	lsls	r3, r3, #17
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d301      	bcc.n	80009ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e8:	2301      	movs	r3, #1
 80009ea:	e010      	b.n	8000a0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <SysTick_Config+0x44>)
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	3a01      	subs	r2, #1
 80009f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f4:	2301      	movs	r3, #1
 80009f6:	425b      	negs	r3, r3
 80009f8:	2103      	movs	r1, #3
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff ff7c 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <SysTick_Config+0x44>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a06:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <SysTick_Config+0x44>)
 8000a08:	2207      	movs	r2, #7
 8000a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	0018      	movs	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b002      	add	sp, #8
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	e000e010 	.word	0xe000e010

08000a1c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	210f      	movs	r1, #15
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	1c02      	adds	r2, r0, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	0011      	movs	r1, r2
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff ff5d 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b004      	add	sp, #16
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff ffbf 	bl	80009d4 <SysTick_Config>
 8000a56:	0003      	movs	r3, r0
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b002      	add	sp, #8
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6e:	e155      	b.n	8000d1c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2101      	movs	r1, #1
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	4091      	lsls	r1, r2
 8000a7a:	000a      	movs	r2, r1
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d100      	bne.n	8000a88 <HAL_GPIO_Init+0x28>
 8000a86:	e146      	b.n	8000d16 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	4013      	ands	r3, r2
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d005      	beq.n	8000aa0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2203      	movs	r2, #3
 8000a9a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d130      	bne.n	8000b02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	2203      	movs	r2, #3
 8000aac:	409a      	lsls	r2, r3
 8000aae:	0013      	movs	r3, r2
 8000ab0:	43da      	mvns	r2, r3
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	68da      	ldr	r2, [r3, #12]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	0013      	movs	r3, r2
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	091b      	lsrs	r3, r3, #4
 8000aec:	2201      	movs	r2, #1
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
 8000af4:	0013      	movs	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2203      	movs	r2, #3
 8000b08:	4013      	ands	r3, r2
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d017      	beq.n	8000b3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	2203      	movs	r2, #3
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	0013      	movs	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2203      	movs	r2, #3
 8000b44:	4013      	ands	r3, r2
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d123      	bne.n	8000b92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	08da      	lsrs	r2, r3, #3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3208      	adds	r2, #8
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	58d3      	ldr	r3, [r2, r3]
 8000b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	2207      	movs	r2, #7
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	220f      	movs	r2, #15
 8000b62:	409a      	lsls	r2, r3
 8000b64:	0013      	movs	r3, r2
 8000b66:	43da      	mvns	r2, r3
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	691a      	ldr	r2, [r3, #16]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	2107      	movs	r1, #7
 8000b76:	400b      	ands	r3, r1
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	08da      	lsrs	r2, r3, #3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3208      	adds	r2, #8
 8000b8c:	0092      	lsls	r2, r2, #2
 8000b8e:	6939      	ldr	r1, [r7, #16]
 8000b90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2203      	movs	r2, #3
 8000bb0:	401a      	ands	r2, r3
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	409a      	lsls	r2, r3
 8000bb8:	0013      	movs	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	23c0      	movs	r3, #192	@ 0xc0
 8000bcc:	029b      	lsls	r3, r3, #10
 8000bce:	4013      	ands	r3, r2
 8000bd0:	d100      	bne.n	8000bd4 <HAL_GPIO_Init+0x174>
 8000bd2:	e0a0      	b.n	8000d16 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd4:	4b57      	ldr	r3, [pc, #348]	@ (8000d34 <HAL_GPIO_Init+0x2d4>)
 8000bd6:	699a      	ldr	r2, [r3, #24]
 8000bd8:	4b56      	ldr	r3, [pc, #344]	@ (8000d34 <HAL_GPIO_Init+0x2d4>)
 8000bda:	2101      	movs	r1, #1
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	619a      	str	r2, [r3, #24]
 8000be0:	4b54      	ldr	r3, [pc, #336]	@ (8000d34 <HAL_GPIO_Init+0x2d4>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	2201      	movs	r2, #1
 8000be6:	4013      	ands	r3, r2
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bec:	4a52      	ldr	r2, [pc, #328]	@ (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	589b      	ldr	r3, [r3, r2]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	4013      	ands	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	220f      	movs	r2, #15
 8000c04:	409a      	lsls	r2, r3
 8000c06:	0013      	movs	r3, r2
 8000c08:	43da      	mvns	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	2390      	movs	r3, #144	@ 0x90
 8000c14:	05db      	lsls	r3, r3, #23
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d019      	beq.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a47      	ldr	r2, [pc, #284]	@ (8000d3c <HAL_GPIO_Init+0x2dc>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d013      	beq.n	8000c4a <HAL_GPIO_Init+0x1ea>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a46      	ldr	r2, [pc, #280]	@ (8000d40 <HAL_GPIO_Init+0x2e0>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d00d      	beq.n	8000c46 <HAL_GPIO_Init+0x1e6>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a45      	ldr	r2, [pc, #276]	@ (8000d44 <HAL_GPIO_Init+0x2e4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d007      	beq.n	8000c42 <HAL_GPIO_Init+0x1e2>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a44      	ldr	r2, [pc, #272]	@ (8000d48 <HAL_GPIO_Init+0x2e8>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <HAL_GPIO_Init+0x1de>
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	e008      	b.n	8000c50 <HAL_GPIO_Init+0x1f0>
 8000c3e:	2305      	movs	r3, #5
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x1f0>
 8000c42:	2303      	movs	r3, #3
 8000c44:	e004      	b.n	8000c50 <HAL_GPIO_Init+0x1f0>
 8000c46:	2302      	movs	r3, #2
 8000c48:	e002      	b.n	8000c50 <HAL_GPIO_Init+0x1f0>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <HAL_GPIO_Init+0x1f0>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	2103      	movs	r1, #3
 8000c54:	400a      	ands	r2, r1
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	4093      	lsls	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c60:	4935      	ldr	r1, [pc, #212]	@ (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3302      	adds	r3, #2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c6e:	4b37      	ldr	r3, [pc, #220]	@ (8000d4c <HAL_GPIO_Init+0x2ec>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	43da      	mvns	r2, r3
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	2380      	movs	r3, #128	@ 0x80
 8000c84:	035b      	lsls	r3, r3, #13
 8000c86:	4013      	ands	r3, r2
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c92:	4b2e      	ldr	r3, [pc, #184]	@ (8000d4c <HAL_GPIO_Init+0x2ec>)
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c98:	4b2c      	ldr	r3, [pc, #176]	@ (8000d4c <HAL_GPIO_Init+0x2ec>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43da      	mvns	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	2380      	movs	r3, #128	@ 0x80
 8000cae:	039b      	lsls	r3, r3, #14
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	@ (8000d4c <HAL_GPIO_Init+0x2ec>)
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000cc2:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <HAL_GPIO_Init+0x2ec>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	2380      	movs	r3, #128	@ 0x80
 8000cd8:	029b      	lsls	r3, r3, #10
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <HAL_GPIO_Init+0x2ec>)
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <HAL_GPIO_Init+0x2ec>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43da      	mvns	r2, r3
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	2380      	movs	r3, #128	@ 0x80
 8000d02:	025b      	lsls	r3, r3, #9
 8000d04:	4013      	ands	r3, r2
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <HAL_GPIO_Init+0x2ec>)
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	40da      	lsrs	r2, r3
 8000d24:	1e13      	subs	r3, r2, #0
 8000d26:	d000      	beq.n	8000d2a <HAL_GPIO_Init+0x2ca>
 8000d28:	e6a2      	b.n	8000a70 <HAL_GPIO_Init+0x10>
  } 
}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b006      	add	sp, #24
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010000 	.word	0x40010000
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	48000800 	.word	0x48000800
 8000d44:	48000c00 	.word	0x48000c00
 8000d48:	48001000 	.word	0x48001000
 8000d4c:	40010400 	.word	0x40010400

08000d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	0008      	movs	r0, r1
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	1cbb      	adds	r3, r7, #2
 8000d5e:	1c02      	adds	r2, r0, #0
 8000d60:	801a      	strh	r2, [r3, #0]
 8000d62:	1c7b      	adds	r3, r7, #1
 8000d64:	1c0a      	adds	r2, r1, #0
 8000d66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d68:	1c7b      	adds	r3, r7, #1
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d004      	beq.n	8000d7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d70:	1cbb      	adds	r3, r7, #2
 8000d72:	881a      	ldrh	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d78:	e003      	b.n	8000d82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d7a:	1cbb      	adds	r3, r7, #2
 8000d7c:	881a      	ldrh	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e082      	b.n	8000ea4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2241      	movs	r2, #65	@ 0x41
 8000da2:	5c9b      	ldrb	r3, [r3, r2]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d107      	bne.n	8000dba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2240      	movs	r2, #64	@ 0x40
 8000dae:	2100      	movs	r1, #0
 8000db0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fc57 	bl	8000668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2241      	movs	r2, #65	@ 0x41
 8000dbe:	2124      	movs	r1, #36	@ 0x24
 8000dc0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	438a      	bics	r2, r1
 8000dd0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4934      	ldr	r1, [pc, #208]	@ (8000eac <HAL_I2C_Init+0x120>)
 8000ddc:	400a      	ands	r2, r1
 8000dde:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4931      	ldr	r1, [pc, #196]	@ (8000eb0 <HAL_I2C_Init+0x124>)
 8000dec:	400a      	ands	r2, r1
 8000dee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d108      	bne.n	8000e0a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	0209      	lsls	r1, r1, #8
 8000e04:	430a      	orrs	r2, r1
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	e007      	b.n	8000e1a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2184      	movs	r1, #132	@ 0x84
 8000e14:	0209      	lsls	r1, r1, #8
 8000e16:	430a      	orrs	r2, r1
 8000e18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d104      	bne.n	8000e2c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2280      	movs	r2, #128	@ 0x80
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	491f      	ldr	r1, [pc, #124]	@ (8000eb4 <HAL_I2C_Init+0x128>)
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	491a      	ldr	r1, [pc, #104]	@ (8000eb0 <HAL_I2C_Init+0x124>)
 8000e48:	400a      	ands	r2, r1
 8000e4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	431a      	orrs	r2, r3
 8000e56:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69d9      	ldr	r1, [r3, #28]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a1a      	ldr	r2, [r3, #32]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	430a      	orrs	r2, r1
 8000e84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2241      	movs	r2, #65	@ 0x41
 8000e90:	2120      	movs	r1, #32
 8000e92:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2242      	movs	r2, #66	@ 0x42
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	f0ffffff 	.word	0xf0ffffff
 8000eb0:	ffff7fff 	.word	0xffff7fff
 8000eb4:	02008000 	.word	0x02008000

08000eb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2241      	movs	r2, #65	@ 0x41
 8000ec6:	5c9b      	ldrb	r3, [r3, r2]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b20      	cmp	r3, #32
 8000ecc:	d138      	bne.n	8000f40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2240      	movs	r2, #64	@ 0x40
 8000ed2:	5c9b      	ldrb	r3, [r3, r2]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d101      	bne.n	8000edc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e032      	b.n	8000f42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2240      	movs	r2, #64	@ 0x40
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2241      	movs	r2, #65	@ 0x41
 8000ee8:	2124      	movs	r1, #36	@ 0x24
 8000eea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	438a      	bics	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4911      	ldr	r1, [pc, #68]	@ (8000f4c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000f08:	400a      	ands	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6819      	ldr	r1, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2101      	movs	r1, #1
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2241      	movs	r2, #65	@ 0x41
 8000f30:	2120      	movs	r1, #32
 8000f32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2240      	movs	r2, #64	@ 0x40
 8000f38:	2100      	movs	r1, #0
 8000f3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e000      	b.n	8000f42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f40:	2302      	movs	r3, #2
  }
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	ffffefff 	.word	0xffffefff

08000f50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2241      	movs	r2, #65	@ 0x41
 8000f5e:	5c9b      	ldrb	r3, [r3, r2]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b20      	cmp	r3, #32
 8000f64:	d139      	bne.n	8000fda <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2240      	movs	r2, #64	@ 0x40
 8000f6a:	5c9b      	ldrb	r3, [r3, r2]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e033      	b.n	8000fdc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2240      	movs	r2, #64	@ 0x40
 8000f78:	2101      	movs	r1, #1
 8000f7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2241      	movs	r2, #65	@ 0x41
 8000f80:	2124      	movs	r1, #36	@ 0x24
 8000f82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2101      	movs	r1, #1
 8000f90:	438a      	bics	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4a11      	ldr	r2, [pc, #68]	@ (8000fe4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2241      	movs	r2, #65	@ 0x41
 8000fca:	2120      	movs	r1, #32
 8000fcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2240      	movs	r2, #64	@ 0x40
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000fda:	2302      	movs	r3, #2
  }
}
 8000fdc:	0018      	movs	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b004      	add	sp, #16
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	fffff0ff 	.word	0xfffff0ff

08000fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f000 fb76 	bl	80016e8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2201      	movs	r2, #1
 8001002:	4013      	ands	r3, r2
 8001004:	d100      	bne.n	8001008 <HAL_RCC_OscConfig+0x20>
 8001006:	e08e      	b.n	8001126 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001008:	4bc5      	ldr	r3, [pc, #788]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	220c      	movs	r2, #12
 800100e:	4013      	ands	r3, r2
 8001010:	2b04      	cmp	r3, #4
 8001012:	d00e      	beq.n	8001032 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001014:	4bc2      	ldr	r3, [pc, #776]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	220c      	movs	r2, #12
 800101a:	4013      	ands	r3, r2
 800101c:	2b08      	cmp	r3, #8
 800101e:	d117      	bne.n	8001050 <HAL_RCC_OscConfig+0x68>
 8001020:	4bbf      	ldr	r3, [pc, #764]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	23c0      	movs	r3, #192	@ 0xc0
 8001026:	025b      	lsls	r3, r3, #9
 8001028:	401a      	ands	r2, r3
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	025b      	lsls	r3, r3, #9
 800102e:	429a      	cmp	r2, r3
 8001030:	d10e      	bne.n	8001050 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001032:	4bbb      	ldr	r3, [pc, #748]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	2380      	movs	r3, #128	@ 0x80
 8001038:	029b      	lsls	r3, r3, #10
 800103a:	4013      	ands	r3, r2
 800103c:	d100      	bne.n	8001040 <HAL_RCC_OscConfig+0x58>
 800103e:	e071      	b.n	8001124 <HAL_RCC_OscConfig+0x13c>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d000      	beq.n	800104a <HAL_RCC_OscConfig+0x62>
 8001048:	e06c      	b.n	8001124 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	f000 fb4c 	bl	80016e8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d107      	bne.n	8001068 <HAL_RCC_OscConfig+0x80>
 8001058:	4bb1      	ldr	r3, [pc, #708]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4bb0      	ldr	r3, [pc, #704]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 800105e:	2180      	movs	r1, #128	@ 0x80
 8001060:	0249      	lsls	r1, r1, #9
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e02f      	b.n	80010c8 <HAL_RCC_OscConfig+0xe0>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10c      	bne.n	800108a <HAL_RCC_OscConfig+0xa2>
 8001070:	4bab      	ldr	r3, [pc, #684]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4baa      	ldr	r3, [pc, #680]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001076:	49ab      	ldr	r1, [pc, #684]	@ (8001324 <HAL_RCC_OscConfig+0x33c>)
 8001078:	400a      	ands	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	4ba8      	ldr	r3, [pc, #672]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4ba7      	ldr	r3, [pc, #668]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001082:	49a9      	ldr	r1, [pc, #676]	@ (8001328 <HAL_RCC_OscConfig+0x340>)
 8001084:	400a      	ands	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	e01e      	b.n	80010c8 <HAL_RCC_OscConfig+0xe0>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b05      	cmp	r3, #5
 8001090:	d10e      	bne.n	80010b0 <HAL_RCC_OscConfig+0xc8>
 8001092:	4ba3      	ldr	r3, [pc, #652]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4ba2      	ldr	r3, [pc, #648]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001098:	2180      	movs	r1, #128	@ 0x80
 800109a:	02c9      	lsls	r1, r1, #11
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	4b9f      	ldr	r3, [pc, #636]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b9e      	ldr	r3, [pc, #632]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80010a6:	2180      	movs	r1, #128	@ 0x80
 80010a8:	0249      	lsls	r1, r1, #9
 80010aa:	430a      	orrs	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	e00b      	b.n	80010c8 <HAL_RCC_OscConfig+0xe0>
 80010b0:	4b9b      	ldr	r3, [pc, #620]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b9a      	ldr	r3, [pc, #616]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80010b6:	499b      	ldr	r1, [pc, #620]	@ (8001324 <HAL_RCC_OscConfig+0x33c>)
 80010b8:	400a      	ands	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	4b98      	ldr	r3, [pc, #608]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b97      	ldr	r3, [pc, #604]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80010c2:	4999      	ldr	r1, [pc, #612]	@ (8001328 <HAL_RCC_OscConfig+0x340>)
 80010c4:	400a      	ands	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d014      	beq.n	80010fa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fc08 	bl	80008e4 <HAL_GetTick>
 80010d4:	0003      	movs	r3, r0
 80010d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010da:	f7ff fc03 	bl	80008e4 <HAL_GetTick>
 80010de:	0002      	movs	r2, r0
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b64      	cmp	r3, #100	@ 0x64
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e2fd      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	029b      	lsls	r3, r3, #10
 80010f4:	4013      	ands	r3, r2
 80010f6:	d0f0      	beq.n	80010da <HAL_RCC_OscConfig+0xf2>
 80010f8:	e015      	b.n	8001126 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fa:	f7ff fbf3 	bl	80008e4 <HAL_GetTick>
 80010fe:	0003      	movs	r3, r0
 8001100:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff fbee 	bl	80008e4 <HAL_GetTick>
 8001108:	0002      	movs	r2, r0
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b64      	cmp	r3, #100	@ 0x64
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e2e8      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	4b82      	ldr	r3, [pc, #520]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	2380      	movs	r3, #128	@ 0x80
 800111c:	029b      	lsls	r3, r3, #10
 800111e:	4013      	ands	r3, r2
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x11c>
 8001122:	e000      	b.n	8001126 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001124:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2202      	movs	r2, #2
 800112c:	4013      	ands	r3, r2
 800112e:	d100      	bne.n	8001132 <HAL_RCC_OscConfig+0x14a>
 8001130:	e06c      	b.n	800120c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001132:	4b7b      	ldr	r3, [pc, #492]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	220c      	movs	r2, #12
 8001138:	4013      	ands	r3, r2
 800113a:	d00e      	beq.n	800115a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800113c:	4b78      	ldr	r3, [pc, #480]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	220c      	movs	r2, #12
 8001142:	4013      	ands	r3, r2
 8001144:	2b08      	cmp	r3, #8
 8001146:	d11f      	bne.n	8001188 <HAL_RCC_OscConfig+0x1a0>
 8001148:	4b75      	ldr	r3, [pc, #468]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	23c0      	movs	r3, #192	@ 0xc0
 800114e:	025b      	lsls	r3, r3, #9
 8001150:	401a      	ands	r2, r3
 8001152:	2380      	movs	r3, #128	@ 0x80
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	429a      	cmp	r2, r3
 8001158:	d116      	bne.n	8001188 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115a:	4b71      	ldr	r3, [pc, #452]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2202      	movs	r2, #2
 8001160:	4013      	ands	r3, r2
 8001162:	d005      	beq.n	8001170 <HAL_RCC_OscConfig+0x188>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d001      	beq.n	8001170 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e2bb      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	4b6b      	ldr	r3, [pc, #428]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	22f8      	movs	r2, #248	@ 0xf8
 8001176:	4393      	bics	r3, r2
 8001178:	0019      	movs	r1, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	00da      	lsls	r2, r3, #3
 8001180:	4b67      	ldr	r3, [pc, #412]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001182:	430a      	orrs	r2, r1
 8001184:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001186:	e041      	b.n	800120c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d024      	beq.n	80011da <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001190:	4b63      	ldr	r3, [pc, #396]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b62      	ldr	r3, [pc, #392]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001196:	2101      	movs	r1, #1
 8001198:	430a      	orrs	r2, r1
 800119a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff fba2 	bl	80008e4 <HAL_GetTick>
 80011a0:	0003      	movs	r3, r0
 80011a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a6:	f7ff fb9d 	bl	80008e4 <HAL_GetTick>
 80011aa:	0002      	movs	r2, r0
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e297      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b8:	4b59      	ldr	r3, [pc, #356]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2202      	movs	r2, #2
 80011be:	4013      	ands	r3, r2
 80011c0:	d0f1      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	4b57      	ldr	r3, [pc, #348]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	22f8      	movs	r2, #248	@ 0xf8
 80011c8:	4393      	bics	r3, r2
 80011ca:	0019      	movs	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	00da      	lsls	r2, r3, #3
 80011d2:	4b53      	ldr	r3, [pc, #332]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e018      	b.n	800120c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011da:	4b51      	ldr	r3, [pc, #324]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b50      	ldr	r3, [pc, #320]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	438a      	bics	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff fb7d 	bl	80008e4 <HAL_GetTick>
 80011ea:	0003      	movs	r3, r0
 80011ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f0:	f7ff fb78 	bl	80008e4 <HAL_GetTick>
 80011f4:	0002      	movs	r2, r0
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e272      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	4b47      	ldr	r3, [pc, #284]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2202      	movs	r2, #2
 8001208:	4013      	ands	r3, r2
 800120a:	d1f1      	bne.n	80011f0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2208      	movs	r2, #8
 8001212:	4013      	ands	r3, r2
 8001214:	d036      	beq.n	8001284 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d019      	beq.n	8001252 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121e:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001222:	4b3f      	ldr	r3, [pc, #252]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001224:	2101      	movs	r1, #1
 8001226:	430a      	orrs	r2, r1
 8001228:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fb5b 	bl	80008e4 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff fb56 	bl	80008e4 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e250      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001246:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124a:	2202      	movs	r2, #2
 800124c:	4013      	ands	r3, r2
 800124e:	d0f1      	beq.n	8001234 <HAL_RCC_OscConfig+0x24c>
 8001250:	e018      	b.n	8001284 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001252:	4b33      	ldr	r3, [pc, #204]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001254:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001256:	4b32      	ldr	r3, [pc, #200]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001258:	2101      	movs	r1, #1
 800125a:	438a      	bics	r2, r1
 800125c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125e:	f7ff fb41 	bl	80008e4 <HAL_GetTick>
 8001262:	0003      	movs	r3, r0
 8001264:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff fb3c 	bl	80008e4 <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e236      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127a:	4b29      	ldr	r3, [pc, #164]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127e:	2202      	movs	r2, #2
 8001280:	4013      	ands	r3, r2
 8001282:	d1f1      	bne.n	8001268 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2204      	movs	r2, #4
 800128a:	4013      	ands	r3, r2
 800128c:	d100      	bne.n	8001290 <HAL_RCC_OscConfig+0x2a8>
 800128e:	e0b5      	b.n	80013fc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001290:	201f      	movs	r0, #31
 8001292:	183b      	adds	r3, r7, r0
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001298:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 800129a:	69da      	ldr	r2, [r3, #28]
 800129c:	2380      	movs	r3, #128	@ 0x80
 800129e:	055b      	lsls	r3, r3, #21
 80012a0:	4013      	ands	r3, r2
 80012a2:	d110      	bne.n	80012c6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80012a6:	69da      	ldr	r2, [r3, #28]
 80012a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80012aa:	2180      	movs	r1, #128	@ 0x80
 80012ac:	0549      	lsls	r1, r1, #21
 80012ae:	430a      	orrs	r2, r1
 80012b0:	61da      	str	r2, [r3, #28]
 80012b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80012b4:	69da      	ldr	r2, [r3, #28]
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	055b      	lsls	r3, r3, #21
 80012ba:	4013      	ands	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012c0:	183b      	adds	r3, r7, r0
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_RCC_OscConfig+0x344>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4013      	ands	r3, r2
 80012d0:	d11a      	bne.n	8001308 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d2:	4b16      	ldr	r3, [pc, #88]	@ (800132c <HAL_RCC_OscConfig+0x344>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <HAL_RCC_OscConfig+0x344>)
 80012d8:	2180      	movs	r1, #128	@ 0x80
 80012da:	0049      	lsls	r1, r1, #1
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e0:	f7ff fb00 	bl	80008e4 <HAL_GetTick>
 80012e4:	0003      	movs	r3, r0
 80012e6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ea:	f7ff fafb 	bl	80008e4 <HAL_GetTick>
 80012ee:	0002      	movs	r2, r0
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b64      	cmp	r3, #100	@ 0x64
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e1f5      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fc:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <HAL_RCC_OscConfig+0x344>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2380      	movs	r3, #128	@ 0x80
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4013      	ands	r3, r2
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d10f      	bne.n	8001330 <HAL_RCC_OscConfig+0x348>
 8001310:	4b03      	ldr	r3, [pc, #12]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001312:	6a1a      	ldr	r2, [r3, #32]
 8001314:	4b02      	ldr	r3, [pc, #8]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001316:	2101      	movs	r1, #1
 8001318:	430a      	orrs	r2, r1
 800131a:	621a      	str	r2, [r3, #32]
 800131c:	e036      	b.n	800138c <HAL_RCC_OscConfig+0x3a4>
 800131e:	46c0      	nop			@ (mov r8, r8)
 8001320:	40021000 	.word	0x40021000
 8001324:	fffeffff 	.word	0xfffeffff
 8001328:	fffbffff 	.word	0xfffbffff
 800132c:	40007000 	.word	0x40007000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10c      	bne.n	8001352 <HAL_RCC_OscConfig+0x36a>
 8001338:	4bca      	ldr	r3, [pc, #808]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800133a:	6a1a      	ldr	r2, [r3, #32]
 800133c:	4bc9      	ldr	r3, [pc, #804]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800133e:	2101      	movs	r1, #1
 8001340:	438a      	bics	r2, r1
 8001342:	621a      	str	r2, [r3, #32]
 8001344:	4bc7      	ldr	r3, [pc, #796]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001346:	6a1a      	ldr	r2, [r3, #32]
 8001348:	4bc6      	ldr	r3, [pc, #792]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800134a:	2104      	movs	r1, #4
 800134c:	438a      	bics	r2, r1
 800134e:	621a      	str	r2, [r3, #32]
 8001350:	e01c      	b.n	800138c <HAL_RCC_OscConfig+0x3a4>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b05      	cmp	r3, #5
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x38c>
 800135a:	4bc2      	ldr	r3, [pc, #776]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	4bc1      	ldr	r3, [pc, #772]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001360:	2104      	movs	r1, #4
 8001362:	430a      	orrs	r2, r1
 8001364:	621a      	str	r2, [r3, #32]
 8001366:	4bbf      	ldr	r3, [pc, #764]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001368:	6a1a      	ldr	r2, [r3, #32]
 800136a:	4bbe      	ldr	r3, [pc, #760]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800136c:	2101      	movs	r1, #1
 800136e:	430a      	orrs	r2, r1
 8001370:	621a      	str	r2, [r3, #32]
 8001372:	e00b      	b.n	800138c <HAL_RCC_OscConfig+0x3a4>
 8001374:	4bbb      	ldr	r3, [pc, #748]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	4bba      	ldr	r3, [pc, #744]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800137a:	2101      	movs	r1, #1
 800137c:	438a      	bics	r2, r1
 800137e:	621a      	str	r2, [r3, #32]
 8001380:	4bb8      	ldr	r3, [pc, #736]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001382:	6a1a      	ldr	r2, [r3, #32]
 8001384:	4bb7      	ldr	r3, [pc, #732]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001386:	2104      	movs	r1, #4
 8001388:	438a      	bics	r2, r1
 800138a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d014      	beq.n	80013be <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001394:	f7ff faa6 	bl	80008e4 <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139c:	e009      	b.n	80013b2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f7ff faa1 	bl	80008e4 <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	4aaf      	ldr	r2, [pc, #700]	@ (8001668 <HAL_RCC_OscConfig+0x680>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e19a      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b2:	4bac      	ldr	r3, [pc, #688]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x3b6>
 80013bc:	e013      	b.n	80013e6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fa91 	bl	80008e4 <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c6:	e009      	b.n	80013dc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff fa8c 	bl	80008e4 <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	4aa5      	ldr	r2, [pc, #660]	@ (8001668 <HAL_RCC_OscConfig+0x680>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e185      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013dc:	4ba1      	ldr	r3, [pc, #644]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	2202      	movs	r2, #2
 80013e2:	4013      	ands	r3, r2
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013e6:	231f      	movs	r3, #31
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f0:	4b9c      	ldr	r3, [pc, #624]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80013f2:	69da      	ldr	r2, [r3, #28]
 80013f4:	4b9b      	ldr	r3, [pc, #620]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80013f6:	499d      	ldr	r1, [pc, #628]	@ (800166c <HAL_RCC_OscConfig+0x684>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2210      	movs	r2, #16
 8001402:	4013      	ands	r3, r2
 8001404:	d063      	beq.n	80014ce <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d12a      	bne.n	8001464 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800140e:	4b95      	ldr	r3, [pc, #596]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001412:	4b94      	ldr	r3, [pc, #592]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001414:	2104      	movs	r1, #4
 8001416:	430a      	orrs	r2, r1
 8001418:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800141a:	4b92      	ldr	r3, [pc, #584]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800141c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800141e:	4b91      	ldr	r3, [pc, #580]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001420:	2101      	movs	r1, #1
 8001422:	430a      	orrs	r2, r1
 8001424:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fa5d 	bl	80008e4 <HAL_GetTick>
 800142a:	0003      	movs	r3, r0
 800142c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001430:	f7ff fa58 	bl	80008e4 <HAL_GetTick>
 8001434:	0002      	movs	r2, r0
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e152      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001442:	4b88      	ldr	r3, [pc, #544]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001446:	2202      	movs	r2, #2
 8001448:	4013      	ands	r3, r2
 800144a:	d0f1      	beq.n	8001430 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800144c:	4b85      	ldr	r3, [pc, #532]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800144e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001450:	22f8      	movs	r2, #248	@ 0xf8
 8001452:	4393      	bics	r3, r2
 8001454:	0019      	movs	r1, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	00da      	lsls	r2, r3, #3
 800145c:	4b81      	ldr	r3, [pc, #516]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800145e:	430a      	orrs	r2, r1
 8001460:	635a      	str	r2, [r3, #52]	@ 0x34
 8001462:	e034      	b.n	80014ce <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	3305      	adds	r3, #5
 800146a:	d111      	bne.n	8001490 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800146c:	4b7d      	ldr	r3, [pc, #500]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800146e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001470:	4b7c      	ldr	r3, [pc, #496]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001472:	2104      	movs	r1, #4
 8001474:	438a      	bics	r2, r1
 8001476:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001478:	4b7a      	ldr	r3, [pc, #488]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800147a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147c:	22f8      	movs	r2, #248	@ 0xf8
 800147e:	4393      	bics	r3, r2
 8001480:	0019      	movs	r1, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	00da      	lsls	r2, r3, #3
 8001488:	4b76      	ldr	r3, [pc, #472]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800148a:	430a      	orrs	r2, r1
 800148c:	635a      	str	r2, [r3, #52]	@ 0x34
 800148e:	e01e      	b.n	80014ce <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001490:	4b74      	ldr	r3, [pc, #464]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001494:	4b73      	ldr	r3, [pc, #460]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001496:	2104      	movs	r1, #4
 8001498:	430a      	orrs	r2, r1
 800149a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800149c:	4b71      	ldr	r3, [pc, #452]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800149e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014a0:	4b70      	ldr	r3, [pc, #448]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80014a2:	2101      	movs	r1, #1
 80014a4:	438a      	bics	r2, r1
 80014a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a8:	f7ff fa1c 	bl	80008e4 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014b2:	f7ff fa17 	bl	80008e4 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e111      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014c4:	4b67      	ldr	r3, [pc, #412]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80014c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d1f1      	bne.n	80014b2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2220      	movs	r2, #32
 80014d4:	4013      	ands	r3, r2
 80014d6:	d05c      	beq.n	8001592 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014d8:	4b62      	ldr	r3, [pc, #392]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	220c      	movs	r2, #12
 80014de:	4013      	ands	r3, r2
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d00e      	beq.n	8001502 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014e4:	4b5f      	ldr	r3, [pc, #380]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	220c      	movs	r2, #12
 80014ea:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d114      	bne.n	800151a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014f0:	4b5c      	ldr	r3, [pc, #368]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	23c0      	movs	r3, #192	@ 0xc0
 80014f6:	025b      	lsls	r3, r3, #9
 80014f8:	401a      	ands	r2, r3
 80014fa:	23c0      	movs	r3, #192	@ 0xc0
 80014fc:	025b      	lsls	r3, r3, #9
 80014fe:	429a      	cmp	r2, r3
 8001500:	d10b      	bne.n	800151a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001502:	4b58      	ldr	r3, [pc, #352]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001506:	2380      	movs	r3, #128	@ 0x80
 8001508:	029b      	lsls	r3, r3, #10
 800150a:	4013      	ands	r3, r2
 800150c:	d040      	beq.n	8001590 <HAL_RCC_OscConfig+0x5a8>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d03c      	beq.n	8001590 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0e6      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d01b      	beq.n	800155a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001522:	4b50      	ldr	r3, [pc, #320]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001526:	4b4f      	ldr	r3, [pc, #316]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001528:	2180      	movs	r1, #128	@ 0x80
 800152a:	0249      	lsls	r1, r1, #9
 800152c:	430a      	orrs	r2, r1
 800152e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff f9d8 	bl	80008e4 <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800153a:	f7ff f9d3 	bl	80008e4 <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e0cd      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800154c:	4b45      	ldr	r3, [pc, #276]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800154e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	029b      	lsls	r3, r3, #10
 8001554:	4013      	ands	r3, r2
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x552>
 8001558:	e01b      	b.n	8001592 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800155a:	4b42      	ldr	r3, [pc, #264]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800155c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800155e:	4b41      	ldr	r3, [pc, #260]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001560:	4943      	ldr	r1, [pc, #268]	@ (8001670 <HAL_RCC_OscConfig+0x688>)
 8001562:	400a      	ands	r2, r1
 8001564:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff f9bd 	bl	80008e4 <HAL_GetTick>
 800156a:	0003      	movs	r3, r0
 800156c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001570:	f7ff f9b8 	bl	80008e4 <HAL_GetTick>
 8001574:	0002      	movs	r2, r0
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0b2      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001582:	4b38      	ldr	r3, [pc, #224]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001586:	2380      	movs	r3, #128	@ 0x80
 8001588:	029b      	lsls	r3, r3, #10
 800158a:	4013      	ands	r3, r2
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x588>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001590:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	2b00      	cmp	r3, #0
 8001598:	d100      	bne.n	800159c <HAL_RCC_OscConfig+0x5b4>
 800159a:	e0a4      	b.n	80016e6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800159c:	4b31      	ldr	r3, [pc, #196]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	220c      	movs	r2, #12
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d100      	bne.n	80015aa <HAL_RCC_OscConfig+0x5c2>
 80015a8:	e078      	b.n	800169c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d14c      	bne.n	800164c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80015b8:	492e      	ldr	r1, [pc, #184]	@ (8001674 <HAL_RCC_OscConfig+0x68c>)
 80015ba:	400a      	ands	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff f991 	bl	80008e4 <HAL_GetTick>
 80015c2:	0003      	movs	r3, r0
 80015c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff f98c 	bl	80008e4 <HAL_GetTick>
 80015cc:	0002      	movs	r2, r0
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e086      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015da:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	2380      	movs	r3, #128	@ 0x80
 80015e0:	049b      	lsls	r3, r3, #18
 80015e2:	4013      	ands	r3, r2
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80015e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ea:	220f      	movs	r2, #15
 80015ec:	4393      	bics	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80015f6:	430a      	orrs	r2, r1
 80015f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001678 <HAL_RCC_OscConfig+0x690>)
 8001600:	4013      	ands	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160c:	431a      	orrs	r2, r3
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001610:	430a      	orrs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001614:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800161a:	2180      	movs	r1, #128	@ 0x80
 800161c:	0449      	lsls	r1, r1, #17
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001622:	f7ff f95f 	bl	80008e4 <HAL_GetTick>
 8001626:	0003      	movs	r3, r0
 8001628:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162c:	f7ff f95a 	bl	80008e4 <HAL_GetTick>
 8001630:	0002      	movs	r2, r0
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e054      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	049b      	lsls	r3, r3, #18
 8001646:	4013      	ands	r3, r2
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x644>
 800164a:	e04c      	b.n	80016e6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <HAL_RCC_OscConfig+0x67c>)
 8001652:	4908      	ldr	r1, [pc, #32]	@ (8001674 <HAL_RCC_OscConfig+0x68c>)
 8001654:	400a      	ands	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff f944 	bl	80008e4 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001660:	e015      	b.n	800168e <HAL_RCC_OscConfig+0x6a6>
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	40021000 	.word	0x40021000
 8001668:	00001388 	.word	0x00001388
 800166c:	efffffff 	.word	0xefffffff
 8001670:	fffeffff 	.word	0xfffeffff
 8001674:	feffffff 	.word	0xfeffffff
 8001678:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff f932 	bl	80008e4 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e02c      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_RCC_OscConfig+0x708>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	2380      	movs	r3, #128	@ 0x80
 8001694:	049b      	lsls	r3, r3, #18
 8001696:	4013      	ands	r3, r2
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x694>
 800169a:	e024      	b.n	80016e6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e01f      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_RCC_OscConfig+0x708>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <HAL_RCC_OscConfig+0x708>)
 80016b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	23c0      	movs	r3, #192	@ 0xc0
 80016b8:	025b      	lsls	r3, r3, #9
 80016ba:	401a      	ands	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d10e      	bne.n	80016e2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	220f      	movs	r2, #15
 80016c8:	401a      	ands	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	23f0      	movs	r3, #240	@ 0xf0
 80016d6:	039b      	lsls	r3, r3, #14
 80016d8:	401a      	ands	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	0018      	movs	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b008      	add	sp, #32
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0bf      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001708:	4b61      	ldr	r3, [pc, #388]	@ (8001890 <HAL_RCC_ClockConfig+0x19c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2201      	movs	r2, #1
 800170e:	4013      	ands	r3, r2
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d911      	bls.n	800173a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b5e      	ldr	r3, [pc, #376]	@ (8001890 <HAL_RCC_ClockConfig+0x19c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2201      	movs	r2, #1
 800171c:	4393      	bics	r3, r2
 800171e:	0019      	movs	r1, r3
 8001720:	4b5b      	ldr	r3, [pc, #364]	@ (8001890 <HAL_RCC_ClockConfig+0x19c>)
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001728:	4b59      	ldr	r3, [pc, #356]	@ (8001890 <HAL_RCC_ClockConfig+0x19c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2201      	movs	r2, #1
 800172e:	4013      	ands	r3, r2
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d001      	beq.n	800173a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0a6      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2202      	movs	r2, #2
 8001740:	4013      	ands	r3, r2
 8001742:	d015      	beq.n	8001770 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2204      	movs	r2, #4
 800174a:	4013      	ands	r3, r2
 800174c:	d006      	beq.n	800175c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800174e:	4b51      	ldr	r3, [pc, #324]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	4b50      	ldr	r3, [pc, #320]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 8001754:	21e0      	movs	r1, #224	@ 0xe0
 8001756:	00c9      	lsls	r1, r1, #3
 8001758:	430a      	orrs	r2, r1
 800175a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800175c:	4b4d      	ldr	r3, [pc, #308]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	22f0      	movs	r2, #240	@ 0xf0
 8001762:	4393      	bics	r3, r2
 8001764:	0019      	movs	r1, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	4b4a      	ldr	r3, [pc, #296]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 800176c:	430a      	orrs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	d04c      	beq.n	8001814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b44      	ldr	r3, [pc, #272]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	2380      	movs	r3, #128	@ 0x80
 8001788:	029b      	lsls	r3, r3, #10
 800178a:	4013      	ands	r3, r2
 800178c:	d120      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e07a      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	4b3e      	ldr	r3, [pc, #248]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	@ 0x80
 80017a0:	049b      	lsls	r3, r3, #18
 80017a2:	4013      	ands	r3, r2
 80017a4:	d114      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e06e      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017b2:	4b38      	ldr	r3, [pc, #224]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 80017b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017b6:	2380      	movs	r3, #128	@ 0x80
 80017b8:	029b      	lsls	r3, r3, #10
 80017ba:	4013      	ands	r3, r2
 80017bc:	d108      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e062      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4b34      	ldr	r3, [pc, #208]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2202      	movs	r2, #2
 80017c8:	4013      	ands	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e05b      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d0:	4b30      	ldr	r3, [pc, #192]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	4393      	bics	r3, r2
 80017d8:	0019      	movs	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4b2d      	ldr	r3, [pc, #180]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 80017e0:	430a      	orrs	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e4:	f7ff f87e 	bl	80008e4 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ec:	e009      	b.n	8001802 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ee:	f7ff f879 	bl	80008e4 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	4a27      	ldr	r2, [pc, #156]	@ (8001898 <HAL_RCC_ClockConfig+0x1a4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e042      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	220c      	movs	r2, #12
 8001808:	401a      	ands	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d1ec      	bne.n	80017ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001814:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <HAL_RCC_ClockConfig+0x19c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2201      	movs	r2, #1
 800181a:	4013      	ands	r3, r2
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d211      	bcs.n	8001846 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <HAL_RCC_ClockConfig+0x19c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2201      	movs	r2, #1
 8001828:	4393      	bics	r3, r2
 800182a:	0019      	movs	r1, r3
 800182c:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <HAL_RCC_ClockConfig+0x19c>)
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001834:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <HAL_RCC_ClockConfig+0x19c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2201      	movs	r2, #1
 800183a:	4013      	ands	r3, r2
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e020      	b.n	8001888 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2204      	movs	r2, #4
 800184c:	4013      	ands	r3, r2
 800184e:	d009      	beq.n	8001864 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001850:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4a11      	ldr	r2, [pc, #68]	@ (800189c <HAL_RCC_ClockConfig+0x1a8>)
 8001856:	4013      	ands	r3, r2
 8001858:	0019      	movs	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 8001860:	430a      	orrs	r2, r1
 8001862:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001864:	f000 f820 	bl	80018a8 <HAL_RCC_GetSysClockFreq>
 8001868:	0001      	movs	r1, r0
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_RCC_ClockConfig+0x1a0>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	220f      	movs	r2, #15
 8001872:	4013      	ands	r3, r2
 8001874:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <HAL_RCC_ClockConfig+0x1ac>)
 8001876:	5cd3      	ldrb	r3, [r2, r3]
 8001878:	000a      	movs	r2, r1
 800187a:	40da      	lsrs	r2, r3
 800187c:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_RCC_ClockConfig+0x1b0>)
 800187e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001880:	2003      	movs	r0, #3
 8001882:	f7fe ffe9 	bl	8000858 <HAL_InitTick>
  
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	0018      	movs	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	b004      	add	sp, #16
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40022000 	.word	0x40022000
 8001894:	40021000 	.word	0x40021000
 8001898:	00001388 	.word	0x00001388
 800189c:	fffff8ff 	.word	0xfffff8ff
 80018a0:	08002314 	.word	0x08002314
 80018a4:	20000000 	.word	0x20000000

080018a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80018c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001978 <HAL_RCC_GetSysClockFreq+0xd0>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	220c      	movs	r2, #12
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d046      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0xb8>
 80018d2:	d848      	bhi.n	8001966 <HAL_RCC_GetSysClockFreq+0xbe>
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d002      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x36>
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d003      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x3c>
 80018dc:	e043      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018de:	4b27      	ldr	r3, [pc, #156]	@ (800197c <HAL_RCC_GetSysClockFreq+0xd4>)
 80018e0:	613b      	str	r3, [r7, #16]
      break;
 80018e2:	e043      	b.n	800196c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	0c9b      	lsrs	r3, r3, #18
 80018e8:	220f      	movs	r2, #15
 80018ea:	4013      	ands	r3, r2
 80018ec:	4a24      	ldr	r2, [pc, #144]	@ (8001980 <HAL_RCC_GetSysClockFreq+0xd8>)
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018f2:	4b21      	ldr	r3, [pc, #132]	@ (8001978 <HAL_RCC_GetSysClockFreq+0xd0>)
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	220f      	movs	r2, #15
 80018f8:	4013      	ands	r3, r2
 80018fa:	4a22      	ldr	r2, [pc, #136]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xdc>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	23c0      	movs	r3, #192	@ 0xc0
 8001904:	025b      	lsls	r3, r3, #9
 8001906:	401a      	ands	r2, r3
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	025b      	lsls	r3, r3, #9
 800190c:	429a      	cmp	r2, r3
 800190e:	d109      	bne.n	8001924 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	481a      	ldr	r0, [pc, #104]	@ (800197c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001914:	f7fe fbf8 	bl	8000108 <__udivsi3>
 8001918:	0003      	movs	r3, r0
 800191a:	001a      	movs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4353      	muls	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e01a      	b.n	800195a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	23c0      	movs	r3, #192	@ 0xc0
 8001928:	025b      	lsls	r3, r3, #9
 800192a:	401a      	ands	r2, r3
 800192c:	23c0      	movs	r3, #192	@ 0xc0
 800192e:	025b      	lsls	r3, r3, #9
 8001930:	429a      	cmp	r2, r3
 8001932:	d109      	bne.n	8001948 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	4814      	ldr	r0, [pc, #80]	@ (8001988 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001938:	f7fe fbe6 	bl	8000108 <__udivsi3>
 800193c:	0003      	movs	r3, r0
 800193e:	001a      	movs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4353      	muls	r3, r2
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e008      	b.n	800195a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	480c      	ldr	r0, [pc, #48]	@ (800197c <HAL_RCC_GetSysClockFreq+0xd4>)
 800194c:	f7fe fbdc 	bl	8000108 <__udivsi3>
 8001950:	0003      	movs	r3, r0
 8001952:	001a      	movs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4353      	muls	r3, r2
 8001958:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	613b      	str	r3, [r7, #16]
      break;
 800195e:	e005      	b.n	800196c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001962:	613b      	str	r3, [r7, #16]
      break;
 8001964:	e002      	b.n	800196c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001966:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001968:	613b      	str	r3, [r7, #16]
      break;
 800196a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800196c:	693b      	ldr	r3, [r7, #16]
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b006      	add	sp, #24
 8001974:	bd80      	pop	{r7, pc}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	40021000 	.word	0x40021000
 800197c:	007a1200 	.word	0x007a1200
 8001980:	08002324 	.word	0x08002324
 8001984:	08002334 	.word	0x08002334
 8001988:	02dc6c00 	.word	0x02dc6c00

0800198c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	@ 0x80
 80019a2:	025b      	lsls	r3, r3, #9
 80019a4:	4013      	ands	r3, r2
 80019a6:	d100      	bne.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019a8:	e08e      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2017      	movs	r0, #23
 80019ac:	183b      	adds	r3, r7, r0
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b2:	4b6e      	ldr	r3, [pc, #440]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	2380      	movs	r3, #128	@ 0x80
 80019b8:	055b      	lsls	r3, r3, #21
 80019ba:	4013      	ands	r3, r2
 80019bc:	d110      	bne.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b6b      	ldr	r3, [pc, #428]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c4:	2180      	movs	r1, #128	@ 0x80
 80019c6:	0549      	lsls	r1, r1, #21
 80019c8:	430a      	orrs	r2, r1
 80019ca:	61da      	str	r2, [r3, #28]
 80019cc:	4b67      	ldr	r3, [pc, #412]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	055b      	lsls	r3, r3, #21
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019da:	183b      	adds	r3, r7, r0
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e0:	4b63      	ldr	r3, [pc, #396]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2380      	movs	r3, #128	@ 0x80
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4013      	ands	r3, r2
 80019ea:	d11a      	bne.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ec:	4b60      	ldr	r3, [pc, #384]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b5f      	ldr	r3, [pc, #380]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019f2:	2180      	movs	r1, #128	@ 0x80
 80019f4:	0049      	lsls	r1, r1, #1
 80019f6:	430a      	orrs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fa:	f7fe ff73 	bl	80008e4 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	e008      	b.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a04:	f7fe ff6e 	bl	80008e4 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	@ 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e0a6      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a16:	4b56      	ldr	r3, [pc, #344]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	@ 0x80
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a22:	4b52      	ldr	r3, [pc, #328]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a24:	6a1a      	ldr	r2, [r3, #32]
 8001a26:	23c0      	movs	r3, #192	@ 0xc0
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d034      	beq.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	23c0      	movs	r3, #192	@ 0xc0
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d02c      	beq.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a44:	4b49      	ldr	r3, [pc, #292]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a4a      	ldr	r2, [pc, #296]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a4e:	4b47      	ldr	r3, [pc, #284]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a50:	6a1a      	ldr	r2, [r3, #32]
 8001a52:	4b46      	ldr	r3, [pc, #280]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a54:	2180      	movs	r1, #128	@ 0x80
 8001a56:	0249      	lsls	r1, r1, #9
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a5c:	4b43      	ldr	r3, [pc, #268]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a5e:	6a1a      	ldr	r2, [r3, #32]
 8001a60:	4b42      	ldr	r3, [pc, #264]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a62:	4945      	ldr	r1, [pc, #276]	@ (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a64:	400a      	ands	r2, r1
 8001a66:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a68:	4b40      	ldr	r3, [pc, #256]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2201      	movs	r2, #1
 8001a72:	4013      	ands	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7fe ff35 	bl	80008e4 <HAL_GetTick>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7e:	e009      	b.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7fe ff30 	bl	80008e4 <HAL_GetTick>
 8001a84:	0002      	movs	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e067      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	4b35      	ldr	r3, [pc, #212]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a9e:	4b33      	ldr	r3, [pc, #204]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a34      	ldr	r2, [pc, #208]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ab2:	2317      	movs	r3, #23
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001abe:	69da      	ldr	r2, [r3, #28]
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac2:	492f      	ldr	r1, [pc, #188]	@ (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2201      	movs	r2, #1
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ad2:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	4393      	bics	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2202      	movs	r2, #2
 8001aec:	4013      	ands	r3, r2
 8001aee:	d009      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001af0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	4a23      	ldr	r2, [pc, #140]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	0019      	movs	r1, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b00:	430a      	orrs	r2, r1
 8001b02:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d009      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b0e:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	2210      	movs	r2, #16
 8001b14:	4393      	bics	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2380      	movs	r3, #128	@ 0x80
 8001b28:	029b      	lsls	r3, r3, #10
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	2280      	movs	r2, #128	@ 0x80
 8001b34:	4393      	bics	r3, r2
 8001b36:	0019      	movs	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699a      	ldr	r2, [r3, #24]
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2380      	movs	r3, #128	@ 0x80
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b4e:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	2240      	movs	r2, #64	@ 0x40
 8001b54:	4393      	bics	r3, r2
 8001b56:	0019      	movs	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b006      	add	sp, #24
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40007000 	.word	0x40007000
 8001b74:	fffffcff 	.word	0xfffffcff
 8001b78:	fffeffff 	.word	0xfffeffff
 8001b7c:	00001388 	.word	0x00001388
 8001b80:	efffffff 	.word	0xefffffff
 8001b84:	fffcffff 	.word	0xfffcffff

08001b88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0a8      	b.n	8001cec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	2382      	movs	r3, #130	@ 0x82
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d009      	beq.n	8001bc2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	61da      	str	r2, [r3, #28]
 8001bb4:	e005      	b.n	8001bc2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	225d      	movs	r2, #93	@ 0x5d
 8001bcc:	5c9b      	ldrb	r3, [r3, r2]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	225c      	movs	r2, #92	@ 0x5c
 8001bd8:	2100      	movs	r1, #0
 8001bda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7fe fd90 	bl	8000704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	225d      	movs	r2, #93	@ 0x5d
 8001be8:	2102      	movs	r1, #2
 8001bea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2140      	movs	r1, #64	@ 0x40
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	23e0      	movs	r3, #224	@ 0xe0
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d902      	bls.n	8001c0e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e002      	b.n	8001c14 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c0e:	2380      	movs	r3, #128	@ 0x80
 8001c10:	015b      	lsls	r3, r3, #5
 8001c12:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	23f0      	movs	r3, #240	@ 0xf0
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d008      	beq.n	8001c32 <HAL_SPI_Init+0xaa>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	23e0      	movs	r3, #224	@ 0xe0
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d002      	beq.n	8001c32 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	2382      	movs	r3, #130	@ 0x82
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6899      	ldr	r1, [r3, #8]
 8001c40:	2384      	movs	r3, #132	@ 0x84
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	400b      	ands	r3, r1
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	400b      	ands	r3, r1
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	2101      	movs	r1, #1
 8001c58:	400b      	ands	r3, r1
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6999      	ldr	r1, [r3, #24]
 8001c60:	2380      	movs	r3, #128	@ 0x80
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	400b      	ands	r3, r1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2138      	movs	r1, #56	@ 0x38
 8001c6e:	400b      	ands	r3, r1
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	2180      	movs	r1, #128	@ 0x80
 8001c78:	400b      	ands	r3, r1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	0011      	movs	r1, r2
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c82:	2380      	movs	r3, #128	@ 0x80
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	2204      	movs	r2, #4
 8001c98:	401a      	ands	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	400b      	ands	r3, r1
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca8:	2108      	movs	r1, #8
 8001caa:	400b      	ands	r3, r1
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68d9      	ldr	r1, [r3, #12]
 8001cb2:	23f0      	movs	r3, #240	@ 0xf0
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	0011      	movs	r1, r2
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	2380      	movs	r3, #128	@ 0x80
 8001cc0:	015b      	lsls	r3, r3, #5
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	69da      	ldr	r2, [r3, #28]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4907      	ldr	r1, [pc, #28]	@ (8001cf4 <HAL_SPI_Init+0x16c>)
 8001cd8:	400a      	ands	r2, r1
 8001cda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	225d      	movs	r2, #93	@ 0x5d
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b004      	add	sp, #16
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	fffff7ff 	.word	0xfffff7ff

08001cf8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	1dbb      	adds	r3, r7, #6
 8001d06:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d08:	231f      	movs	r3, #31
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	225c      	movs	r2, #92	@ 0x5c
 8001d14:	5c9b      	ldrb	r3, [r3, r2]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_SPI_Transmit+0x26>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e147      	b.n	8001fae <HAL_SPI_Transmit+0x2b6>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	225c      	movs	r2, #92	@ 0x5c
 8001d22:	2101      	movs	r1, #1
 8001d24:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d26:	f7fe fddd 	bl	80008e4 <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001d2e:	2316      	movs	r3, #22
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	1dba      	adds	r2, r7, #6
 8001d34:	8812      	ldrh	r2, [r2, #0]
 8001d36:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	225d      	movs	r2, #93	@ 0x5d
 8001d3c:	5c9b      	ldrb	r3, [r3, r2]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d004      	beq.n	8001d4e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001d44:	231f      	movs	r3, #31
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2202      	movs	r2, #2
 8001d4a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d4c:	e128      	b.n	8001fa0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_SPI_Transmit+0x64>
 8001d54:	1dbb      	adds	r3, r7, #6
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d104      	bne.n	8001d66 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001d5c:	231f      	movs	r3, #31
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d64:	e11c      	b.n	8001fa0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	225d      	movs	r2, #93	@ 0x5d
 8001d6a:	2103      	movs	r1, #3
 8001d6c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1dba      	adds	r2, r7, #6
 8001d7e:	8812      	ldrh	r2, [r2, #0]
 8001d80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1dba      	adds	r2, r7, #6
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2244      	movs	r2, #68	@ 0x44
 8001d94:	2100      	movs	r1, #0
 8001d96:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2246      	movs	r2, #70	@ 0x46
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	2380      	movs	r3, #128	@ 0x80
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d110      	bne.n	8001dda <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2140      	movs	r1, #64	@ 0x40
 8001dc4:	438a      	bics	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2180      	movs	r1, #128	@ 0x80
 8001dd4:	01c9      	lsls	r1, r1, #7
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2240      	movs	r2, #64	@ 0x40
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b40      	cmp	r3, #64	@ 0x40
 8001de6:	d007      	beq.n	8001df8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2140      	movs	r1, #64	@ 0x40
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	23e0      	movs	r3, #224	@ 0xe0
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d952      	bls.n	8001eaa <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d004      	beq.n	8001e16 <HAL_SPI_Transmit+0x11e>
 8001e0c:	2316      	movs	r3, #22
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d143      	bne.n	8001e9e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e1a:	881a      	ldrh	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e26:	1c9a      	adds	r2, r3, #2
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e3a:	e030      	b.n	8001e9e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2202      	movs	r2, #2
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d112      	bne.n	8001e70 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4e:	881a      	ldrh	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e5a:	1c9a      	adds	r2, r3, #2
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001e6e:	e016      	b.n	8001e9e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e70:	f7fe fd38 	bl	80008e4 <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d802      	bhi.n	8001e86 <HAL_SPI_Transmit+0x18e>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	d102      	bne.n	8001e8c <HAL_SPI_Transmit+0x194>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d108      	bne.n	8001e9e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001e8c:	231f      	movs	r3, #31
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	2203      	movs	r2, #3
 8001e92:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	225d      	movs	r2, #93	@ 0x5d
 8001e98:	2101      	movs	r1, #1
 8001e9a:	5499      	strb	r1, [r3, r2]
          goto error;
 8001e9c:	e080      	b.n	8001fa0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1c9      	bne.n	8001e3c <HAL_SPI_Transmit+0x144>
 8001ea8:	e053      	b.n	8001f52 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_SPI_Transmit+0x1c4>
 8001eb2:	2316      	movs	r3, #22
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d145      	bne.n	8001f48 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	330c      	adds	r3, #12
 8001ec6:	7812      	ldrb	r2, [r2, #0]
 8001ec8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	3b01      	subs	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001ee2:	e031      	b.n	8001f48 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2202      	movs	r2, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d113      	bne.n	8001f1a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	330c      	adds	r3, #12
 8001efc:	7812      	ldrb	r2, [r2, #0]
 8001efe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f18:	e016      	b.n	8001f48 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f1a:	f7fe fce3 	bl	80008e4 <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d802      	bhi.n	8001f30 <HAL_SPI_Transmit+0x238>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	d102      	bne.n	8001f36 <HAL_SPI_Transmit+0x23e>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d108      	bne.n	8001f48 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001f36:	231f      	movs	r3, #31
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	225d      	movs	r2, #93	@ 0x5d
 8001f42:	2101      	movs	r1, #1
 8001f44:	5499      	strb	r1, [r3, r2]
          goto error;
 8001f46:	e02b      	b.n	8001fa0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1c8      	bne.n	8001ee4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	6839      	ldr	r1, [r7, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f000 f95d 	bl	8002218 <SPI_EndRxTxTransaction>
 8001f5e:	1e03      	subs	r3, r0, #0
 8001f60:	d002      	beq.n	8001f68 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2220      	movs	r2, #32
 8001f66:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10a      	bne.n	8001f86 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d004      	beq.n	8001f98 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001f8e:	231f      	movs	r3, #31
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e003      	b.n	8001fa0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	225d      	movs	r2, #93	@ 0x5d
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	225c      	movs	r2, #92	@ 0x5c
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001fa8:	231f      	movs	r3, #31
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	781b      	ldrb	r3, [r3, #0]
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b008      	add	sp, #32
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	1dfb      	adds	r3, r7, #7
 8001fc6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fc8:	f7fe fc8c 	bl	80008e4 <HAL_GetTick>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	18d3      	adds	r3, r2, r3
 8001fd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001fd8:	f7fe fc84 	bl	80008e4 <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80020cc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	015b      	lsls	r3, r3, #5
 8001fe6:	0d1b      	lsrs	r3, r3, #20
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	4353      	muls	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fee:	e058      	b.n	80020a2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	d055      	beq.n	80020a2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ff6:	f7fe fc75 	bl	80008e4 <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	429a      	cmp	r2, r3
 8002004:	d902      	bls.n	800200c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d142      	bne.n	8002092 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	21e0      	movs	r1, #224	@ 0xe0
 8002018:	438a      	bics	r2, r1
 800201a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	2382      	movs	r3, #130	@ 0x82
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	429a      	cmp	r2, r3
 8002026:	d113      	bne.n	8002050 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	2380      	movs	r3, #128	@ 0x80
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	429a      	cmp	r2, r3
 8002032:	d005      	beq.n	8002040 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	429a      	cmp	r2, r3
 800203e:	d107      	bne.n	8002050 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2140      	movs	r1, #64	@ 0x40
 800204c:	438a      	bics	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002054:	2380      	movs	r3, #128	@ 0x80
 8002056:	019b      	lsls	r3, r3, #6
 8002058:	429a      	cmp	r2, r3
 800205a:	d110      	bne.n	800207e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	491a      	ldr	r1, [pc, #104]	@ (80020d0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002068:	400a      	ands	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2180      	movs	r1, #128	@ 0x80
 8002078:	0189      	lsls	r1, r1, #6
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	225d      	movs	r2, #93	@ 0x5d
 8002082:	2101      	movs	r1, #1
 8002084:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	225c      	movs	r2, #92	@ 0x5c
 800208a:	2100      	movs	r1, #0
 800208c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e017      	b.n	80020c2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3b01      	subs	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	4013      	ands	r3, r2
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	425a      	negs	r2, r3
 80020b2:	4153      	adcs	r3, r2
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	001a      	movs	r2, r3
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d197      	bne.n	8001ff0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	0018      	movs	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b008      	add	sp, #32
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			@ (mov r8, r8)
 80020cc:	20000000 	.word	0x20000000
 80020d0:	ffffdfff 	.word	0xffffdfff

080020d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	@ 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80020e2:	2317      	movs	r3, #23
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80020ea:	f7fe fbfb 	bl	80008e4 <HAL_GetTick>
 80020ee:	0002      	movs	r2, r0
 80020f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	18d3      	adds	r3, r2, r3
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80020fa:	f7fe fbf3 	bl	80008e4 <HAL_GetTick>
 80020fe:	0003      	movs	r3, r0
 8002100:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	330c      	adds	r3, #12
 8002108:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800210a:	4b41      	ldr	r3, [pc, #260]	@ (8002210 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	0013      	movs	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	189b      	adds	r3, r3, r2
 8002114:	00da      	lsls	r2, r3, #3
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	0d1b      	lsrs	r3, r3, #20
 800211a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800211c:	4353      	muls	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002120:	e068      	b.n	80021f4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	23c0      	movs	r3, #192	@ 0xc0
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	429a      	cmp	r2, r3
 800212a:	d10a      	bne.n	8002142 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d107      	bne.n	8002142 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	2117      	movs	r1, #23
 800213a:	187b      	adds	r3, r7, r1
 800213c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800213e:	187b      	adds	r3, r7, r1
 8002140:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	d055      	beq.n	80021f4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002148:	f7fe fbcc 	bl	80008e4 <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002154:	429a      	cmp	r2, r3
 8002156:	d902      	bls.n	800215e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	2b00      	cmp	r3, #0
 800215c:	d142      	bne.n	80021e4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	21e0      	movs	r1, #224	@ 0xe0
 800216a:	438a      	bics	r2, r1
 800216c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	2382      	movs	r3, #130	@ 0x82
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	429a      	cmp	r2, r3
 8002178:	d113      	bne.n	80021a2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	2380      	movs	r3, #128	@ 0x80
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	429a      	cmp	r2, r3
 8002184:	d005      	beq.n	8002192 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	2380      	movs	r3, #128	@ 0x80
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	429a      	cmp	r2, r3
 8002190:	d107      	bne.n	80021a2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2140      	movs	r1, #64	@ 0x40
 800219e:	438a      	bics	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021a6:	2380      	movs	r3, #128	@ 0x80
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d110      	bne.n	80021d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4916      	ldr	r1, [pc, #88]	@ (8002214 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2180      	movs	r1, #128	@ 0x80
 80021ca:	0189      	lsls	r1, r1, #6
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	225d      	movs	r2, #93	@ 0x5d
 80021d4:	2101      	movs	r1, #1
 80021d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	225c      	movs	r2, #92	@ 0x5c
 80021dc:	2100      	movs	r1, #0
 80021de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e010      	b.n	8002206 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	4013      	ands	r3, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	d18e      	bne.n	8002122 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b00a      	add	sp, #40	@ 0x28
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	20000000 	.word	0x20000000
 8002214:	ffffdfff 	.word	0xffffdfff

08002218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af02      	add	r7, sp, #8
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	23c0      	movs	r3, #192	@ 0xc0
 8002228:	0159      	lsls	r1, r3, #5
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	0013      	movs	r3, r2
 8002232:	2200      	movs	r2, #0
 8002234:	f7ff ff4e 	bl	80020d4 <SPI_WaitFifoStateUntilTimeout>
 8002238:	1e03      	subs	r3, r0, #0
 800223a:	d007      	beq.n	800224c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002240:	2220      	movs	r2, #32
 8002242:	431a      	orrs	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e027      	b.n	800229c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	0013      	movs	r3, r2
 8002256:	2200      	movs	r2, #0
 8002258:	2180      	movs	r1, #128	@ 0x80
 800225a:	f7ff fead 	bl	8001fb8 <SPI_WaitFlagStateUntilTimeout>
 800225e:	1e03      	subs	r3, r0, #0
 8002260:	d007      	beq.n	8002272 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002266:	2220      	movs	r2, #32
 8002268:	431a      	orrs	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e014      	b.n	800229c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	23c0      	movs	r3, #192	@ 0xc0
 8002276:	00d9      	lsls	r1, r3, #3
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	0013      	movs	r3, r2
 8002280:	2200      	movs	r2, #0
 8002282:	f7ff ff27 	bl	80020d4 <SPI_WaitFifoStateUntilTimeout>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d007      	beq.n	800229a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800228e:	2220      	movs	r2, #32
 8002290:	431a      	orrs	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e000      	b.n	800229c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b004      	add	sp, #16
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <memset>:
 80022a4:	0003      	movs	r3, r0
 80022a6:	1882      	adds	r2, r0, r2
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d100      	bne.n	80022ae <memset+0xa>
 80022ac:	4770      	bx	lr
 80022ae:	7019      	strb	r1, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	e7f9      	b.n	80022a8 <memset+0x4>

080022b4 <__libc_init_array>:
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	2600      	movs	r6, #0
 80022b8:	4c0c      	ldr	r4, [pc, #48]	@ (80022ec <__libc_init_array+0x38>)
 80022ba:	4d0d      	ldr	r5, [pc, #52]	@ (80022f0 <__libc_init_array+0x3c>)
 80022bc:	1b64      	subs	r4, r4, r5
 80022be:	10a4      	asrs	r4, r4, #2
 80022c0:	42a6      	cmp	r6, r4
 80022c2:	d109      	bne.n	80022d8 <__libc_init_array+0x24>
 80022c4:	2600      	movs	r6, #0
 80022c6:	f000 f819 	bl	80022fc <_init>
 80022ca:	4c0a      	ldr	r4, [pc, #40]	@ (80022f4 <__libc_init_array+0x40>)
 80022cc:	4d0a      	ldr	r5, [pc, #40]	@ (80022f8 <__libc_init_array+0x44>)
 80022ce:	1b64      	subs	r4, r4, r5
 80022d0:	10a4      	asrs	r4, r4, #2
 80022d2:	42a6      	cmp	r6, r4
 80022d4:	d105      	bne.n	80022e2 <__libc_init_array+0x2e>
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	00b3      	lsls	r3, r6, #2
 80022da:	58eb      	ldr	r3, [r5, r3]
 80022dc:	4798      	blx	r3
 80022de:	3601      	adds	r6, #1
 80022e0:	e7ee      	b.n	80022c0 <__libc_init_array+0xc>
 80022e2:	00b3      	lsls	r3, r6, #2
 80022e4:	58eb      	ldr	r3, [r5, r3]
 80022e6:	4798      	blx	r3
 80022e8:	3601      	adds	r6, #1
 80022ea:	e7f2      	b.n	80022d2 <__libc_init_array+0x1e>
 80022ec:	08002344 	.word	0x08002344
 80022f0:	08002344 	.word	0x08002344
 80022f4:	08002348 	.word	0x08002348
 80022f8:	08002344 	.word	0x08002344

080022fc <_init>:
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002302:	bc08      	pop	{r3}
 8002304:	469e      	mov	lr, r3
 8002306:	4770      	bx	lr

08002308 <_fini>:
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230e:	bc08      	pop	{r3}
 8002310:	469e      	mov	lr, r3
 8002312:	4770      	bx	lr
