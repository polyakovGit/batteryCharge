
batteryCharge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b8c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004c4c  08004c4c  00005c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d38  08004d38  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d38  08004d38  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d38  08004d38  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d38  08004d38  00005d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d3c  08004d3c  00005d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004d40  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08004d4c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08004d4c  0000614c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d730  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203e  00000000  00000000  00013764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  000157a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba9  00000000  00000000  00016678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001928e  00000000  00000000  00017221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dd9  00000000  00000000  000304af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093bbf  00000000  00000000  00042288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5e47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  000d5e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d95f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c34 	.word	0x08004c34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004c34 	.word	0x08004c34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	@ 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fb90 	bl	800094c <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 faef 	bl	8000814 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	@ 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 f945 	bl	80004cc <__aeabi_fsub>
 8000242:	f000 fae7 	bl	8000814 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fmul>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	464f      	mov	r7, r9
 8000254:	4646      	mov	r6, r8
 8000256:	46d6      	mov	lr, sl
 8000258:	0243      	lsls	r3, r0, #9
 800025a:	0a5b      	lsrs	r3, r3, #9
 800025c:	0045      	lsls	r5, r0, #1
 800025e:	b5c0      	push	{r6, r7, lr}
 8000260:	4699      	mov	r9, r3
 8000262:	1c0f      	adds	r7, r1, #0
 8000264:	0e2d      	lsrs	r5, r5, #24
 8000266:	0fc6      	lsrs	r6, r0, #31
 8000268:	2d00      	cmp	r5, #0
 800026a:	d100      	bne.n	800026e <__aeabi_fmul+0x1e>
 800026c:	e088      	b.n	8000380 <__aeabi_fmul+0x130>
 800026e:	2dff      	cmp	r5, #255	@ 0xff
 8000270:	d100      	bne.n	8000274 <__aeabi_fmul+0x24>
 8000272:	e08d      	b.n	8000390 <__aeabi_fmul+0x140>
 8000274:	2280      	movs	r2, #128	@ 0x80
 8000276:	00db      	lsls	r3, r3, #3
 8000278:	04d2      	lsls	r2, r2, #19
 800027a:	431a      	orrs	r2, r3
 800027c:	2300      	movs	r3, #0
 800027e:	4691      	mov	r9, r2
 8000280:	4698      	mov	r8, r3
 8000282:	469a      	mov	sl, r3
 8000284:	3d7f      	subs	r5, #127	@ 0x7f
 8000286:	027c      	lsls	r4, r7, #9
 8000288:	007b      	lsls	r3, r7, #1
 800028a:	0a64      	lsrs	r4, r4, #9
 800028c:	0e1b      	lsrs	r3, r3, #24
 800028e:	0fff      	lsrs	r7, r7, #31
 8000290:	2b00      	cmp	r3, #0
 8000292:	d068      	beq.n	8000366 <__aeabi_fmul+0x116>
 8000294:	2bff      	cmp	r3, #255	@ 0xff
 8000296:	d021      	beq.n	80002dc <__aeabi_fmul+0x8c>
 8000298:	2280      	movs	r2, #128	@ 0x80
 800029a:	00e4      	lsls	r4, r4, #3
 800029c:	04d2      	lsls	r2, r2, #19
 800029e:	4314      	orrs	r4, r2
 80002a0:	4642      	mov	r2, r8
 80002a2:	3b7f      	subs	r3, #127	@ 0x7f
 80002a4:	195b      	adds	r3, r3, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	1c5d      	adds	r5, r3, #1
 80002aa:	2a0a      	cmp	r2, #10
 80002ac:	dc2e      	bgt.n	800030c <__aeabi_fmul+0xbc>
 80002ae:	407e      	eors	r6, r7
 80002b0:	4642      	mov	r2, r8
 80002b2:	2a02      	cmp	r2, #2
 80002b4:	dc23      	bgt.n	80002fe <__aeabi_fmul+0xae>
 80002b6:	3a01      	subs	r2, #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	d900      	bls.n	80002be <__aeabi_fmul+0x6e>
 80002bc:	e0bd      	b.n	800043a <__aeabi_fmul+0x1ea>
 80002be:	2902      	cmp	r1, #2
 80002c0:	d06e      	beq.n	80003a0 <__aeabi_fmul+0x150>
 80002c2:	2901      	cmp	r1, #1
 80002c4:	d12c      	bne.n	8000320 <__aeabi_fmul+0xd0>
 80002c6:	2000      	movs	r0, #0
 80002c8:	2200      	movs	r2, #0
 80002ca:	05c0      	lsls	r0, r0, #23
 80002cc:	07f6      	lsls	r6, r6, #31
 80002ce:	4310      	orrs	r0, r2
 80002d0:	4330      	orrs	r0, r6
 80002d2:	bce0      	pop	{r5, r6, r7}
 80002d4:	46ba      	mov	sl, r7
 80002d6:	46b1      	mov	r9, r6
 80002d8:	46a8      	mov	r8, r5
 80002da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002dc:	002b      	movs	r3, r5
 80002de:	33ff      	adds	r3, #255	@ 0xff
 80002e0:	2c00      	cmp	r4, #0
 80002e2:	d065      	beq.n	80003b0 <__aeabi_fmul+0x160>
 80002e4:	2203      	movs	r2, #3
 80002e6:	4641      	mov	r1, r8
 80002e8:	4311      	orrs	r1, r2
 80002ea:	0032      	movs	r2, r6
 80002ec:	3501      	adds	r5, #1
 80002ee:	4688      	mov	r8, r1
 80002f0:	407a      	eors	r2, r7
 80002f2:	35ff      	adds	r5, #255	@ 0xff
 80002f4:	290a      	cmp	r1, #10
 80002f6:	dd00      	ble.n	80002fa <__aeabi_fmul+0xaa>
 80002f8:	e0d8      	b.n	80004ac <__aeabi_fmul+0x25c>
 80002fa:	0016      	movs	r6, r2
 80002fc:	2103      	movs	r1, #3
 80002fe:	4640      	mov	r0, r8
 8000300:	2201      	movs	r2, #1
 8000302:	4082      	lsls	r2, r0
 8000304:	20a6      	movs	r0, #166	@ 0xa6
 8000306:	00c0      	lsls	r0, r0, #3
 8000308:	4202      	tst	r2, r0
 800030a:	d020      	beq.n	800034e <__aeabi_fmul+0xfe>
 800030c:	4653      	mov	r3, sl
 800030e:	2b02      	cmp	r3, #2
 8000310:	d046      	beq.n	80003a0 <__aeabi_fmul+0x150>
 8000312:	2b03      	cmp	r3, #3
 8000314:	d100      	bne.n	8000318 <__aeabi_fmul+0xc8>
 8000316:	e0bb      	b.n	8000490 <__aeabi_fmul+0x240>
 8000318:	4651      	mov	r1, sl
 800031a:	464c      	mov	r4, r9
 800031c:	2901      	cmp	r1, #1
 800031e:	d0d2      	beq.n	80002c6 <__aeabi_fmul+0x76>
 8000320:	002b      	movs	r3, r5
 8000322:	337f      	adds	r3, #127	@ 0x7f
 8000324:	2b00      	cmp	r3, #0
 8000326:	dd70      	ble.n	800040a <__aeabi_fmul+0x1ba>
 8000328:	0762      	lsls	r2, r4, #29
 800032a:	d004      	beq.n	8000336 <__aeabi_fmul+0xe6>
 800032c:	220f      	movs	r2, #15
 800032e:	4022      	ands	r2, r4
 8000330:	2a04      	cmp	r2, #4
 8000332:	d000      	beq.n	8000336 <__aeabi_fmul+0xe6>
 8000334:	3404      	adds	r4, #4
 8000336:	0122      	lsls	r2, r4, #4
 8000338:	d503      	bpl.n	8000342 <__aeabi_fmul+0xf2>
 800033a:	4b63      	ldr	r3, [pc, #396]	@ (80004c8 <__aeabi_fmul+0x278>)
 800033c:	401c      	ands	r4, r3
 800033e:	002b      	movs	r3, r5
 8000340:	3380      	adds	r3, #128	@ 0x80
 8000342:	2bfe      	cmp	r3, #254	@ 0xfe
 8000344:	dc2c      	bgt.n	80003a0 <__aeabi_fmul+0x150>
 8000346:	01a2      	lsls	r2, r4, #6
 8000348:	0a52      	lsrs	r2, r2, #9
 800034a:	b2d8      	uxtb	r0, r3
 800034c:	e7bd      	b.n	80002ca <__aeabi_fmul+0x7a>
 800034e:	2090      	movs	r0, #144	@ 0x90
 8000350:	0080      	lsls	r0, r0, #2
 8000352:	4202      	tst	r2, r0
 8000354:	d127      	bne.n	80003a6 <__aeabi_fmul+0x156>
 8000356:	38b9      	subs	r0, #185	@ 0xb9
 8000358:	38ff      	subs	r0, #255	@ 0xff
 800035a:	4210      	tst	r0, r2
 800035c:	d06d      	beq.n	800043a <__aeabi_fmul+0x1ea>
 800035e:	003e      	movs	r6, r7
 8000360:	46a1      	mov	r9, r4
 8000362:	468a      	mov	sl, r1
 8000364:	e7d2      	b.n	800030c <__aeabi_fmul+0xbc>
 8000366:	2c00      	cmp	r4, #0
 8000368:	d141      	bne.n	80003ee <__aeabi_fmul+0x19e>
 800036a:	2301      	movs	r3, #1
 800036c:	4642      	mov	r2, r8
 800036e:	431a      	orrs	r2, r3
 8000370:	4690      	mov	r8, r2
 8000372:	002b      	movs	r3, r5
 8000374:	4642      	mov	r2, r8
 8000376:	2101      	movs	r1, #1
 8000378:	1c5d      	adds	r5, r3, #1
 800037a:	2a0a      	cmp	r2, #10
 800037c:	dd97      	ble.n	80002ae <__aeabi_fmul+0x5e>
 800037e:	e7c5      	b.n	800030c <__aeabi_fmul+0xbc>
 8000380:	2b00      	cmp	r3, #0
 8000382:	d126      	bne.n	80003d2 <__aeabi_fmul+0x182>
 8000384:	2304      	movs	r3, #4
 8000386:	4698      	mov	r8, r3
 8000388:	3b03      	subs	r3, #3
 800038a:	2500      	movs	r5, #0
 800038c:	469a      	mov	sl, r3
 800038e:	e77a      	b.n	8000286 <__aeabi_fmul+0x36>
 8000390:	2b00      	cmp	r3, #0
 8000392:	d118      	bne.n	80003c6 <__aeabi_fmul+0x176>
 8000394:	2308      	movs	r3, #8
 8000396:	4698      	mov	r8, r3
 8000398:	3b06      	subs	r3, #6
 800039a:	25ff      	movs	r5, #255	@ 0xff
 800039c:	469a      	mov	sl, r3
 800039e:	e772      	b.n	8000286 <__aeabi_fmul+0x36>
 80003a0:	20ff      	movs	r0, #255	@ 0xff
 80003a2:	2200      	movs	r2, #0
 80003a4:	e791      	b.n	80002ca <__aeabi_fmul+0x7a>
 80003a6:	2280      	movs	r2, #128	@ 0x80
 80003a8:	2600      	movs	r6, #0
 80003aa:	20ff      	movs	r0, #255	@ 0xff
 80003ac:	03d2      	lsls	r2, r2, #15
 80003ae:	e78c      	b.n	80002ca <__aeabi_fmul+0x7a>
 80003b0:	4641      	mov	r1, r8
 80003b2:	2202      	movs	r2, #2
 80003b4:	3501      	adds	r5, #1
 80003b6:	4311      	orrs	r1, r2
 80003b8:	4688      	mov	r8, r1
 80003ba:	35ff      	adds	r5, #255	@ 0xff
 80003bc:	290a      	cmp	r1, #10
 80003be:	dca5      	bgt.n	800030c <__aeabi_fmul+0xbc>
 80003c0:	2102      	movs	r1, #2
 80003c2:	407e      	eors	r6, r7
 80003c4:	e774      	b.n	80002b0 <__aeabi_fmul+0x60>
 80003c6:	230c      	movs	r3, #12
 80003c8:	4698      	mov	r8, r3
 80003ca:	3b09      	subs	r3, #9
 80003cc:	25ff      	movs	r5, #255	@ 0xff
 80003ce:	469a      	mov	sl, r3
 80003d0:	e759      	b.n	8000286 <__aeabi_fmul+0x36>
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 fac4 	bl	8000960 <__clzsi2>
 80003d8:	464a      	mov	r2, r9
 80003da:	1f43      	subs	r3, r0, #5
 80003dc:	2576      	movs	r5, #118	@ 0x76
 80003de:	409a      	lsls	r2, r3
 80003e0:	2300      	movs	r3, #0
 80003e2:	426d      	negs	r5, r5
 80003e4:	4691      	mov	r9, r2
 80003e6:	4698      	mov	r8, r3
 80003e8:	469a      	mov	sl, r3
 80003ea:	1a2d      	subs	r5, r5, r0
 80003ec:	e74b      	b.n	8000286 <__aeabi_fmul+0x36>
 80003ee:	0020      	movs	r0, r4
 80003f0:	f000 fab6 	bl	8000960 <__clzsi2>
 80003f4:	4642      	mov	r2, r8
 80003f6:	1f43      	subs	r3, r0, #5
 80003f8:	409c      	lsls	r4, r3
 80003fa:	1a2b      	subs	r3, r5, r0
 80003fc:	3b76      	subs	r3, #118	@ 0x76
 80003fe:	2100      	movs	r1, #0
 8000400:	1c5d      	adds	r5, r3, #1
 8000402:	2a0a      	cmp	r2, #10
 8000404:	dc00      	bgt.n	8000408 <__aeabi_fmul+0x1b8>
 8000406:	e752      	b.n	80002ae <__aeabi_fmul+0x5e>
 8000408:	e780      	b.n	800030c <__aeabi_fmul+0xbc>
 800040a:	2201      	movs	r2, #1
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	2b1b      	cmp	r3, #27
 8000410:	dd00      	ble.n	8000414 <__aeabi_fmul+0x1c4>
 8000412:	e758      	b.n	80002c6 <__aeabi_fmul+0x76>
 8000414:	359e      	adds	r5, #158	@ 0x9e
 8000416:	0022      	movs	r2, r4
 8000418:	40ac      	lsls	r4, r5
 800041a:	40da      	lsrs	r2, r3
 800041c:	1e63      	subs	r3, r4, #1
 800041e:	419c      	sbcs	r4, r3
 8000420:	4322      	orrs	r2, r4
 8000422:	0753      	lsls	r3, r2, #29
 8000424:	d004      	beq.n	8000430 <__aeabi_fmul+0x1e0>
 8000426:	230f      	movs	r3, #15
 8000428:	4013      	ands	r3, r2
 800042a:	2b04      	cmp	r3, #4
 800042c:	d000      	beq.n	8000430 <__aeabi_fmul+0x1e0>
 800042e:	3204      	adds	r2, #4
 8000430:	0153      	lsls	r3, r2, #5
 8000432:	d537      	bpl.n	80004a4 <__aeabi_fmul+0x254>
 8000434:	2001      	movs	r0, #1
 8000436:	2200      	movs	r2, #0
 8000438:	e747      	b.n	80002ca <__aeabi_fmul+0x7a>
 800043a:	0c21      	lsrs	r1, r4, #16
 800043c:	464a      	mov	r2, r9
 800043e:	0424      	lsls	r4, r4, #16
 8000440:	0c24      	lsrs	r4, r4, #16
 8000442:	0027      	movs	r7, r4
 8000444:	0c10      	lsrs	r0, r2, #16
 8000446:	0412      	lsls	r2, r2, #16
 8000448:	0c12      	lsrs	r2, r2, #16
 800044a:	4344      	muls	r4, r0
 800044c:	4357      	muls	r7, r2
 800044e:	4348      	muls	r0, r1
 8000450:	4351      	muls	r1, r2
 8000452:	0c3a      	lsrs	r2, r7, #16
 8000454:	1909      	adds	r1, r1, r4
 8000456:	1852      	adds	r2, r2, r1
 8000458:	4294      	cmp	r4, r2
 800045a:	d903      	bls.n	8000464 <__aeabi_fmul+0x214>
 800045c:	2180      	movs	r1, #128	@ 0x80
 800045e:	0249      	lsls	r1, r1, #9
 8000460:	468c      	mov	ip, r1
 8000462:	4460      	add	r0, ip
 8000464:	043f      	lsls	r7, r7, #16
 8000466:	0411      	lsls	r1, r2, #16
 8000468:	0c3f      	lsrs	r7, r7, #16
 800046a:	19c9      	adds	r1, r1, r7
 800046c:	018c      	lsls	r4, r1, #6
 800046e:	1e67      	subs	r7, r4, #1
 8000470:	41bc      	sbcs	r4, r7
 8000472:	0c12      	lsrs	r2, r2, #16
 8000474:	0e89      	lsrs	r1, r1, #26
 8000476:	1812      	adds	r2, r2, r0
 8000478:	430c      	orrs	r4, r1
 800047a:	0192      	lsls	r2, r2, #6
 800047c:	4314      	orrs	r4, r2
 800047e:	0112      	lsls	r2, r2, #4
 8000480:	d50e      	bpl.n	80004a0 <__aeabi_fmul+0x250>
 8000482:	2301      	movs	r3, #1
 8000484:	0862      	lsrs	r2, r4, #1
 8000486:	401c      	ands	r4, r3
 8000488:	4314      	orrs	r4, r2
 800048a:	e749      	b.n	8000320 <__aeabi_fmul+0xd0>
 800048c:	003e      	movs	r6, r7
 800048e:	46a1      	mov	r9, r4
 8000490:	2280      	movs	r2, #128	@ 0x80
 8000492:	464b      	mov	r3, r9
 8000494:	03d2      	lsls	r2, r2, #15
 8000496:	431a      	orrs	r2, r3
 8000498:	0252      	lsls	r2, r2, #9
 800049a:	20ff      	movs	r0, #255	@ 0xff
 800049c:	0a52      	lsrs	r2, r2, #9
 800049e:	e714      	b.n	80002ca <__aeabi_fmul+0x7a>
 80004a0:	001d      	movs	r5, r3
 80004a2:	e73d      	b.n	8000320 <__aeabi_fmul+0xd0>
 80004a4:	0192      	lsls	r2, r2, #6
 80004a6:	2000      	movs	r0, #0
 80004a8:	0a52      	lsrs	r2, r2, #9
 80004aa:	e70e      	b.n	80002ca <__aeabi_fmul+0x7a>
 80004ac:	290f      	cmp	r1, #15
 80004ae:	d1ed      	bne.n	800048c <__aeabi_fmul+0x23c>
 80004b0:	2280      	movs	r2, #128	@ 0x80
 80004b2:	464b      	mov	r3, r9
 80004b4:	03d2      	lsls	r2, r2, #15
 80004b6:	4213      	tst	r3, r2
 80004b8:	d0ea      	beq.n	8000490 <__aeabi_fmul+0x240>
 80004ba:	4214      	tst	r4, r2
 80004bc:	d1e8      	bne.n	8000490 <__aeabi_fmul+0x240>
 80004be:	003e      	movs	r6, r7
 80004c0:	20ff      	movs	r0, #255	@ 0xff
 80004c2:	4322      	orrs	r2, r4
 80004c4:	e701      	b.n	80002ca <__aeabi_fmul+0x7a>
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	f7ffffff 	.word	0xf7ffffff

080004cc <__aeabi_fsub>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	4647      	mov	r7, r8
 80004d0:	46ce      	mov	lr, r9
 80004d2:	024e      	lsls	r6, r1, #9
 80004d4:	0243      	lsls	r3, r0, #9
 80004d6:	0045      	lsls	r5, r0, #1
 80004d8:	0a72      	lsrs	r2, r6, #9
 80004da:	0fc4      	lsrs	r4, r0, #31
 80004dc:	0048      	lsls	r0, r1, #1
 80004de:	b580      	push	{r7, lr}
 80004e0:	4694      	mov	ip, r2
 80004e2:	0a5f      	lsrs	r7, r3, #9
 80004e4:	0e2d      	lsrs	r5, r5, #24
 80004e6:	099b      	lsrs	r3, r3, #6
 80004e8:	0e00      	lsrs	r0, r0, #24
 80004ea:	0fc9      	lsrs	r1, r1, #31
 80004ec:	09b6      	lsrs	r6, r6, #6
 80004ee:	28ff      	cmp	r0, #255	@ 0xff
 80004f0:	d024      	beq.n	800053c <__aeabi_fsub+0x70>
 80004f2:	2201      	movs	r2, #1
 80004f4:	4051      	eors	r1, r2
 80004f6:	1a2a      	subs	r2, r5, r0
 80004f8:	428c      	cmp	r4, r1
 80004fa:	d00f      	beq.n	800051c <__aeabi_fsub+0x50>
 80004fc:	2a00      	cmp	r2, #0
 80004fe:	dc00      	bgt.n	8000502 <__aeabi_fsub+0x36>
 8000500:	e16a      	b.n	80007d8 <__aeabi_fsub+0x30c>
 8000502:	2800      	cmp	r0, #0
 8000504:	d135      	bne.n	8000572 <__aeabi_fsub+0xa6>
 8000506:	2e00      	cmp	r6, #0
 8000508:	d100      	bne.n	800050c <__aeabi_fsub+0x40>
 800050a:	e0a2      	b.n	8000652 <__aeabi_fsub+0x186>
 800050c:	1e51      	subs	r1, r2, #1
 800050e:	2a01      	cmp	r2, #1
 8000510:	d100      	bne.n	8000514 <__aeabi_fsub+0x48>
 8000512:	e124      	b.n	800075e <__aeabi_fsub+0x292>
 8000514:	2aff      	cmp	r2, #255	@ 0xff
 8000516:	d021      	beq.n	800055c <__aeabi_fsub+0x90>
 8000518:	000a      	movs	r2, r1
 800051a:	e02f      	b.n	800057c <__aeabi_fsub+0xb0>
 800051c:	2a00      	cmp	r2, #0
 800051e:	dc00      	bgt.n	8000522 <__aeabi_fsub+0x56>
 8000520:	e167      	b.n	80007f2 <__aeabi_fsub+0x326>
 8000522:	2800      	cmp	r0, #0
 8000524:	d05e      	beq.n	80005e4 <__aeabi_fsub+0x118>
 8000526:	2dff      	cmp	r5, #255	@ 0xff
 8000528:	d018      	beq.n	800055c <__aeabi_fsub+0x90>
 800052a:	2180      	movs	r1, #128	@ 0x80
 800052c:	04c9      	lsls	r1, r1, #19
 800052e:	430e      	orrs	r6, r1
 8000530:	2a1b      	cmp	r2, #27
 8000532:	dc00      	bgt.n	8000536 <__aeabi_fsub+0x6a>
 8000534:	e076      	b.n	8000624 <__aeabi_fsub+0x158>
 8000536:	002a      	movs	r2, r5
 8000538:	3301      	adds	r3, #1
 800053a:	e032      	b.n	80005a2 <__aeabi_fsub+0xd6>
 800053c:	002a      	movs	r2, r5
 800053e:	3aff      	subs	r2, #255	@ 0xff
 8000540:	4691      	mov	r9, r2
 8000542:	2e00      	cmp	r6, #0
 8000544:	d042      	beq.n	80005cc <__aeabi_fsub+0x100>
 8000546:	428c      	cmp	r4, r1
 8000548:	d055      	beq.n	80005f6 <__aeabi_fsub+0x12a>
 800054a:	464a      	mov	r2, r9
 800054c:	2a00      	cmp	r2, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_fsub+0x86>
 8000550:	e09c      	b.n	800068c <__aeabi_fsub+0x1c0>
 8000552:	2d00      	cmp	r5, #0
 8000554:	d100      	bne.n	8000558 <__aeabi_fsub+0x8c>
 8000556:	e077      	b.n	8000648 <__aeabi_fsub+0x17c>
 8000558:	000c      	movs	r4, r1
 800055a:	0033      	movs	r3, r6
 800055c:	08db      	lsrs	r3, r3, #3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d100      	bne.n	8000564 <__aeabi_fsub+0x98>
 8000562:	e06e      	b.n	8000642 <__aeabi_fsub+0x176>
 8000564:	2280      	movs	r2, #128	@ 0x80
 8000566:	03d2      	lsls	r2, r2, #15
 8000568:	4313      	orrs	r3, r2
 800056a:	025b      	lsls	r3, r3, #9
 800056c:	20ff      	movs	r0, #255	@ 0xff
 800056e:	0a5b      	lsrs	r3, r3, #9
 8000570:	e024      	b.n	80005bc <__aeabi_fsub+0xf0>
 8000572:	2dff      	cmp	r5, #255	@ 0xff
 8000574:	d0f2      	beq.n	800055c <__aeabi_fsub+0x90>
 8000576:	2180      	movs	r1, #128	@ 0x80
 8000578:	04c9      	lsls	r1, r1, #19
 800057a:	430e      	orrs	r6, r1
 800057c:	2101      	movs	r1, #1
 800057e:	2a1b      	cmp	r2, #27
 8000580:	dc08      	bgt.n	8000594 <__aeabi_fsub+0xc8>
 8000582:	0031      	movs	r1, r6
 8000584:	2020      	movs	r0, #32
 8000586:	40d1      	lsrs	r1, r2
 8000588:	1a82      	subs	r2, r0, r2
 800058a:	4096      	lsls	r6, r2
 800058c:	0032      	movs	r2, r6
 800058e:	1e50      	subs	r0, r2, #1
 8000590:	4182      	sbcs	r2, r0
 8000592:	4311      	orrs	r1, r2
 8000594:	1a5b      	subs	r3, r3, r1
 8000596:	015a      	lsls	r2, r3, #5
 8000598:	d460      	bmi.n	800065c <__aeabi_fsub+0x190>
 800059a:	2107      	movs	r1, #7
 800059c:	002a      	movs	r2, r5
 800059e:	4019      	ands	r1, r3
 80005a0:	d057      	beq.n	8000652 <__aeabi_fsub+0x186>
 80005a2:	210f      	movs	r1, #15
 80005a4:	4019      	ands	r1, r3
 80005a6:	2904      	cmp	r1, #4
 80005a8:	d000      	beq.n	80005ac <__aeabi_fsub+0xe0>
 80005aa:	3304      	adds	r3, #4
 80005ac:	0159      	lsls	r1, r3, #5
 80005ae:	d550      	bpl.n	8000652 <__aeabi_fsub+0x186>
 80005b0:	1c50      	adds	r0, r2, #1
 80005b2:	2afe      	cmp	r2, #254	@ 0xfe
 80005b4:	d045      	beq.n	8000642 <__aeabi_fsub+0x176>
 80005b6:	019b      	lsls	r3, r3, #6
 80005b8:	b2c0      	uxtb	r0, r0
 80005ba:	0a5b      	lsrs	r3, r3, #9
 80005bc:	05c0      	lsls	r0, r0, #23
 80005be:	4318      	orrs	r0, r3
 80005c0:	07e4      	lsls	r4, r4, #31
 80005c2:	4320      	orrs	r0, r4
 80005c4:	bcc0      	pop	{r6, r7}
 80005c6:	46b9      	mov	r9, r7
 80005c8:	46b0      	mov	r8, r6
 80005ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005cc:	2201      	movs	r2, #1
 80005ce:	4051      	eors	r1, r2
 80005d0:	428c      	cmp	r4, r1
 80005d2:	d1ba      	bne.n	800054a <__aeabi_fsub+0x7e>
 80005d4:	464a      	mov	r2, r9
 80005d6:	2a00      	cmp	r2, #0
 80005d8:	d010      	beq.n	80005fc <__aeabi_fsub+0x130>
 80005da:	2d00      	cmp	r5, #0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fsub+0x114>
 80005de:	e098      	b.n	8000712 <__aeabi_fsub+0x246>
 80005e0:	2300      	movs	r3, #0
 80005e2:	e7bb      	b.n	800055c <__aeabi_fsub+0x90>
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d034      	beq.n	8000652 <__aeabi_fsub+0x186>
 80005e8:	1e51      	subs	r1, r2, #1
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	d06e      	beq.n	80006cc <__aeabi_fsub+0x200>
 80005ee:	2aff      	cmp	r2, #255	@ 0xff
 80005f0:	d0b4      	beq.n	800055c <__aeabi_fsub+0x90>
 80005f2:	000a      	movs	r2, r1
 80005f4:	e79c      	b.n	8000530 <__aeabi_fsub+0x64>
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	d000      	beq.n	80005fc <__aeabi_fsub+0x130>
 80005fa:	e088      	b.n	800070e <__aeabi_fsub+0x242>
 80005fc:	20fe      	movs	r0, #254	@ 0xfe
 80005fe:	1c6a      	adds	r2, r5, #1
 8000600:	4210      	tst	r0, r2
 8000602:	d000      	beq.n	8000606 <__aeabi_fsub+0x13a>
 8000604:	e092      	b.n	800072c <__aeabi_fsub+0x260>
 8000606:	2d00      	cmp	r5, #0
 8000608:	d000      	beq.n	800060c <__aeabi_fsub+0x140>
 800060a:	e0a4      	b.n	8000756 <__aeabi_fsub+0x28a>
 800060c:	2b00      	cmp	r3, #0
 800060e:	d100      	bne.n	8000612 <__aeabi_fsub+0x146>
 8000610:	e0cb      	b.n	80007aa <__aeabi_fsub+0x2de>
 8000612:	2e00      	cmp	r6, #0
 8000614:	d000      	beq.n	8000618 <__aeabi_fsub+0x14c>
 8000616:	e0ca      	b.n	80007ae <__aeabi_fsub+0x2e2>
 8000618:	2200      	movs	r2, #0
 800061a:	08db      	lsrs	r3, r3, #3
 800061c:	025b      	lsls	r3, r3, #9
 800061e:	0a5b      	lsrs	r3, r3, #9
 8000620:	b2d0      	uxtb	r0, r2
 8000622:	e7cb      	b.n	80005bc <__aeabi_fsub+0xf0>
 8000624:	0031      	movs	r1, r6
 8000626:	2020      	movs	r0, #32
 8000628:	40d1      	lsrs	r1, r2
 800062a:	1a82      	subs	r2, r0, r2
 800062c:	4096      	lsls	r6, r2
 800062e:	0032      	movs	r2, r6
 8000630:	1e50      	subs	r0, r2, #1
 8000632:	4182      	sbcs	r2, r0
 8000634:	430a      	orrs	r2, r1
 8000636:	189b      	adds	r3, r3, r2
 8000638:	015a      	lsls	r2, r3, #5
 800063a:	d5ae      	bpl.n	800059a <__aeabi_fsub+0xce>
 800063c:	1c6a      	adds	r2, r5, #1
 800063e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000640:	d14a      	bne.n	80006d8 <__aeabi_fsub+0x20c>
 8000642:	20ff      	movs	r0, #255	@ 0xff
 8000644:	2300      	movs	r3, #0
 8000646:	e7b9      	b.n	80005bc <__aeabi_fsub+0xf0>
 8000648:	22ff      	movs	r2, #255	@ 0xff
 800064a:	2b00      	cmp	r3, #0
 800064c:	d14b      	bne.n	80006e6 <__aeabi_fsub+0x21a>
 800064e:	000c      	movs	r4, r1
 8000650:	0033      	movs	r3, r6
 8000652:	08db      	lsrs	r3, r3, #3
 8000654:	2aff      	cmp	r2, #255	@ 0xff
 8000656:	d100      	bne.n	800065a <__aeabi_fsub+0x18e>
 8000658:	e781      	b.n	800055e <__aeabi_fsub+0x92>
 800065a:	e7df      	b.n	800061c <__aeabi_fsub+0x150>
 800065c:	019f      	lsls	r7, r3, #6
 800065e:	09bf      	lsrs	r7, r7, #6
 8000660:	0038      	movs	r0, r7
 8000662:	f000 f97d 	bl	8000960 <__clzsi2>
 8000666:	3805      	subs	r0, #5
 8000668:	4087      	lsls	r7, r0
 800066a:	4285      	cmp	r5, r0
 800066c:	dc21      	bgt.n	80006b2 <__aeabi_fsub+0x1e6>
 800066e:	003b      	movs	r3, r7
 8000670:	2120      	movs	r1, #32
 8000672:	1b42      	subs	r2, r0, r5
 8000674:	3201      	adds	r2, #1
 8000676:	40d3      	lsrs	r3, r2
 8000678:	1a8a      	subs	r2, r1, r2
 800067a:	4097      	lsls	r7, r2
 800067c:	1e7a      	subs	r2, r7, #1
 800067e:	4197      	sbcs	r7, r2
 8000680:	2200      	movs	r2, #0
 8000682:	433b      	orrs	r3, r7
 8000684:	0759      	lsls	r1, r3, #29
 8000686:	d000      	beq.n	800068a <__aeabi_fsub+0x1be>
 8000688:	e78b      	b.n	80005a2 <__aeabi_fsub+0xd6>
 800068a:	e78f      	b.n	80005ac <__aeabi_fsub+0xe0>
 800068c:	20fe      	movs	r0, #254	@ 0xfe
 800068e:	1c6a      	adds	r2, r5, #1
 8000690:	4210      	tst	r0, r2
 8000692:	d112      	bne.n	80006ba <__aeabi_fsub+0x1ee>
 8000694:	2d00      	cmp	r5, #0
 8000696:	d152      	bne.n	800073e <__aeabi_fsub+0x272>
 8000698:	2b00      	cmp	r3, #0
 800069a:	d07c      	beq.n	8000796 <__aeabi_fsub+0x2ca>
 800069c:	2e00      	cmp	r6, #0
 800069e:	d0bb      	beq.n	8000618 <__aeabi_fsub+0x14c>
 80006a0:	1b9a      	subs	r2, r3, r6
 80006a2:	0150      	lsls	r0, r2, #5
 80006a4:	d400      	bmi.n	80006a8 <__aeabi_fsub+0x1dc>
 80006a6:	e08b      	b.n	80007c0 <__aeabi_fsub+0x2f4>
 80006a8:	2401      	movs	r4, #1
 80006aa:	2200      	movs	r2, #0
 80006ac:	1af3      	subs	r3, r6, r3
 80006ae:	400c      	ands	r4, r1
 80006b0:	e7e8      	b.n	8000684 <__aeabi_fsub+0x1b8>
 80006b2:	4b56      	ldr	r3, [pc, #344]	@ (800080c <__aeabi_fsub+0x340>)
 80006b4:	1a2a      	subs	r2, r5, r0
 80006b6:	403b      	ands	r3, r7
 80006b8:	e7e4      	b.n	8000684 <__aeabi_fsub+0x1b8>
 80006ba:	1b9f      	subs	r7, r3, r6
 80006bc:	017a      	lsls	r2, r7, #5
 80006be:	d446      	bmi.n	800074e <__aeabi_fsub+0x282>
 80006c0:	2f00      	cmp	r7, #0
 80006c2:	d1cd      	bne.n	8000660 <__aeabi_fsub+0x194>
 80006c4:	2400      	movs	r4, #0
 80006c6:	2000      	movs	r0, #0
 80006c8:	2300      	movs	r3, #0
 80006ca:	e777      	b.n	80005bc <__aeabi_fsub+0xf0>
 80006cc:	199b      	adds	r3, r3, r6
 80006ce:	2501      	movs	r5, #1
 80006d0:	3201      	adds	r2, #1
 80006d2:	0159      	lsls	r1, r3, #5
 80006d4:	d400      	bmi.n	80006d8 <__aeabi_fsub+0x20c>
 80006d6:	e760      	b.n	800059a <__aeabi_fsub+0xce>
 80006d8:	2101      	movs	r1, #1
 80006da:	484d      	ldr	r0, [pc, #308]	@ (8000810 <__aeabi_fsub+0x344>)
 80006dc:	4019      	ands	r1, r3
 80006de:	085b      	lsrs	r3, r3, #1
 80006e0:	4003      	ands	r3, r0
 80006e2:	430b      	orrs	r3, r1
 80006e4:	e7ce      	b.n	8000684 <__aeabi_fsub+0x1b8>
 80006e6:	1e57      	subs	r7, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d05a      	beq.n	80007a2 <__aeabi_fsub+0x2d6>
 80006ec:	000c      	movs	r4, r1
 80006ee:	2aff      	cmp	r2, #255	@ 0xff
 80006f0:	d033      	beq.n	800075a <__aeabi_fsub+0x28e>
 80006f2:	2201      	movs	r2, #1
 80006f4:	2f1b      	cmp	r7, #27
 80006f6:	dc07      	bgt.n	8000708 <__aeabi_fsub+0x23c>
 80006f8:	2120      	movs	r1, #32
 80006fa:	1bc9      	subs	r1, r1, r7
 80006fc:	001a      	movs	r2, r3
 80006fe:	408b      	lsls	r3, r1
 8000700:	40fa      	lsrs	r2, r7
 8000702:	1e59      	subs	r1, r3, #1
 8000704:	418b      	sbcs	r3, r1
 8000706:	431a      	orrs	r2, r3
 8000708:	0005      	movs	r5, r0
 800070a:	1ab3      	subs	r3, r6, r2
 800070c:	e743      	b.n	8000596 <__aeabi_fsub+0xca>
 800070e:	2d00      	cmp	r5, #0
 8000710:	d123      	bne.n	800075a <__aeabi_fsub+0x28e>
 8000712:	22ff      	movs	r2, #255	@ 0xff
 8000714:	2b00      	cmp	r3, #0
 8000716:	d09b      	beq.n	8000650 <__aeabi_fsub+0x184>
 8000718:	1e51      	subs	r1, r2, #1
 800071a:	2a01      	cmp	r2, #1
 800071c:	d0d6      	beq.n	80006cc <__aeabi_fsub+0x200>
 800071e:	2aff      	cmp	r2, #255	@ 0xff
 8000720:	d01b      	beq.n	800075a <__aeabi_fsub+0x28e>
 8000722:	291b      	cmp	r1, #27
 8000724:	dd2c      	ble.n	8000780 <__aeabi_fsub+0x2b4>
 8000726:	0002      	movs	r2, r0
 8000728:	1c73      	adds	r3, r6, #1
 800072a:	e73a      	b.n	80005a2 <__aeabi_fsub+0xd6>
 800072c:	2aff      	cmp	r2, #255	@ 0xff
 800072e:	d088      	beq.n	8000642 <__aeabi_fsub+0x176>
 8000730:	199b      	adds	r3, r3, r6
 8000732:	085b      	lsrs	r3, r3, #1
 8000734:	0759      	lsls	r1, r3, #29
 8000736:	d000      	beq.n	800073a <__aeabi_fsub+0x26e>
 8000738:	e733      	b.n	80005a2 <__aeabi_fsub+0xd6>
 800073a:	08db      	lsrs	r3, r3, #3
 800073c:	e76e      	b.n	800061c <__aeabi_fsub+0x150>
 800073e:	2b00      	cmp	r3, #0
 8000740:	d110      	bne.n	8000764 <__aeabi_fsub+0x298>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d043      	beq.n	80007ce <__aeabi_fsub+0x302>
 8000746:	2401      	movs	r4, #1
 8000748:	0033      	movs	r3, r6
 800074a:	400c      	ands	r4, r1
 800074c:	e706      	b.n	800055c <__aeabi_fsub+0x90>
 800074e:	2401      	movs	r4, #1
 8000750:	1af7      	subs	r7, r6, r3
 8000752:	400c      	ands	r4, r1
 8000754:	e784      	b.n	8000660 <__aeabi_fsub+0x194>
 8000756:	2b00      	cmp	r3, #0
 8000758:	d104      	bne.n	8000764 <__aeabi_fsub+0x298>
 800075a:	0033      	movs	r3, r6
 800075c:	e6fe      	b.n	800055c <__aeabi_fsub+0x90>
 800075e:	2501      	movs	r5, #1
 8000760:	1b9b      	subs	r3, r3, r6
 8000762:	e718      	b.n	8000596 <__aeabi_fsub+0xca>
 8000764:	2e00      	cmp	r6, #0
 8000766:	d100      	bne.n	800076a <__aeabi_fsub+0x29e>
 8000768:	e6f8      	b.n	800055c <__aeabi_fsub+0x90>
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	03d2      	lsls	r2, r2, #15
 800076e:	4297      	cmp	r7, r2
 8000770:	d304      	bcc.n	800077c <__aeabi_fsub+0x2b0>
 8000772:	4594      	cmp	ip, r2
 8000774:	d202      	bcs.n	800077c <__aeabi_fsub+0x2b0>
 8000776:	2401      	movs	r4, #1
 8000778:	0033      	movs	r3, r6
 800077a:	400c      	ands	r4, r1
 800077c:	08db      	lsrs	r3, r3, #3
 800077e:	e6f1      	b.n	8000564 <__aeabi_fsub+0x98>
 8000780:	001a      	movs	r2, r3
 8000782:	2520      	movs	r5, #32
 8000784:	40ca      	lsrs	r2, r1
 8000786:	1a69      	subs	r1, r5, r1
 8000788:	408b      	lsls	r3, r1
 800078a:	1e59      	subs	r1, r3, #1
 800078c:	418b      	sbcs	r3, r1
 800078e:	4313      	orrs	r3, r2
 8000790:	0005      	movs	r5, r0
 8000792:	199b      	adds	r3, r3, r6
 8000794:	e750      	b.n	8000638 <__aeabi_fsub+0x16c>
 8000796:	2e00      	cmp	r6, #0
 8000798:	d094      	beq.n	80006c4 <__aeabi_fsub+0x1f8>
 800079a:	2401      	movs	r4, #1
 800079c:	0033      	movs	r3, r6
 800079e:	400c      	ands	r4, r1
 80007a0:	e73a      	b.n	8000618 <__aeabi_fsub+0x14c>
 80007a2:	000c      	movs	r4, r1
 80007a4:	2501      	movs	r5, #1
 80007a6:	1af3      	subs	r3, r6, r3
 80007a8:	e6f5      	b.n	8000596 <__aeabi_fsub+0xca>
 80007aa:	0033      	movs	r3, r6
 80007ac:	e734      	b.n	8000618 <__aeabi_fsub+0x14c>
 80007ae:	199b      	adds	r3, r3, r6
 80007b0:	2200      	movs	r2, #0
 80007b2:	0159      	lsls	r1, r3, #5
 80007b4:	d5c1      	bpl.n	800073a <__aeabi_fsub+0x26e>
 80007b6:	4a15      	ldr	r2, [pc, #84]	@ (800080c <__aeabi_fsub+0x340>)
 80007b8:	4013      	ands	r3, r2
 80007ba:	08db      	lsrs	r3, r3, #3
 80007bc:	2201      	movs	r2, #1
 80007be:	e72d      	b.n	800061c <__aeabi_fsub+0x150>
 80007c0:	2a00      	cmp	r2, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fsub+0x2fa>
 80007c4:	e77e      	b.n	80006c4 <__aeabi_fsub+0x1f8>
 80007c6:	0013      	movs	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	08db      	lsrs	r3, r3, #3
 80007cc:	e726      	b.n	800061c <__aeabi_fsub+0x150>
 80007ce:	2380      	movs	r3, #128	@ 0x80
 80007d0:	2400      	movs	r4, #0
 80007d2:	20ff      	movs	r0, #255	@ 0xff
 80007d4:	03db      	lsls	r3, r3, #15
 80007d6:	e6f1      	b.n	80005bc <__aeabi_fsub+0xf0>
 80007d8:	2a00      	cmp	r2, #0
 80007da:	d100      	bne.n	80007de <__aeabi_fsub+0x312>
 80007dc:	e756      	b.n	800068c <__aeabi_fsub+0x1c0>
 80007de:	1b47      	subs	r7, r0, r5
 80007e0:	003a      	movs	r2, r7
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fsub+0x31c>
 80007e6:	e730      	b.n	800064a <__aeabi_fsub+0x17e>
 80007e8:	2280      	movs	r2, #128	@ 0x80
 80007ea:	04d2      	lsls	r2, r2, #19
 80007ec:	000c      	movs	r4, r1
 80007ee:	4313      	orrs	r3, r2
 80007f0:	e77f      	b.n	80006f2 <__aeabi_fsub+0x226>
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fsub+0x32c>
 80007f6:	e701      	b.n	80005fc <__aeabi_fsub+0x130>
 80007f8:	1b41      	subs	r1, r0, r5
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d101      	bne.n	8000802 <__aeabi_fsub+0x336>
 80007fe:	000a      	movs	r2, r1
 8000800:	e788      	b.n	8000714 <__aeabi_fsub+0x248>
 8000802:	2280      	movs	r2, #128	@ 0x80
 8000804:	04d2      	lsls	r2, r2, #19
 8000806:	4313      	orrs	r3, r2
 8000808:	e78b      	b.n	8000722 <__aeabi_fsub+0x256>
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	fbffffff 	.word	0xfbffffff
 8000810:	7dffffff 	.word	0x7dffffff

08000814 <__aeabi_f2iz>:
 8000814:	0241      	lsls	r1, r0, #9
 8000816:	0042      	lsls	r2, r0, #1
 8000818:	0fc3      	lsrs	r3, r0, #31
 800081a:	0a49      	lsrs	r1, r1, #9
 800081c:	2000      	movs	r0, #0
 800081e:	0e12      	lsrs	r2, r2, #24
 8000820:	2a7e      	cmp	r2, #126	@ 0x7e
 8000822:	dd03      	ble.n	800082c <__aeabi_f2iz+0x18>
 8000824:	2a9d      	cmp	r2, #157	@ 0x9d
 8000826:	dd02      	ble.n	800082e <__aeabi_f2iz+0x1a>
 8000828:	4a09      	ldr	r2, [pc, #36]	@ (8000850 <__aeabi_f2iz+0x3c>)
 800082a:	1898      	adds	r0, r3, r2
 800082c:	4770      	bx	lr
 800082e:	2080      	movs	r0, #128	@ 0x80
 8000830:	0400      	lsls	r0, r0, #16
 8000832:	4301      	orrs	r1, r0
 8000834:	2a95      	cmp	r2, #149	@ 0x95
 8000836:	dc07      	bgt.n	8000848 <__aeabi_f2iz+0x34>
 8000838:	2096      	movs	r0, #150	@ 0x96
 800083a:	1a82      	subs	r2, r0, r2
 800083c:	40d1      	lsrs	r1, r2
 800083e:	4248      	negs	r0, r1
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1f3      	bne.n	800082c <__aeabi_f2iz+0x18>
 8000844:	0008      	movs	r0, r1
 8000846:	e7f1      	b.n	800082c <__aeabi_f2iz+0x18>
 8000848:	3a96      	subs	r2, #150	@ 0x96
 800084a:	4091      	lsls	r1, r2
 800084c:	e7f7      	b.n	800083e <__aeabi_f2iz+0x2a>
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	7fffffff 	.word	0x7fffffff

08000854 <__aeabi_i2f>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	2800      	cmp	r0, #0
 8000858:	d013      	beq.n	8000882 <__aeabi_i2f+0x2e>
 800085a:	17c3      	asrs	r3, r0, #31
 800085c:	18c5      	adds	r5, r0, r3
 800085e:	405d      	eors	r5, r3
 8000860:	0fc4      	lsrs	r4, r0, #31
 8000862:	0028      	movs	r0, r5
 8000864:	f000 f87c 	bl	8000960 <__clzsi2>
 8000868:	239e      	movs	r3, #158	@ 0x9e
 800086a:	0001      	movs	r1, r0
 800086c:	1a1b      	subs	r3, r3, r0
 800086e:	2b96      	cmp	r3, #150	@ 0x96
 8000870:	dc0f      	bgt.n	8000892 <__aeabi_i2f+0x3e>
 8000872:	2808      	cmp	r0, #8
 8000874:	d034      	beq.n	80008e0 <__aeabi_i2f+0x8c>
 8000876:	3908      	subs	r1, #8
 8000878:	408d      	lsls	r5, r1
 800087a:	026d      	lsls	r5, r5, #9
 800087c:	0a6d      	lsrs	r5, r5, #9
 800087e:	b2d8      	uxtb	r0, r3
 8000880:	e002      	b.n	8000888 <__aeabi_i2f+0x34>
 8000882:	2400      	movs	r4, #0
 8000884:	2000      	movs	r0, #0
 8000886:	2500      	movs	r5, #0
 8000888:	05c0      	lsls	r0, r0, #23
 800088a:	4328      	orrs	r0, r5
 800088c:	07e4      	lsls	r4, r4, #31
 800088e:	4320      	orrs	r0, r4
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	2b99      	cmp	r3, #153	@ 0x99
 8000894:	dc16      	bgt.n	80008c4 <__aeabi_i2f+0x70>
 8000896:	1f42      	subs	r2, r0, #5
 8000898:	2805      	cmp	r0, #5
 800089a:	d000      	beq.n	800089e <__aeabi_i2f+0x4a>
 800089c:	4095      	lsls	r5, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <__aeabi_i2f+0x94>)
 80008a2:	4002      	ands	r2, r0
 80008a4:	076e      	lsls	r6, r5, #29
 80008a6:	d009      	beq.n	80008bc <__aeabi_i2f+0x68>
 80008a8:	260f      	movs	r6, #15
 80008aa:	4035      	ands	r5, r6
 80008ac:	2d04      	cmp	r5, #4
 80008ae:	d005      	beq.n	80008bc <__aeabi_i2f+0x68>
 80008b0:	3204      	adds	r2, #4
 80008b2:	0155      	lsls	r5, r2, #5
 80008b4:	d502      	bpl.n	80008bc <__aeabi_i2f+0x68>
 80008b6:	239f      	movs	r3, #159	@ 0x9f
 80008b8:	4002      	ands	r2, r0
 80008ba:	1a5b      	subs	r3, r3, r1
 80008bc:	0192      	lsls	r2, r2, #6
 80008be:	0a55      	lsrs	r5, r2, #9
 80008c0:	b2d8      	uxtb	r0, r3
 80008c2:	e7e1      	b.n	8000888 <__aeabi_i2f+0x34>
 80008c4:	2205      	movs	r2, #5
 80008c6:	1a12      	subs	r2, r2, r0
 80008c8:	0028      	movs	r0, r5
 80008ca:	40d0      	lsrs	r0, r2
 80008cc:	0002      	movs	r2, r0
 80008ce:	0008      	movs	r0, r1
 80008d0:	301b      	adds	r0, #27
 80008d2:	4085      	lsls	r5, r0
 80008d4:	0028      	movs	r0, r5
 80008d6:	1e45      	subs	r5, r0, #1
 80008d8:	41a8      	sbcs	r0, r5
 80008da:	4302      	orrs	r2, r0
 80008dc:	0015      	movs	r5, r2
 80008de:	e7de      	b.n	800089e <__aeabi_i2f+0x4a>
 80008e0:	026d      	lsls	r5, r5, #9
 80008e2:	2096      	movs	r0, #150	@ 0x96
 80008e4:	0a6d      	lsrs	r5, r5, #9
 80008e6:	e7cf      	b.n	8000888 <__aeabi_i2f+0x34>
 80008e8:	fbffffff 	.word	0xfbffffff

080008ec <__aeabi_cfrcmple>:
 80008ec:	4684      	mov	ip, r0
 80008ee:	0008      	movs	r0, r1
 80008f0:	4661      	mov	r1, ip
 80008f2:	e7ff      	b.n	80008f4 <__aeabi_cfcmpeq>

080008f4 <__aeabi_cfcmpeq>:
 80008f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80008f6:	f000 f8c9 	bl	8000a8c <__lesf2>
 80008fa:	2800      	cmp	r0, #0
 80008fc:	d401      	bmi.n	8000902 <__aeabi_cfcmpeq+0xe>
 80008fe:	2100      	movs	r1, #0
 8000900:	42c8      	cmn	r0, r1
 8000902:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000904 <__aeabi_fcmpeq>:
 8000904:	b510      	push	{r4, lr}
 8000906:	f000 f849 	bl	800099c <__eqsf2>
 800090a:	4240      	negs	r0, r0
 800090c:	3001      	adds	r0, #1
 800090e:	bd10      	pop	{r4, pc}

08000910 <__aeabi_fcmplt>:
 8000910:	b510      	push	{r4, lr}
 8000912:	f000 f8bb 	bl	8000a8c <__lesf2>
 8000916:	2800      	cmp	r0, #0
 8000918:	db01      	blt.n	800091e <__aeabi_fcmplt+0xe>
 800091a:	2000      	movs	r0, #0
 800091c:	bd10      	pop	{r4, pc}
 800091e:	2001      	movs	r0, #1
 8000920:	bd10      	pop	{r4, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)

08000924 <__aeabi_fcmple>:
 8000924:	b510      	push	{r4, lr}
 8000926:	f000 f8b1 	bl	8000a8c <__lesf2>
 800092a:	2800      	cmp	r0, #0
 800092c:	dd01      	ble.n	8000932 <__aeabi_fcmple+0xe>
 800092e:	2000      	movs	r0, #0
 8000930:	bd10      	pop	{r4, pc}
 8000932:	2001      	movs	r0, #1
 8000934:	bd10      	pop	{r4, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)

08000938 <__aeabi_fcmpgt>:
 8000938:	b510      	push	{r4, lr}
 800093a:	f000 f857 	bl	80009ec <__gesf2>
 800093e:	2800      	cmp	r0, #0
 8000940:	dc01      	bgt.n	8000946 <__aeabi_fcmpgt+0xe>
 8000942:	2000      	movs	r0, #0
 8000944:	bd10      	pop	{r4, pc}
 8000946:	2001      	movs	r0, #1
 8000948:	bd10      	pop	{r4, pc}
 800094a:	46c0      	nop			@ (mov r8, r8)

0800094c <__aeabi_fcmpge>:
 800094c:	b510      	push	{r4, lr}
 800094e:	f000 f84d 	bl	80009ec <__gesf2>
 8000952:	2800      	cmp	r0, #0
 8000954:	da01      	bge.n	800095a <__aeabi_fcmpge+0xe>
 8000956:	2000      	movs	r0, #0
 8000958:	bd10      	pop	{r4, pc}
 800095a:	2001      	movs	r0, #1
 800095c:	bd10      	pop	{r4, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)

08000960 <__clzsi2>:
 8000960:	211c      	movs	r1, #28
 8000962:	2301      	movs	r3, #1
 8000964:	041b      	lsls	r3, r3, #16
 8000966:	4298      	cmp	r0, r3
 8000968:	d301      	bcc.n	800096e <__clzsi2+0xe>
 800096a:	0c00      	lsrs	r0, r0, #16
 800096c:	3910      	subs	r1, #16
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	4298      	cmp	r0, r3
 8000972:	d301      	bcc.n	8000978 <__clzsi2+0x18>
 8000974:	0a00      	lsrs	r0, r0, #8
 8000976:	3908      	subs	r1, #8
 8000978:	091b      	lsrs	r3, r3, #4
 800097a:	4298      	cmp	r0, r3
 800097c:	d301      	bcc.n	8000982 <__clzsi2+0x22>
 800097e:	0900      	lsrs	r0, r0, #4
 8000980:	3904      	subs	r1, #4
 8000982:	a202      	add	r2, pc, #8	@ (adr r2, 800098c <__clzsi2+0x2c>)
 8000984:	5c10      	ldrb	r0, [r2, r0]
 8000986:	1840      	adds	r0, r0, r1
 8000988:	4770      	bx	lr
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	02020304 	.word	0x02020304
 8000990:	01010101 	.word	0x01010101
	...

0800099c <__eqsf2>:
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	0042      	lsls	r2, r0, #1
 80009a0:	024e      	lsls	r6, r1, #9
 80009a2:	004c      	lsls	r4, r1, #1
 80009a4:	0245      	lsls	r5, r0, #9
 80009a6:	0a6d      	lsrs	r5, r5, #9
 80009a8:	0e12      	lsrs	r2, r2, #24
 80009aa:	0fc3      	lsrs	r3, r0, #31
 80009ac:	0a76      	lsrs	r6, r6, #9
 80009ae:	0e24      	lsrs	r4, r4, #24
 80009b0:	0fc9      	lsrs	r1, r1, #31
 80009b2:	2aff      	cmp	r2, #255	@ 0xff
 80009b4:	d010      	beq.n	80009d8 <__eqsf2+0x3c>
 80009b6:	2cff      	cmp	r4, #255	@ 0xff
 80009b8:	d00c      	beq.n	80009d4 <__eqsf2+0x38>
 80009ba:	2001      	movs	r0, #1
 80009bc:	42a2      	cmp	r2, r4
 80009be:	d10a      	bne.n	80009d6 <__eqsf2+0x3a>
 80009c0:	42b5      	cmp	r5, r6
 80009c2:	d108      	bne.n	80009d6 <__eqsf2+0x3a>
 80009c4:	428b      	cmp	r3, r1
 80009c6:	d00f      	beq.n	80009e8 <__eqsf2+0x4c>
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d104      	bne.n	80009d6 <__eqsf2+0x3a>
 80009cc:	0028      	movs	r0, r5
 80009ce:	1e43      	subs	r3, r0, #1
 80009d0:	4198      	sbcs	r0, r3
 80009d2:	e000      	b.n	80009d6 <__eqsf2+0x3a>
 80009d4:	2001      	movs	r0, #1
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	2001      	movs	r0, #1
 80009da:	2cff      	cmp	r4, #255	@ 0xff
 80009dc:	d1fb      	bne.n	80009d6 <__eqsf2+0x3a>
 80009de:	4335      	orrs	r5, r6
 80009e0:	d1f9      	bne.n	80009d6 <__eqsf2+0x3a>
 80009e2:	404b      	eors	r3, r1
 80009e4:	0018      	movs	r0, r3
 80009e6:	e7f6      	b.n	80009d6 <__eqsf2+0x3a>
 80009e8:	2000      	movs	r0, #0
 80009ea:	e7f4      	b.n	80009d6 <__eqsf2+0x3a>

080009ec <__gesf2>:
 80009ec:	b530      	push	{r4, r5, lr}
 80009ee:	0042      	lsls	r2, r0, #1
 80009f0:	0244      	lsls	r4, r0, #9
 80009f2:	024d      	lsls	r5, r1, #9
 80009f4:	0fc3      	lsrs	r3, r0, #31
 80009f6:	0048      	lsls	r0, r1, #1
 80009f8:	0a64      	lsrs	r4, r4, #9
 80009fa:	0e12      	lsrs	r2, r2, #24
 80009fc:	0a6d      	lsrs	r5, r5, #9
 80009fe:	0e00      	lsrs	r0, r0, #24
 8000a00:	0fc9      	lsrs	r1, r1, #31
 8000a02:	2aff      	cmp	r2, #255	@ 0xff
 8000a04:	d019      	beq.n	8000a3a <__gesf2+0x4e>
 8000a06:	28ff      	cmp	r0, #255	@ 0xff
 8000a08:	d00b      	beq.n	8000a22 <__gesf2+0x36>
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	d11e      	bne.n	8000a4c <__gesf2+0x60>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	d10b      	bne.n	8000a2a <__gesf2+0x3e>
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	d027      	beq.n	8000a66 <__gesf2+0x7a>
 8000a16:	2c00      	cmp	r4, #0
 8000a18:	d134      	bne.n	8000a84 <__gesf2+0x98>
 8000a1a:	2900      	cmp	r1, #0
 8000a1c:	d02f      	beq.n	8000a7e <__gesf2+0x92>
 8000a1e:	0008      	movs	r0, r1
 8000a20:	bd30      	pop	{r4, r5, pc}
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	d128      	bne.n	8000a78 <__gesf2+0x8c>
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	d101      	bne.n	8000a2e <__gesf2+0x42>
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d0f5      	beq.n	8000a1a <__gesf2+0x2e>
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d107      	bne.n	8000a42 <__gesf2+0x56>
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d023      	beq.n	8000a7e <__gesf2+0x92>
 8000a36:	0018      	movs	r0, r3
 8000a38:	e7f2      	b.n	8000a20 <__gesf2+0x34>
 8000a3a:	2c00      	cmp	r4, #0
 8000a3c:	d11c      	bne.n	8000a78 <__gesf2+0x8c>
 8000a3e:	28ff      	cmp	r0, #255	@ 0xff
 8000a40:	d014      	beq.n	8000a6c <__gesf2+0x80>
 8000a42:	1e58      	subs	r0, r3, #1
 8000a44:	2302      	movs	r3, #2
 8000a46:	4018      	ands	r0, r3
 8000a48:	3801      	subs	r0, #1
 8000a4a:	e7e9      	b.n	8000a20 <__gesf2+0x34>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d0f8      	beq.n	8000a42 <__gesf2+0x56>
 8000a50:	428b      	cmp	r3, r1
 8000a52:	d1f6      	bne.n	8000a42 <__gesf2+0x56>
 8000a54:	4282      	cmp	r2, r0
 8000a56:	dcf4      	bgt.n	8000a42 <__gesf2+0x56>
 8000a58:	dbeb      	blt.n	8000a32 <__gesf2+0x46>
 8000a5a:	42ac      	cmp	r4, r5
 8000a5c:	d8f1      	bhi.n	8000a42 <__gesf2+0x56>
 8000a5e:	2000      	movs	r0, #0
 8000a60:	42ac      	cmp	r4, r5
 8000a62:	d2dd      	bcs.n	8000a20 <__gesf2+0x34>
 8000a64:	e7e5      	b.n	8000a32 <__gesf2+0x46>
 8000a66:	2c00      	cmp	r4, #0
 8000a68:	d0da      	beq.n	8000a20 <__gesf2+0x34>
 8000a6a:	e7ea      	b.n	8000a42 <__gesf2+0x56>
 8000a6c:	2d00      	cmp	r5, #0
 8000a6e:	d103      	bne.n	8000a78 <__gesf2+0x8c>
 8000a70:	428b      	cmp	r3, r1
 8000a72:	d1e6      	bne.n	8000a42 <__gesf2+0x56>
 8000a74:	2000      	movs	r0, #0
 8000a76:	e7d3      	b.n	8000a20 <__gesf2+0x34>
 8000a78:	2002      	movs	r0, #2
 8000a7a:	4240      	negs	r0, r0
 8000a7c:	e7d0      	b.n	8000a20 <__gesf2+0x34>
 8000a7e:	2001      	movs	r0, #1
 8000a80:	4240      	negs	r0, r0
 8000a82:	e7cd      	b.n	8000a20 <__gesf2+0x34>
 8000a84:	428b      	cmp	r3, r1
 8000a86:	d0e8      	beq.n	8000a5a <__gesf2+0x6e>
 8000a88:	e7db      	b.n	8000a42 <__gesf2+0x56>
 8000a8a:	46c0      	nop			@ (mov r8, r8)

08000a8c <__lesf2>:
 8000a8c:	b530      	push	{r4, r5, lr}
 8000a8e:	0042      	lsls	r2, r0, #1
 8000a90:	0244      	lsls	r4, r0, #9
 8000a92:	024d      	lsls	r5, r1, #9
 8000a94:	0fc3      	lsrs	r3, r0, #31
 8000a96:	0048      	lsls	r0, r1, #1
 8000a98:	0a64      	lsrs	r4, r4, #9
 8000a9a:	0e12      	lsrs	r2, r2, #24
 8000a9c:	0a6d      	lsrs	r5, r5, #9
 8000a9e:	0e00      	lsrs	r0, r0, #24
 8000aa0:	0fc9      	lsrs	r1, r1, #31
 8000aa2:	2aff      	cmp	r2, #255	@ 0xff
 8000aa4:	d01a      	beq.n	8000adc <__lesf2+0x50>
 8000aa6:	28ff      	cmp	r0, #255	@ 0xff
 8000aa8:	d00e      	beq.n	8000ac8 <__lesf2+0x3c>
 8000aaa:	2a00      	cmp	r2, #0
 8000aac:	d11e      	bne.n	8000aec <__lesf2+0x60>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d10e      	bne.n	8000ad0 <__lesf2+0x44>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d02a      	beq.n	8000b0c <__lesf2+0x80>
 8000ab6:	2c00      	cmp	r4, #0
 8000ab8:	d00c      	beq.n	8000ad4 <__lesf2+0x48>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d01d      	beq.n	8000afa <__lesf2+0x6e>
 8000abe:	1e58      	subs	r0, r3, #1
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	4018      	ands	r0, r3
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	e010      	b.n	8000aea <__lesf2+0x5e>
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	d10d      	bne.n	8000ae8 <__lesf2+0x5c>
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d120      	bne.n	8000b12 <__lesf2+0x86>
 8000ad0:	2c00      	cmp	r4, #0
 8000ad2:	d11e      	bne.n	8000b12 <__lesf2+0x86>
 8000ad4:	2900      	cmp	r1, #0
 8000ad6:	d023      	beq.n	8000b20 <__lesf2+0x94>
 8000ad8:	0008      	movs	r0, r1
 8000ada:	e006      	b.n	8000aea <__lesf2+0x5e>
 8000adc:	2c00      	cmp	r4, #0
 8000ade:	d103      	bne.n	8000ae8 <__lesf2+0x5c>
 8000ae0:	28ff      	cmp	r0, #255	@ 0xff
 8000ae2:	d1ec      	bne.n	8000abe <__lesf2+0x32>
 8000ae4:	2d00      	cmp	r5, #0
 8000ae6:	d017      	beq.n	8000b18 <__lesf2+0x8c>
 8000ae8:	2002      	movs	r0, #2
 8000aea:	bd30      	pop	{r4, r5, pc}
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d0e6      	beq.n	8000abe <__lesf2+0x32>
 8000af0:	428b      	cmp	r3, r1
 8000af2:	d1e4      	bne.n	8000abe <__lesf2+0x32>
 8000af4:	4282      	cmp	r2, r0
 8000af6:	dce2      	bgt.n	8000abe <__lesf2+0x32>
 8000af8:	db04      	blt.n	8000b04 <__lesf2+0x78>
 8000afa:	42ac      	cmp	r4, r5
 8000afc:	d8df      	bhi.n	8000abe <__lesf2+0x32>
 8000afe:	2000      	movs	r0, #0
 8000b00:	42ac      	cmp	r4, r5
 8000b02:	d2f2      	bcs.n	8000aea <__lesf2+0x5e>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d00b      	beq.n	8000b20 <__lesf2+0x94>
 8000b08:	0018      	movs	r0, r3
 8000b0a:	e7ee      	b.n	8000aea <__lesf2+0x5e>
 8000b0c:	2c00      	cmp	r4, #0
 8000b0e:	d0ec      	beq.n	8000aea <__lesf2+0x5e>
 8000b10:	e7d5      	b.n	8000abe <__lesf2+0x32>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d1d3      	bne.n	8000abe <__lesf2+0x32>
 8000b16:	e7f5      	b.n	8000b04 <__lesf2+0x78>
 8000b18:	2000      	movs	r0, #0
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d0e5      	beq.n	8000aea <__lesf2+0x5e>
 8000b1e:	e7ce      	b.n	8000abe <__lesf2+0x32>
 8000b20:	2001      	movs	r0, #1
 8000b22:	4240      	negs	r0, r0
 8000b24:	e7e1      	b.n	8000aea <__lesf2+0x5e>
 8000b26:	46c0      	nop			@ (mov r8, r8)

08000b28 <RGs_Attr_Init>:
	uint8_t all_RGs_custom[RGS_NUMBER];
} RGs_Attr;

RGs_Attr RGs;

static void RGs_Attr_Init() {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
	RGs.RG_off = 0b11111111;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b30:	22ff      	movs	r2, #255	@ 0xff
 8000b32:	701a      	strb	r2, [r3, #0]
	RGs.RG_on = 0b00000000;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	705a      	strb	r2, [r3, #1]
	RGs.mixled_off = 0b10001110;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b3c:	228e      	movs	r2, #142	@ 0x8e
 8000b3e:	709a      	strb	r2, [r3, #2]
	RGs.mixled_on = 0b01110000;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b42:	2270      	movs	r2, #112	@ 0x70
 8000b44:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < RGS_NUMBER; ++i) {
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	e01c      	b.n	8000b88 <RGs_Attr_Init+0x60>
		RGs.all_RGs_on[i] = RGs.RG_on;
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b54:	7851      	ldrb	r1, [r2, #1]
 8000b56:	4a16      	ldr	r2, [pc, #88]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b58:	18d3      	adds	r3, r2, r3
 8000b5a:	1c0a      	adds	r2, r1, #0
 8000b5c:	711a      	strb	r2, [r3, #4]
		RGs.all_RGs_custom[i] = RGs.all_RGs_off[i] = RGs.RG_off;
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4a13      	ldr	r2, [pc, #76]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b64:	7811      	ldrb	r1, [r2, #0]
 8000b66:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b68:	18d2      	adds	r2, r2, r3
 8000b6a:	7351      	strb	r1, [r2, #13]
 8000b6c:	1dfa      	adds	r2, r7, #7
 8000b6e:	7812      	ldrb	r2, [r2, #0]
 8000b70:	490f      	ldr	r1, [pc, #60]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b72:	18cb      	adds	r3, r1, r3
 8000b74:	7b59      	ldrb	r1, [r3, #13]
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b78:	189b      	adds	r3, r3, r2
 8000b7a:	1c0a      	adds	r2, r1, #0
 8000b7c:	759a      	strb	r2, [r3, #22]
	for (uint8_t i = 0; i < RGS_NUMBER; ++i) {
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	1dfa      	adds	r2, r7, #7
 8000b82:	7812      	ldrb	r2, [r2, #0]
 8000b84:	3201      	adds	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b08      	cmp	r3, #8
 8000b8e:	d9de      	bls.n	8000b4e <RGs_Attr_Init+0x26>
	}

	RGs.all_RGs_on[4] = RGs.mixled_on;
 8000b90:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b92:	78da      	ldrb	r2, [r3, #3]
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b96:	721a      	strb	r2, [r3, #8]
	RGs.all_RGs_custom[4] = RGs.all_RGs_off[4] = RGs.mixled_off;
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b9a:	789a      	ldrb	r2, [r3, #2]
 8000b9c:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b9e:	745a      	strb	r2, [r3, #17]
 8000ba0:	4b03      	ldr	r3, [pc, #12]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000ba2:	7c5a      	ldrb	r2, [r3, #17]
 8000ba4:	4b02      	ldr	r3, [pc, #8]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000ba6:	769a      	strb	r2, [r3, #26]
}
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000128 	.word	0x20000128

08000bb4 <symbol_transform>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t symbol_transform(unsigned char symbol) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	701a      	strb	r2, [r3, #0]
	uint8_t sym_to_indicator = 0;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
	switch (symbol) {
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bce:	d83a      	bhi.n	8000c46 <symbol_transform+0x92>
 8000bd0:	009a      	lsls	r2, r3, #2
 8000bd2:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <symbol_transform+0xa0>)
 8000bd4:	18d3      	adds	r3, r2, r3
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	469f      	mov	pc, r3
	case 1:
		sym_to_indicator = 0b01110111;
 8000bda:	230f      	movs	r3, #15
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	2277      	movs	r2, #119	@ 0x77
 8000be0:	701a      	strb	r2, [r3, #0]
		break;
 8000be2:	e030      	b.n	8000c46 <symbol_transform+0x92>
	case 2:
		sym_to_indicator = 0b00101001;
 8000be4:	230f      	movs	r3, #15
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2229      	movs	r2, #41	@ 0x29
 8000bea:	701a      	strb	r2, [r3, #0]
		break;
 8000bec:	e02b      	b.n	8000c46 <symbol_transform+0x92>
	case 3:
		sym_to_indicator = 0b00100011;
 8000bee:	230f      	movs	r3, #15
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	2223      	movs	r2, #35	@ 0x23
 8000bf4:	701a      	strb	r2, [r3, #0]
		break;
 8000bf6:	e026      	b.n	8000c46 <symbol_transform+0x92>
	case 4:
		sym_to_indicator = 0b01000111;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	2247      	movs	r2, #71	@ 0x47
 8000bfe:	701a      	strb	r2, [r3, #0]
		break;
 8000c00:	e021      	b.n	8000c46 <symbol_transform+0x92>
	case 5:
		sym_to_indicator = 0b10000011;
 8000c02:	230f      	movs	r3, #15
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	2283      	movs	r2, #131	@ 0x83
 8000c08:	701a      	strb	r2, [r3, #0]
		break;
 8000c0a:	e01c      	b.n	8000c46 <symbol_transform+0x92>
	case 6:
		sym_to_indicator = 0b10000001;
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	2281      	movs	r2, #129	@ 0x81
 8000c12:	701a      	strb	r2, [r3, #0]
		break;
 8000c14:	e017      	b.n	8000c46 <symbol_transform+0x92>
	case 7:
		sym_to_indicator = 0b00110111;
 8000c16:	230f      	movs	r3, #15
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	2237      	movs	r2, #55	@ 0x37
 8000c1c:	701a      	strb	r2, [r3, #0]
		break;
 8000c1e:	e012      	b.n	8000c46 <symbol_transform+0x92>
	case 8:
		sym_to_indicator = 0b00000001;
 8000c20:	230f      	movs	r3, #15
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
		break;
 8000c28:	e00d      	b.n	8000c46 <symbol_transform+0x92>
	case 9:
		sym_to_indicator = 0b00000111;
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	18fb      	adds	r3, r7, r3
 8000c2e:	2207      	movs	r2, #7
 8000c30:	701a      	strb	r2, [r3, #0]
		break;
 8000c32:	e008      	b.n	8000c46 <symbol_transform+0x92>
	case 0:
		sym_to_indicator = 0b00010001;
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	2211      	movs	r2, #17
 8000c3a:	701a      	strb	r2, [r3, #0]
		break;
 8000c3c:	e003      	b.n	8000c46 <symbol_transform+0x92>
	case '.':
		sym_to_indicator = 0b11111110;
 8000c3e:	230f      	movs	r3, #15
 8000c40:	18fb      	adds	r3, r7, r3
 8000c42:	22fe      	movs	r2, #254	@ 0xfe
 8000c44:	701a      	strb	r2, [r3, #0]
	}
	return sym_to_indicator;
 8000c46:	230f      	movs	r3, #15
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	781b      	ldrb	r3, [r3, #0]
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b004      	add	sp, #16
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08004c4c 	.word	0x08004c4c

08000c58 <number_to_indicator>:

float getInfo() {
	return 3.14;
}
void number_to_indicator(float number, bool voltage) {
 8000c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	000a      	movs	r2, r1
 8000c62:	1cfb      	adds	r3, r7, #3
 8000c64:	701a      	strb	r2, [r3, #0]
	if (voltage) {
 8000c66:	1cfb      	adds	r3, r7, #3
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d04a      	beq.n	8000d04 <number_to_indicator+0xac>
		//2 1 3 RGs
		//number = 3.14;
		uint8_t integer, fraction;
		integer = number;
 8000c6e:	250f      	movs	r5, #15
 8000c70:	197c      	adds	r4, r7, r5
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff fad4 	bl	8000220 <__aeabi_f2uiz>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	7023      	strb	r3, [r4, #0]
		fraction = (number - integer) * 100;
 8000c7c:	197b      	adds	r3, r7, r5
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff fde7 	bl	8000854 <__aeabi_i2f>
 8000c86:	1c03      	adds	r3, r0, #0
 8000c88:	1c19      	adds	r1, r3, #0
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fc1e 	bl	80004cc <__aeabi_fsub>
 8000c90:	1c03      	adds	r3, r0, #0
 8000c92:	491e      	ldr	r1, [pc, #120]	@ (8000d0c <number_to_indicator+0xb4>)
 8000c94:	1c18      	adds	r0, r3, #0
 8000c96:	f7ff fadb 	bl	8000250 <__aeabi_fmul>
 8000c9a:	1c03      	adds	r3, r0, #0
 8000c9c:	260e      	movs	r6, #14
 8000c9e:	19bc      	adds	r4, r7, r6
 8000ca0:	1c18      	adds	r0, r3, #0
 8000ca2:	f7ff fabd 	bl	8000220 <__aeabi_f2uiz>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	7023      	strb	r3, [r4, #0]
		RGs.all_RGs_custom[2] = symbol_transform(integer) & symbol_transform('.');
 8000caa:	197b      	adds	r3, r7, r5
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff ff80 	bl	8000bb4 <symbol_transform>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	001c      	movs	r4, r3
 8000cb8:	202e      	movs	r0, #46	@ 0x2e
 8000cba:	f7ff ff7b 	bl	8000bb4 <symbol_transform>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	4023      	ands	r3, r4
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <number_to_indicator+0xb8>)
 8000cc6:	761a      	strb	r2, [r3, #24]
		RGs.all_RGs_custom[1] = symbol_transform(fraction / 10);
 8000cc8:	19bb      	adds	r3, r7, r6
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	210a      	movs	r1, #10
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff fa1a 	bl	8000108 <__udivsi3>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff ff6b 	bl	8000bb4 <symbol_transform>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <number_to_indicator+0xb8>)
 8000ce4:	75da      	strb	r2, [r3, #23]
		RGs.all_RGs_custom[3] = symbol_transform(fraction % 10);
 8000ce6:	19bb      	adds	r3, r7, r6
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	210a      	movs	r1, #10
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff fa91 	bl	8000214 <__aeabi_uidivmod>
 8000cf2:	000b      	movs	r3, r1
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff ff5c 	bl	8000bb4 <symbol_transform>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	001a      	movs	r2, r3
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <number_to_indicator+0xb8>)
 8000d02:	765a      	strb	r2, [r3, #25]
	} else {
		// 7 6 8
	}

}
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b005      	add	sp, #20
 8000d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d0c:	42c80000 	.word	0x42c80000
 8000d10:	20000128 	.word	0x20000128

08000d14 <update_indication>:
void update_indication(bool indication, bool voltage) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	1dbb      	adds	r3, r7, #6
 8000d22:	1c0a      	adds	r2, r1, #0
 8000d24:	701a      	strb	r2, [r3, #0]
	if (indication) {
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00d      	beq.n	8000d4a <update_indication+0x36>
//		HAL_I2C_Master_Receive(&hi2c1, I2C_ADDRESS, (uint8_t *)regData, 2, I2C_TIMEOUT);
//		uint16_t high_byte=regData[1];
//		high_byte<<=8;
//		uint16_t value=(high_byte& 0xff00)|regData[0];
//		float voltage_value=value*2.44;
		number_to_indicator(3.14, voltage);
 8000d2e:	1dbb      	adds	r3, r7, #6
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <update_indication+0x68>)
 8000d34:	0019      	movs	r1, r3
 8000d36:	1c10      	adds	r0, r2, #0
 8000d38:	f7ff ff8e 	bl	8000c58 <number_to_indicator>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) RGs.all_RGs_custom, RGS_NUMBER, 5000);  //SN74HC595N
 8000d3c:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <update_indication+0x6c>)
 8000d3e:	4911      	ldr	r1, [pc, #68]	@ (8000d84 <update_indication+0x70>)
 8000d40:	4811      	ldr	r0, [pc, #68]	@ (8000d88 <update_indication+0x74>)
 8000d42:	2209      	movs	r2, #9
 8000d44:	f003 f840 	bl	8003dc8 <HAL_SPI_Transmit>
 8000d48:	e005      	b.n	8000d56 <update_indication+0x42>
	} else {
		HAL_SPI_Transmit(&hspi2, (uint8_t*) RGs.all_RGs_off, RGS_NUMBER, 5000);  //SN74HC595N
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <update_indication+0x6c>)
 8000d4c:	490f      	ldr	r1, [pc, #60]	@ (8000d8c <update_indication+0x78>)
 8000d4e:	480e      	ldr	r0, [pc, #56]	@ (8000d88 <update_indication+0x74>)
 8000d50:	2209      	movs	r2, #9
 8000d52:	f003 f839 	bl	8003dc8 <HAL_SPI_Transmit>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000d56:	2380      	movs	r3, #128	@ 0x80
 8000d58:	01db      	lsls	r3, r3, #7
 8000d5a:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <update_indication+0x7c>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	0019      	movs	r1, r3
 8000d60:	f000 fec2 	bl	8001ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	01db      	lsls	r3, r3, #7
 8000d68:	4809      	ldr	r0, [pc, #36]	@ (8000d90 <update_indication+0x7c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	f000 febb 	bl	8001ae8 <HAL_GPIO_WritePin>
}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	4048f5c3 	.word	0x4048f5c3
 8000d80:	00001388 	.word	0x00001388
 8000d84:	2000013e 	.word	0x2000013e
 8000d88:	2000007c 	.word	0x2000007c
 8000d8c:	20000135 	.word	0x20000135
 8000d90:	48000400 	.word	0x48000400

08000d94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) //check if the interrupt comes from TIM1
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a05      	ldr	r2, [pc, #20]	@ (8000db8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d103      	bne.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		update_indication(false, true); //добавить переменные индикации и измеряемой переменной
 8000da6:	2101      	movs	r1, #1
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff ffb3 	bl	8000d14 <update_indication>
	}
}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b002      	add	sp, #8
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	40012c00 	.word	0x40012c00

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f000 fb61 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f84d 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f000 f97d 	bl	80010c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dce:	f000 f8a3 	bl	8000f18 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000dd2:	f000 f8e1 	bl	8000f98 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000dd6:	f000 f91d 	bl	8001014 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);//предположение
 8000dda:	2064      	movs	r0, #100	@ 0x64
 8000ddc:	f000 fbb8 	bl	8001550 <HAL_Delay>
//	uint16_t value=(high_byte& 0xFF0)|regData[1];
//	float voltage_value=value*2.44;

//	uint8_t test_data[2]={0,0};
	HAL_StatusTypeDef stat;
	uint8_t check=0x00;
 8000de0:	1dbb      	adds	r3, r7, #6
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
//	//0x70 STC3100 0xE0
//	//0x72 temp
	stat=HAL_I2C_Mem_Read(&hi2c1,0x70<<1, 0x00, 1, &check, 1, 0xFFFF);
 8000de6:	1dfc      	adds	r4, r7, #7
 8000de8:	4817      	ldr	r0, [pc, #92]	@ (8000e48 <main+0x8c>)
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <main+0x90>)
 8000dec:	9302      	str	r3, [sp, #8]
 8000dee:	2301      	movs	r3, #1
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	1dbb      	adds	r3, r7, #6
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2301      	movs	r3, #1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	21e0      	movs	r1, #224	@ 0xe0
 8000dfc:	f000 ff28 	bl	8001c50 <HAL_I2C_Mem_Read>
 8000e00:	0003      	movs	r3, r0
 8000e02:	7023      	strb	r3, [r4, #0]

//	uint16_t high_byte = test_data[1];
//	high_byte <<= 8;
//	uint16_t value = (high_byte & 0xFF00) | test_data[0];
//	float voltage_value = value * 2.44;
	RGs_Attr_Init();
 8000e04:	f7ff fe90 	bl	8000b28 <RGs_Attr_Init>
	//cs_reset();
	//HAL_SPI_Transmit(&hspi1, &spi2_data, 1, 5000);//
	HAL_SPI_Transmit(&hspi2, (uint8_t*) RGs.all_RGs_off, RGS_NUMBER, 5000);  //SN74HC595N
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <main+0x94>)
 8000e0a:	4912      	ldr	r1, [pc, #72]	@ (8000e54 <main+0x98>)
 8000e0c:	4812      	ldr	r0, [pc, #72]	@ (8000e58 <main+0x9c>)
 8000e0e:	2209      	movs	r2, #9
 8000e10:	f002 ffda 	bl	8003dc8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e14:	2380      	movs	r3, #128	@ 0x80
 8000e16:	01db      	lsls	r3, r3, #7
 8000e18:	4810      	ldr	r0, [pc, #64]	@ (8000e5c <main+0xa0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	f000 fe63 	bl	8001ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e22:	2380      	movs	r3, #128	@ 0x80
 8000e24:	01db      	lsls	r3, r3, #7
 8000e26:	480d      	ldr	r0, [pc, #52]	@ (8000e5c <main+0xa0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	0019      	movs	r1, r3
 8000e2c:	f000 fe5c 	bl	8001ae8 <HAL_GPIO_WritePin>
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);  //подождать 4 секунды для STC3100
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <main+0xa4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2202      	movs	r2, #2
 8000e36:	4252      	negs	r2, r2
 8000e38:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim1);
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <main+0xa4>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f003 fae9 	bl	8004414 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	e7fd      	b.n	8000e42 <main+0x86>
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	20000028 	.word	0x20000028
 8000e4c:	0000ffff 	.word	0x0000ffff
 8000e50:	00001388 	.word	0x00001388
 8000e54:	20000135 	.word	0x20000135
 8000e58:	2000007c 	.word	0x2000007c
 8000e5c:	48000400 	.word	0x48000400
 8000e60:	200000e0 	.word	0x200000e0

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b099      	sub	sp, #100	@ 0x64
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	242c      	movs	r4, #44	@ 0x2c
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	0018      	movs	r0, r3
 8000e70:	2334      	movs	r3, #52	@ 0x34
 8000e72:	001a      	movs	r2, r3
 8000e74:	2100      	movs	r1, #0
 8000e76:	f003 feb1 	bl	8004bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7a:	231c      	movs	r3, #28
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	0018      	movs	r0, r3
 8000e80:	2310      	movs	r3, #16
 8000e82:	001a      	movs	r2, r3
 8000e84:	2100      	movs	r1, #0
 8000e86:	f003 fea9 	bl	8004bdc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	231c      	movs	r3, #28
 8000e90:	001a      	movs	r2, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	f003 fea2 	bl	8004bdc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000e98:	0021      	movs	r1, r4
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2222      	movs	r2, #34	@ 0x22
 8000e9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2210      	movs	r2, #16
 8000eb0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f002 f8fc 	bl	80030b8 <HAL_RCC_OscConfig>
 8000ec0:	1e03      	subs	r3, r0, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000ec4:	f000 f97c 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec8:	211c      	movs	r1, #28
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f002 fc6c 	bl	80037c4 <HAL_RCC_ClockConfig>
 8000eec:	1e03      	subs	r3, r0, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ef0:	f000 f966 	bl	80011c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ef4:	003b      	movs	r3, r7
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000efa:	003b      	movs	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f00:	003b      	movs	r3, r7
 8000f02:	0018      	movs	r0, r3
 8000f04:	f002 fdaa 	bl	8003a5c <HAL_RCCEx_PeriphCLKConfig>
 8000f08:	1e03      	subs	r3, r0, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f0c:	f000 f958 	bl	80011c0 <Error_Handler>
  }
}
 8000f10:	46c0      	nop			@ (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b019      	add	sp, #100	@ 0x64
 8000f16:	bd90      	pop	{r4, r7, pc}

08000f18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <MX_I2C1_Init+0x74>)
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f90 <MX_I2C1_Init+0x78>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <MX_I2C1_Init+0x74>)
 8000f24:	4a1b      	ldr	r2, [pc, #108]	@ (8000f94 <MX_I2C1_Init+0x7c>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <MX_I2C1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <MX_I2C1_Init+0x74>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <MX_I2C1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <MX_I2C1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_I2C1_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_I2C1_Init+0x74>)
 8000f54:	0018      	movs	r0, r3
 8000f56:	f000 fde5 	bl	8001b24 <HAL_I2C_Init>
 8000f5a:	1e03      	subs	r3, r0, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f5e:	f000 f92f 	bl	80011c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <MX_I2C1_Init+0x74>)
 8000f64:	2100      	movs	r1, #0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f002 f80e 	bl	8002f88 <HAL_I2CEx_ConfigAnalogFilter>
 8000f6c:	1e03      	subs	r3, r0, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f70:	f000 f926 	bl	80011c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <MX_I2C1_Init+0x74>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f002 f851 	bl	8003020 <HAL_I2CEx_ConfigDigitalFilter>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d001      	beq.n	8000f86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f000 f91d 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000028 	.word	0x20000028
 8000f90:	40005400 	.word	0x40005400
 8000f94:	2000090e 	.word	0x2000090e

08000f98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <MX_SPI2_Init+0x74>)
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001010 <MX_SPI2_Init+0x78>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <MX_SPI2_Init+0x74>)
 8000fa4:	2282      	movs	r2, #130	@ 0x82
 8000fa6:	0052      	lsls	r2, r2, #1
 8000fa8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_SPI2_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	@ (800100c <MX_SPI2_Init+0x74>)
 8000fb2:	22e0      	movs	r2, #224	@ 0xe0
 8000fb4:	00d2      	lsls	r2, r2, #3
 8000fb6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_SPI2_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <MX_SPI2_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	@ (800100c <MX_SPI2_Init+0x74>)
 8000fc6:	2280      	movs	r2, #128	@ 0x80
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <MX_SPI2_Init+0x74>)
 8000fce:	2208      	movs	r2, #8
 8000fd0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <MX_SPI2_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_SPI2_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <MX_SPI2_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_SPI2_Init+0x74>)
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <MX_SPI2_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <MX_SPI2_Init+0x74>)
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ff6:	4b05      	ldr	r3, [pc, #20]	@ (800100c <MX_SPI2_Init+0x74>)
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f002 fe2d 	bl	8003c58 <HAL_SPI_Init>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d001      	beq.n	8001006 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001002:	f000 f8dd 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000007c 	.word	0x2000007c
 8001010:	40003800 	.word	0x40003800

08001014 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	2308      	movs	r3, #8
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	0018      	movs	r0, r3
 8001020:	2310      	movs	r3, #16
 8001022:	001a      	movs	r2, r3
 8001024:	2100      	movs	r1, #0
 8001026:	f003 fdd9 	bl	8004bdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102a:	003b      	movs	r3, r7
 800102c:	0018      	movs	r0, r3
 800102e:	2308      	movs	r3, #8
 8001030:	001a      	movs	r2, r3
 8001032:	2100      	movs	r1, #0
 8001034:	f003 fdd2 	bl	8004bdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <MX_TIM1_Init+0xa4>)
 800103a:	4a20      	ldr	r2, [pc, #128]	@ (80010bc <MX_TIM1_Init+0xa8>)
 800103c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3839;
 800103e:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <MX_TIM1_Init+0xa4>)
 8001040:	4a1f      	ldr	r2, [pc, #124]	@ (80010c0 <MX_TIM1_Init+0xac>)
 8001042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <MX_TIM1_Init+0xa4>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 800104a:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <MX_TIM1_Init+0xa4>)
 800104c:	4a1d      	ldr	r2, [pc, #116]	@ (80010c4 <MX_TIM1_Init+0xb0>)
 800104e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <MX_TIM1_Init+0xa4>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001056:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <MX_TIM1_Init+0xa4>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <MX_TIM1_Init+0xa4>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <MX_TIM1_Init+0xa4>)
 8001064:	0018      	movs	r0, r3
 8001066:	f003 f985 	bl	8004374 <HAL_TIM_Base_Init>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800106e:	f000 f8a7 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001072:	2108      	movs	r1, #8
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2280      	movs	r2, #128	@ 0x80
 8001078:	0152      	lsls	r2, r2, #5
 800107a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800107c:	187a      	adds	r2, r7, r1
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <MX_TIM1_Init+0xa4>)
 8001080:	0011      	movs	r1, r2
 8001082:	0018      	movs	r0, r3
 8001084:	f003 fb2e 	bl	80046e4 <HAL_TIM_ConfigClockSource>
 8001088:	1e03      	subs	r3, r0, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800108c:	f000 f898 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001090:	003b      	movs	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001096:	003b      	movs	r3, r7
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800109c:	003a      	movs	r2, r7
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_TIM1_Init+0xa4>)
 80010a0:	0011      	movs	r1, r2
 80010a2:	0018      	movs	r0, r3
 80010a4:	f003 fd2c 	bl	8004b00 <HAL_TIMEx_MasterConfigSynchronization>
 80010a8:	1e03      	subs	r3, r0, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80010ac:	f000 f888 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b006      	add	sp, #24
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000e0 	.word	0x200000e0
 80010bc:	40012c00 	.word	0x40012c00
 80010c0:	00000eff 	.word	0x00000eff
 80010c4:	0000c34f 	.word	0x0000c34f

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	240c      	movs	r4, #12
 80010d0:	193b      	adds	r3, r7, r4
 80010d2:	0018      	movs	r0, r3
 80010d4:	2314      	movs	r3, #20
 80010d6:	001a      	movs	r2, r3
 80010d8:	2100      	movs	r1, #0
 80010da:	f003 fd7f 	bl	8004bdc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010de:	4b36      	ldr	r3, [pc, #216]	@ (80011b8 <MX_GPIO_Init+0xf0>)
 80010e0:	695a      	ldr	r2, [r3, #20]
 80010e2:	4b35      	ldr	r3, [pc, #212]	@ (80011b8 <MX_GPIO_Init+0xf0>)
 80010e4:	2180      	movs	r1, #128	@ 0x80
 80010e6:	03c9      	lsls	r1, r1, #15
 80010e8:	430a      	orrs	r2, r1
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	4b32      	ldr	r3, [pc, #200]	@ (80011b8 <MX_GPIO_Init+0xf0>)
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	03db      	lsls	r3, r3, #15
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b2f      	ldr	r3, [pc, #188]	@ (80011b8 <MX_GPIO_Init+0xf0>)
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <MX_GPIO_Init+0xf0>)
 8001100:	2180      	movs	r1, #128	@ 0x80
 8001102:	02c9      	lsls	r1, r1, #11
 8001104:	430a      	orrs	r2, r1
 8001106:	615a      	str	r2, [r3, #20]
 8001108:	4b2b      	ldr	r3, [pc, #172]	@ (80011b8 <MX_GPIO_Init+0xf0>)
 800110a:	695a      	ldr	r2, [r3, #20]
 800110c:	2380      	movs	r3, #128	@ 0x80
 800110e:	02db      	lsls	r3, r3, #11
 8001110:	4013      	ands	r3, r2
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <MX_GPIO_Init+0xf0>)
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <MX_GPIO_Init+0xf0>)
 800111c:	2180      	movs	r1, #128	@ 0x80
 800111e:	0289      	lsls	r1, r1, #10
 8001120:	430a      	orrs	r2, r1
 8001122:	615a      	str	r2, [r3, #20]
 8001124:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <MX_GPIO_Init+0xf0>)
 8001126:	695a      	ldr	r2, [r3, #20]
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	029b      	lsls	r3, r3, #10
 800112c:	4013      	ands	r3, r2
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|RG_STROBE_Pin, GPIO_PIN_RESET);
 8001132:	2398      	movs	r3, #152	@ 0x98
 8001134:	01db      	lsls	r3, r3, #7
 8001136:	4821      	ldr	r0, [pc, #132]	@ (80011bc <MX_GPIO_Init+0xf4>)
 8001138:	2200      	movs	r2, #0
 800113a:	0019      	movs	r1, r3
 800113c:	f000 fcd4 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001140:	2380      	movs	r3, #128	@ 0x80
 8001142:	015b      	lsls	r3, r3, #5
 8001144:	481d      	ldr	r0, [pc, #116]	@ (80011bc <MX_GPIO_Init+0xf4>)
 8001146:	2201      	movs	r2, #1
 8001148:	0019      	movs	r1, r3
 800114a:	f000 fccd 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800114e:	23e0      	movs	r3, #224	@ 0xe0
 8001150:	00d9      	lsls	r1, r3, #3
 8001152:	2390      	movs	r3, #144	@ 0x90
 8001154:	05db      	lsls	r3, r3, #23
 8001156:	2200      	movs	r2, #0
 8001158:	0018      	movs	r0, r3
 800115a:	f000 fcc5 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 PB12 RG_STROBE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|RG_STROBE_Pin;
 800115e:	193b      	adds	r3, r7, r4
 8001160:	22b8      	movs	r2, #184	@ 0xb8
 8001162:	01d2      	lsls	r2, r2, #7
 8001164:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	193b      	adds	r3, r7, r4
 8001168:	2201      	movs	r2, #1
 800116a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	193b      	adds	r3, r7, r4
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	193b      	adds	r3, r7, r4
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	193b      	adds	r3, r7, r4
 800117a:	4a10      	ldr	r2, [pc, #64]	@ (80011bc <MX_GPIO_Init+0xf4>)
 800117c:	0019      	movs	r1, r3
 800117e:	0010      	movs	r0, r2
 8001180:	f000 fb3a 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001184:	0021      	movs	r1, r4
 8001186:	187b      	adds	r3, r7, r1
 8001188:	22e0      	movs	r2, #224	@ 0xe0
 800118a:	00d2      	lsls	r2, r2, #3
 800118c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2201      	movs	r2, #1
 8001192:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	187a      	adds	r2, r7, r1
 80011a2:	2390      	movs	r3, #144	@ 0x90
 80011a4:	05db      	lsls	r3, r3, #23
 80011a6:	0011      	movs	r1, r2
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 fb25 	bl	80017f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b009      	add	sp, #36	@ 0x24
 80011b4:	bd90      	pop	{r4, r7, pc}
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000400 	.word	0x48000400

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	e7fd      	b.n	80011c8 <Error_Handler+0x8>

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <HAL_MspInit+0x44>)
 80011d4:	699a      	ldr	r2, [r3, #24]
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_MspInit+0x44>)
 80011d8:	2101      	movs	r1, #1
 80011da:	430a      	orrs	r2, r1
 80011dc:	619a      	str	r2, [r3, #24]
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <HAL_MspInit+0x44>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	2201      	movs	r2, #1
 80011e4:	4013      	ands	r3, r2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <HAL_MspInit+0x44>)
 80011ec:	69da      	ldr	r2, [r3, #28]
 80011ee:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_MspInit+0x44>)
 80011f0:	2180      	movs	r1, #128	@ 0x80
 80011f2:	0549      	lsls	r1, r1, #21
 80011f4:	430a      	orrs	r2, r1
 80011f6:	61da      	str	r2, [r3, #28]
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <HAL_MspInit+0x44>)
 80011fa:	69da      	ldr	r2, [r3, #28]
 80011fc:	2380      	movs	r3, #128	@ 0x80
 80011fe:	055b      	lsls	r3, r3, #21
 8001200:	4013      	ands	r3, r2
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b08b      	sub	sp, #44	@ 0x2c
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	2414      	movs	r4, #20
 800121e:	193b      	adds	r3, r7, r4
 8001220:	0018      	movs	r0, r3
 8001222:	2314      	movs	r3, #20
 8001224:	001a      	movs	r2, r3
 8001226:	2100      	movs	r1, #0
 8001228:	f003 fcd8 	bl	8004bdc <memset>
  if(hi2c->Instance==I2C1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a20      	ldr	r2, [pc, #128]	@ (80012b4 <HAL_I2C_MspInit+0xa0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d13a      	bne.n	80012ac <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	    __HAL_RCC_I2C1_CLK_ENABLE();
 8001236:	4b20      	ldr	r3, [pc, #128]	@ (80012b8 <HAL_I2C_MspInit+0xa4>)
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <HAL_I2C_MspInit+0xa4>)
 800123c:	2180      	movs	r1, #128	@ 0x80
 800123e:	0389      	lsls	r1, r1, #14
 8001240:	430a      	orrs	r2, r1
 8001242:	61da      	str	r2, [r3, #28]
 8001244:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <HAL_I2C_MspInit+0xa4>)
 8001246:	69da      	ldr	r2, [r3, #28]
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	039b      	lsls	r3, r3, #14
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <HAL_I2C_MspInit+0xa4>)
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <HAL_I2C_MspInit+0xa4>)
 8001258:	2180      	movs	r1, #128	@ 0x80
 800125a:	02c9      	lsls	r1, r1, #11
 800125c:	430a      	orrs	r2, r1
 800125e:	615a      	str	r2, [r3, #20]
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <HAL_I2C_MspInit+0xa4>)
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	2380      	movs	r3, #128	@ 0x80
 8001266:	02db      	lsls	r3, r3, #11
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800126e:	193b      	adds	r3, r7, r4
 8001270:	22c0      	movs	r2, #192	@ 0xc0
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001276:	0021      	movs	r1, r4
 8001278:	187b      	adds	r3, r7, r1
 800127a:	2212      	movs	r2, #18
 800127c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	187b      	adds	r3, r7, r1
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001284:	187b      	adds	r3, r7, r1
 8001286:	2203      	movs	r2, #3
 8001288:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800128a:	187b      	adds	r3, r7, r1
 800128c:	2201      	movs	r2, #1
 800128e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	187b      	adds	r3, r7, r1
 8001292:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <HAL_I2C_MspInit+0xa8>)
 8001294:	0019      	movs	r1, r3
 8001296:	0010      	movs	r0, r2
 8001298:	f000 faae 	bl	80017f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2017      	movs	r0, #23
 80012a2:	f000 fa25 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80012a6:	2017      	movs	r0, #23
 80012a8:	f000 fa37 	bl	800171a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012ac:	46c0      	nop			@ (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b00b      	add	sp, #44	@ 0x2c
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	40005400 	.word	0x40005400
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000400 	.word	0x48000400

080012c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b08b      	sub	sp, #44	@ 0x2c
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	2414      	movs	r4, #20
 80012ca:	193b      	adds	r3, r7, r4
 80012cc:	0018      	movs	r0, r3
 80012ce:	2314      	movs	r3, #20
 80012d0:	001a      	movs	r2, r3
 80012d2:	2100      	movs	r1, #0
 80012d4:	f003 fc82 	bl	8004bdc <memset>
  if(hspi->Instance==SPI2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001350 <HAL_SPI_MspInit+0x90>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d132      	bne.n	8001348 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <HAL_SPI_MspInit+0x94>)
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <HAL_SPI_MspInit+0x94>)
 80012e8:	2180      	movs	r1, #128	@ 0x80
 80012ea:	01c9      	lsls	r1, r1, #7
 80012ec:	430a      	orrs	r2, r1
 80012ee:	61da      	str	r2, [r3, #28]
 80012f0:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <HAL_SPI_MspInit+0x94>)
 80012f2:	69da      	ldr	r2, [r3, #28]
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	01db      	lsls	r3, r3, #7
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <HAL_SPI_MspInit+0x94>)
 8001300:	695a      	ldr	r2, [r3, #20]
 8001302:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <HAL_SPI_MspInit+0x94>)
 8001304:	2180      	movs	r1, #128	@ 0x80
 8001306:	02c9      	lsls	r1, r1, #11
 8001308:	430a      	orrs	r2, r1
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <HAL_SPI_MspInit+0x94>)
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	2380      	movs	r3, #128	@ 0x80
 8001312:	02db      	lsls	r3, r3, #11
 8001314:	4013      	ands	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800131a:	193b      	adds	r3, r7, r4
 800131c:	22a0      	movs	r2, #160	@ 0xa0
 800131e:	0212      	lsls	r2, r2, #8
 8001320:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	0021      	movs	r1, r4
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2202      	movs	r2, #2
 8001328:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2203      	movs	r2, #3
 8001334:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	187b      	adds	r3, r7, r1
 800133e:	4a06      	ldr	r2, [pc, #24]	@ (8001358 <HAL_SPI_MspInit+0x98>)
 8001340:	0019      	movs	r1, r3
 8001342:	0010      	movs	r0, r2
 8001344:	f000 fa58 	bl	80017f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001348:	46c0      	nop			@ (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b00b      	add	sp, #44	@ 0x2c
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	40003800 	.word	0x40003800
 8001354:	40021000 	.word	0x40021000
 8001358:	48000400 	.word	0x48000400

0800135c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0e      	ldr	r2, [pc, #56]	@ (80013a4 <HAL_TIM_Base_MspInit+0x48>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d115      	bne.n	800139a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001374:	2180      	movs	r1, #128	@ 0x80
 8001376:	0109      	lsls	r1, r1, #4
 8001378:	430a      	orrs	r2, r1
 800137a:	619a      	str	r2, [r3, #24]
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <HAL_TIM_Base_MspInit+0x4c>)
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	200d      	movs	r0, #13
 8001390:	f000 f9ae 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001394:	200d      	movs	r0, #13
 8001396:	f000 f9c0 	bl	800171a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b004      	add	sp, #16
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	40012c00 	.word	0x40012c00
 80013a8:	40021000 	.word	0x40021000

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b0:	46c0      	nop			@ (mov r8, r8)
 80013b2:	e7fd      	b.n	80013b0 <NMI_Handler+0x4>

080013b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b8:	46c0      	nop			@ (mov r8, r8)
 80013ba:	e7fd      	b.n	80013b8 <HardFault_Handler+0x4>

080013bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013c0:	46c0      	nop			@ (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d4:	f000 f8a0 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d8:	46c0      	nop			@ (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80013e6:	0018      	movs	r0, r3
 80013e8:	f003 f866 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80013ec:	46c0      	nop			@ (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	200000e0 	.word	0x200000e0

080013f8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <I2C1_IRQHandler+0x2c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	23e0      	movs	r3, #224	@ 0xe0
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	4013      	ands	r3, r2
 8001408:	d004      	beq.n	8001414 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <I2C1_IRQHandler+0x2c>)
 800140c:	0018      	movs	r0, r3
 800140e:	f000 fd6d 	bl	8001eec <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001412:	e003      	b.n	800141c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001414:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <I2C1_IRQHandler+0x2c>)
 8001416:	0018      	movs	r0, r3
 8001418:	f000 fd4e 	bl	8001eb8 <HAL_I2C_EV_IRQHandler>
}
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			@ (mov r8, r8)
 8001424:	20000028 	.word	0x20000028

08001428 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800142c:	46c0      	nop			@ (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001434:	480d      	ldr	r0, [pc, #52]	@ (800146c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001436:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001438:	f7ff fff6 	bl	8001428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800143c:	480c      	ldr	r0, [pc, #48]	@ (8001470 <LoopForever+0x6>)
  ldr r1, =_edata
 800143e:	490d      	ldr	r1, [pc, #52]	@ (8001474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001440:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <LoopForever+0xe>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001454:	4c0a      	ldr	r4, [pc, #40]	@ (8001480 <LoopForever+0x16>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001462:	f003 fbc3 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001466:	f7ff fca9 	bl	8000dbc <main>

0800146a <LoopForever>:

LoopForever:
    b LoopForever
 800146a:	e7fe      	b.n	800146a <LoopForever>
  ldr   r0, =_estack
 800146c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001478:	08004d40 	.word	0x08004d40
  ldr r2, =_sbss
 800147c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001480:	2000014c 	.word	0x2000014c

08001484 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC1_COMP_IRQHandler>
	...

08001488 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148c:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <HAL_Init+0x24>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_Init+0x24>)
 8001492:	2110      	movs	r1, #16
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 f809 	bl	80014b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149e:	f7ff fe95 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	40022000 	.word	0x40022000

080014b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b8:	4b14      	ldr	r3, [pc, #80]	@ (800150c <HAL_InitTick+0x5c>)
 80014ba:	681c      	ldr	r4, [r3, #0]
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <HAL_InitTick+0x60>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	0019      	movs	r1, r3
 80014c2:	23fa      	movs	r3, #250	@ 0xfa
 80014c4:	0098      	lsls	r0, r3, #2
 80014c6:	f7fe fe1f 	bl	8000108 <__udivsi3>
 80014ca:	0003      	movs	r3, r0
 80014cc:	0019      	movs	r1, r3
 80014ce:	0020      	movs	r0, r4
 80014d0:	f7fe fe1a 	bl	8000108 <__udivsi3>
 80014d4:	0003      	movs	r3, r0
 80014d6:	0018      	movs	r0, r3
 80014d8:	f000 f92f 	bl	800173a <HAL_SYSTICK_Config>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d001      	beq.n	80014e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e00f      	b.n	8001504 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d80b      	bhi.n	8001502 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	2301      	movs	r3, #1
 80014ee:	425b      	negs	r3, r3
 80014f0:	2200      	movs	r2, #0
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 f8fc 	bl	80016f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_InitTick+0x64>)
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b003      	add	sp, #12
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20000008 	.word	0x20000008
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <HAL_IncTick+0x1c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	001a      	movs	r2, r3
 8001522:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <HAL_IncTick+0x20>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	18d2      	adds	r2, r2, r3
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <HAL_IncTick+0x20>)
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	46c0      	nop			@ (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	20000008 	.word	0x20000008
 8001538:	20000148 	.word	0x20000148

0800153c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b02      	ldr	r3, [pc, #8]	@ (800154c <HAL_GetTick+0x10>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	20000148 	.word	0x20000148

08001550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff fff0 	bl	800153c <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3301      	adds	r3, #1
 8001568:	d005      	beq.n	8001576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <HAL_Delay+0x44>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	001a      	movs	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	189b      	adds	r3, r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	f7ff ffe0 	bl	800153c <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	429a      	cmp	r2, r3
 8001586:	d8f7      	bhi.n	8001578 <HAL_Delay+0x28>
  {
  }
}
 8001588:	46c0      	nop			@ (mov r8, r8)
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b004      	add	sp, #16
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	20000008 	.word	0x20000008

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	0002      	movs	r2, r0
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80015aa:	d809      	bhi.n	80015c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ac:	1dfb      	adds	r3, r7, #7
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	001a      	movs	r2, r3
 80015b2:	231f      	movs	r3, #31
 80015b4:	401a      	ands	r2, r3
 80015b6:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <__NVIC_EnableIRQ+0x30>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	4091      	lsls	r1, r2
 80015bc:	000a      	movs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
  }
}
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b002      	add	sp, #8
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	e000e100 	.word	0xe000e100

080015cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	0002      	movs	r2, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b7f      	cmp	r3, #127	@ 0x7f
 80015e0:	d828      	bhi.n	8001634 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e2:	4a2f      	ldr	r2, [pc, #188]	@ (80016a0 <__NVIC_SetPriority+0xd4>)
 80015e4:	1dfb      	adds	r3, r7, #7
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	33c0      	adds	r3, #192	@ 0xc0
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	589b      	ldr	r3, [r3, r2]
 80015f2:	1dfa      	adds	r2, r7, #7
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	0011      	movs	r1, r2
 80015f8:	2203      	movs	r2, #3
 80015fa:	400a      	ands	r2, r1
 80015fc:	00d2      	lsls	r2, r2, #3
 80015fe:	21ff      	movs	r1, #255	@ 0xff
 8001600:	4091      	lsls	r1, r2
 8001602:	000a      	movs	r2, r1
 8001604:	43d2      	mvns	r2, r2
 8001606:	401a      	ands	r2, r3
 8001608:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	019b      	lsls	r3, r3, #6
 800160e:	22ff      	movs	r2, #255	@ 0xff
 8001610:	401a      	ands	r2, r3
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	0018      	movs	r0, r3
 8001618:	2303      	movs	r3, #3
 800161a:	4003      	ands	r3, r0
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001620:	481f      	ldr	r0, [pc, #124]	@ (80016a0 <__NVIC_SetPriority+0xd4>)
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b25b      	sxtb	r3, r3
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	430a      	orrs	r2, r1
 800162c:	33c0      	adds	r3, #192	@ 0xc0
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001632:	e031      	b.n	8001698 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001634:	4a1b      	ldr	r2, [pc, #108]	@ (80016a4 <__NVIC_SetPriority+0xd8>)
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	0019      	movs	r1, r3
 800163c:	230f      	movs	r3, #15
 800163e:	400b      	ands	r3, r1
 8001640:	3b08      	subs	r3, #8
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3306      	adds	r3, #6
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	18d3      	adds	r3, r2, r3
 800164a:	3304      	adds	r3, #4
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1dfa      	adds	r2, r7, #7
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	0011      	movs	r1, r2
 8001654:	2203      	movs	r2, #3
 8001656:	400a      	ands	r2, r1
 8001658:	00d2      	lsls	r2, r2, #3
 800165a:	21ff      	movs	r1, #255	@ 0xff
 800165c:	4091      	lsls	r1, r2
 800165e:	000a      	movs	r2, r1
 8001660:	43d2      	mvns	r2, r2
 8001662:	401a      	ands	r2, r3
 8001664:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	019b      	lsls	r3, r3, #6
 800166a:	22ff      	movs	r2, #255	@ 0xff
 800166c:	401a      	ands	r2, r3
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	0018      	movs	r0, r3
 8001674:	2303      	movs	r3, #3
 8001676:	4003      	ands	r3, r0
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800167c:	4809      	ldr	r0, [pc, #36]	@ (80016a4 <__NVIC_SetPriority+0xd8>)
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	001c      	movs	r4, r3
 8001684:	230f      	movs	r3, #15
 8001686:	4023      	ands	r3, r4
 8001688:	3b08      	subs	r3, #8
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	430a      	orrs	r2, r1
 800168e:	3306      	adds	r3, #6
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	18c3      	adds	r3, r0, r3
 8001694:	3304      	adds	r3, #4
 8001696:	601a      	str	r2, [r3, #0]
}
 8001698:	46c0      	nop			@ (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b003      	add	sp, #12
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	e000e100 	.word	0xe000e100
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	1e5a      	subs	r2, r3, #1
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	045b      	lsls	r3, r3, #17
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d301      	bcc.n	80016c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016bc:	2301      	movs	r3, #1
 80016be:	e010      	b.n	80016e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c0:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <SysTick_Config+0x44>)
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	3a01      	subs	r2, #1
 80016c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c8:	2301      	movs	r3, #1
 80016ca:	425b      	negs	r3, r3
 80016cc:	2103      	movs	r1, #3
 80016ce:	0018      	movs	r0, r3
 80016d0:	f7ff ff7c 	bl	80015cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <SysTick_Config+0x44>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016da:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <SysTick_Config+0x44>)
 80016dc:	2207      	movs	r2, #7
 80016de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	e000e010 	.word	0xe000e010

080016f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	210f      	movs	r1, #15
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	1c02      	adds	r2, r0, #0
 8001700:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	187b      	adds	r3, r7, r1
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b25b      	sxtb	r3, r3
 800170a:	0011      	movs	r1, r2
 800170c:	0018      	movs	r0, r3
 800170e:	f7ff ff5d 	bl	80015cc <__NVIC_SetPriority>
}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b004      	add	sp, #16
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	0002      	movs	r2, r0
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001726:	1dfb      	adds	r3, r7, #7
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b25b      	sxtb	r3, r3
 800172c:	0018      	movs	r0, r3
 800172e:	f7ff ff33 	bl	8001598 <__NVIC_EnableIRQ>
}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b002      	add	sp, #8
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	0018      	movs	r0, r3
 8001746:	f7ff ffaf 	bl	80016a8 <SysTick_Config>
 800174a:	0003      	movs	r3, r0
}
 800174c:	0018      	movs	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800175c:	210f      	movs	r1, #15
 800175e:	187b      	adds	r3, r7, r1
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2221      	movs	r2, #33	@ 0x21
 8001768:	5c9b      	ldrb	r3, [r3, r2]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d006      	beq.n	800177e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2204      	movs	r2, #4
 8001774:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	e028      	b.n	80017d0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	210e      	movs	r1, #14
 800178a:	438a      	bics	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2101      	movs	r1, #1
 800179a:	438a      	bics	r2, r1
 800179c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a6:	2101      	movs	r1, #1
 80017a8:	4091      	lsls	r1, r2
 80017aa:	000a      	movs	r2, r1
 80017ac:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2221      	movs	r2, #33	@ 0x21
 80017b2:	2101      	movs	r1, #1
 80017b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2220      	movs	r2, #32
 80017ba:	2100      	movs	r1, #0
 80017bc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d004      	beq.n	80017d0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	0010      	movs	r0, r2
 80017ce:	4798      	blx	r3
    }
  }
  return status;
 80017d0:	230f      	movs	r3, #15
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	781b      	ldrb	r3, [r3, #0]
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b004      	add	sp, #16
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2221      	movs	r2, #33	@ 0x21
 80017ea:	5c9b      	ldrb	r3, [r3, r2]
 80017ec:	b2db      	uxtb	r3, r3
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b002      	add	sp, #8
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e155      	b.n	8001ab4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4091      	lsls	r1, r2
 8001812:	000a      	movs	r2, r1
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d100      	bne.n	8001820 <HAL_GPIO_Init+0x28>
 800181e:	e146      	b.n	8001aae <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2203      	movs	r2, #3
 8001826:	4013      	ands	r3, r2
 8001828:	2b01      	cmp	r3, #1
 800182a:	d005      	beq.n	8001838 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2203      	movs	r2, #3
 8001832:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001834:	2b02      	cmp	r3, #2
 8001836:	d130      	bne.n	800189a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	43da      	mvns	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800186e:	2201      	movs	r2, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	43da      	mvns	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	2201      	movs	r2, #1
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2203      	movs	r2, #3
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d017      	beq.n	80018d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	409a      	lsls	r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	43da      	mvns	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	409a      	lsls	r2, r3
 80018c8:	0013      	movs	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2203      	movs	r2, #3
 80018dc:	4013      	ands	r3, r2
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d123      	bne.n	800192a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	58d3      	ldr	r3, [r2, r3]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2207      	movs	r2, #7
 80018f4:	4013      	ands	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	409a      	lsls	r2, r3
 80018fc:	0013      	movs	r3, r2
 80018fe:	43da      	mvns	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2107      	movs	r1, #7
 800190e:	400b      	ands	r3, r1
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	409a      	lsls	r2, r3
 8001914:	0013      	movs	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	6939      	ldr	r1, [r7, #16]
 8001928:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	409a      	lsls	r2, r3
 8001938:	0013      	movs	r3, r2
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2203      	movs	r2, #3
 8001948:	401a      	ands	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	23c0      	movs	r3, #192	@ 0xc0
 8001964:	029b      	lsls	r3, r3, #10
 8001966:	4013      	ands	r3, r2
 8001968:	d100      	bne.n	800196c <HAL_GPIO_Init+0x174>
 800196a:	e0a0      	b.n	8001aae <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196c:	4b57      	ldr	r3, [pc, #348]	@ (8001acc <HAL_GPIO_Init+0x2d4>)
 800196e:	699a      	ldr	r2, [r3, #24]
 8001970:	4b56      	ldr	r3, [pc, #344]	@ (8001acc <HAL_GPIO_Init+0x2d4>)
 8001972:	2101      	movs	r1, #1
 8001974:	430a      	orrs	r2, r1
 8001976:	619a      	str	r2, [r3, #24]
 8001978:	4b54      	ldr	r3, [pc, #336]	@ (8001acc <HAL_GPIO_Init+0x2d4>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2201      	movs	r2, #1
 800197e:	4013      	ands	r3, r2
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001984:	4a52      	ldr	r2, [pc, #328]	@ (8001ad0 <HAL_GPIO_Init+0x2d8>)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	3302      	adds	r3, #2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	589b      	ldr	r3, [r3, r2]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2203      	movs	r2, #3
 8001996:	4013      	ands	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	220f      	movs	r2, #15
 800199c:	409a      	lsls	r2, r3
 800199e:	0013      	movs	r3, r2
 80019a0:	43da      	mvns	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	2390      	movs	r3, #144	@ 0x90
 80019ac:	05db      	lsls	r3, r3, #23
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d019      	beq.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a47      	ldr	r2, [pc, #284]	@ (8001ad4 <HAL_GPIO_Init+0x2dc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_GPIO_Init+0x1ea>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a46      	ldr	r2, [pc, #280]	@ (8001ad8 <HAL_GPIO_Init+0x2e0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00d      	beq.n	80019de <HAL_GPIO_Init+0x1e6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a45      	ldr	r2, [pc, #276]	@ (8001adc <HAL_GPIO_Init+0x2e4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d007      	beq.n	80019da <HAL_GPIO_Init+0x1e2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a44      	ldr	r2, [pc, #272]	@ (8001ae0 <HAL_GPIO_Init+0x2e8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d101      	bne.n	80019d6 <HAL_GPIO_Init+0x1de>
 80019d2:	2304      	movs	r3, #4
 80019d4:	e008      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019d6:	2305      	movs	r3, #5
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019da:	2303      	movs	r3, #3
 80019dc:	e004      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019de:	2302      	movs	r3, #2
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019e6:	2300      	movs	r3, #0
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	2103      	movs	r1, #3
 80019ec:	400a      	ands	r2, r1
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	4093      	lsls	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019f8:	4935      	ldr	r1, [pc, #212]	@ (8001ad0 <HAL_GPIO_Init+0x2d8>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a06:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	2380      	movs	r3, #128	@ 0x80
 8001a1c:	035b      	lsls	r3, r3, #13
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	2380      	movs	r3, #128	@ 0x80
 8001a46:	039b      	lsls	r3, r3, #14
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a54:	4b23      	ldr	r3, [pc, #140]	@ (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001a5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43da      	mvns	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	2380      	movs	r3, #128	@ 0x80
 8001a70:	029b      	lsls	r3, r3, #10
 8001a72:	4013      	ands	r3, r2
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001a84:	4b17      	ldr	r3, [pc, #92]	@ (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	025b      	lsls	r3, r3, #9
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	40da      	lsrs	r2, r3
 8001abc:	1e13      	subs	r3, r2, #0
 8001abe:	d000      	beq.n	8001ac2 <HAL_GPIO_Init+0x2ca>
 8001ac0:	e6a2      	b.n	8001808 <HAL_GPIO_Init+0x10>
  } 
}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	46c0      	nop			@ (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b006      	add	sp, #24
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	48000c00 	.word	0x48000c00
 8001ae0:	48001000 	.word	0x48001000
 8001ae4:	40010400 	.word	0x40010400

08001ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	0008      	movs	r0, r1
 8001af2:	0011      	movs	r1, r2
 8001af4:	1cbb      	adds	r3, r7, #2
 8001af6:	1c02      	adds	r2, r0, #0
 8001af8:	801a      	strh	r2, [r3, #0]
 8001afa:	1c7b      	adds	r3, r7, #1
 8001afc:	1c0a      	adds	r2, r1, #0
 8001afe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b00:	1c7b      	adds	r3, r7, #1
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b08:	1cbb      	adds	r3, r7, #2
 8001b0a:	881a      	ldrh	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b10:	e003      	b.n	8001b1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b12:	1cbb      	adds	r3, r7, #2
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b002      	add	sp, #8
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e082      	b.n	8001c3c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2241      	movs	r2, #65	@ 0x41
 8001b3a:	5c9b      	ldrb	r3, [r3, r2]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d107      	bne.n	8001b52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2240      	movs	r2, #64	@ 0x40
 8001b46:	2100      	movs	r1, #0
 8001b48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff fb61 	bl	8001214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2241      	movs	r2, #65	@ 0x41
 8001b56:	2124      	movs	r1, #36	@ 0x24
 8001b58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2101      	movs	r1, #1
 8001b66:	438a      	bics	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4934      	ldr	r1, [pc, #208]	@ (8001c44 <HAL_I2C_Init+0x120>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4931      	ldr	r1, [pc, #196]	@ (8001c48 <HAL_I2C_Init+0x124>)
 8001b84:	400a      	ands	r2, r1
 8001b86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d108      	bne.n	8001ba2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2180      	movs	r1, #128	@ 0x80
 8001b9a:	0209      	lsls	r1, r1, #8
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	e007      	b.n	8001bb2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2184      	movs	r1, #132	@ 0x84
 8001bac:	0209      	lsls	r1, r1, #8
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d104      	bne.n	8001bc4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2280      	movs	r2, #128	@ 0x80
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	491f      	ldr	r1, [pc, #124]	@ (8001c4c <HAL_I2C_Init+0x128>)
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	491a      	ldr	r1, [pc, #104]	@ (8001c48 <HAL_I2C_Init+0x124>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69d9      	ldr	r1, [r3, #28]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1a      	ldr	r2, [r3, #32]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2241      	movs	r2, #65	@ 0x41
 8001c28:	2120      	movs	r1, #32
 8001c2a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2242      	movs	r2, #66	@ 0x42
 8001c36:	2100      	movs	r1, #0
 8001c38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b002      	add	sp, #8
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	f0ffffff 	.word	0xf0ffffff
 8001c48:	ffff7fff 	.word	0xffff7fff
 8001c4c:	02008000 	.word	0x02008000

08001c50 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b089      	sub	sp, #36	@ 0x24
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	000c      	movs	r4, r1
 8001c5a:	0010      	movs	r0, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	230a      	movs	r3, #10
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	1c22      	adds	r2, r4, #0
 8001c64:	801a      	strh	r2, [r3, #0]
 8001c66:	2308      	movs	r3, #8
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	1c02      	adds	r2, r0, #0
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	1dbb      	adds	r3, r7, #6
 8001c70:	1c0a      	adds	r2, r1, #0
 8001c72:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2241      	movs	r2, #65	@ 0x41
 8001c78:	5c9b      	ldrb	r3, [r3, r2]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d000      	beq.n	8001c82 <HAL_I2C_Mem_Read+0x32>
 8001c80:	e110      	b.n	8001ea4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d004      	beq.n	8001c92 <HAL_I2C_Mem_Read+0x42>
 8001c88:	232c      	movs	r3, #44	@ 0x2c
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2280      	movs	r2, #128	@ 0x80
 8001c96:	0092      	lsls	r2, r2, #2
 8001c98:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e103      	b.n	8001ea6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2240      	movs	r2, #64	@ 0x40
 8001ca2:	5c9b      	ldrb	r3, [r3, r2]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_I2C_Mem_Read+0x5c>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e0fc      	b.n	8001ea6 <HAL_I2C_Mem_Read+0x256>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2240      	movs	r2, #64	@ 0x40
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cb4:	f7ff fc42 	bl	800153c <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	0219      	lsls	r1, r3, #8
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	2319      	movs	r3, #25
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f000 feef 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8001cce:	1e03      	subs	r3, r0, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0e7      	b.n	8001ea6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2241      	movs	r2, #65	@ 0x41
 8001cda:	2122      	movs	r1, #34	@ 0x22
 8001cdc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2242      	movs	r2, #66	@ 0x42
 8001ce2:	2140      	movs	r1, #64	@ 0x40
 8001ce4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	222c      	movs	r2, #44	@ 0x2c
 8001cf6:	18ba      	adds	r2, r7, r2
 8001cf8:	8812      	ldrh	r2, [r2, #0]
 8001cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d02:	1dbb      	adds	r3, r7, #6
 8001d04:	881c      	ldrh	r4, [r3, #0]
 8001d06:	2308      	movs	r3, #8
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	881a      	ldrh	r2, [r3, #0]
 8001d0c:	230a      	movs	r3, #10
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	8819      	ldrh	r1, [r3, #0]
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	0023      	movs	r3, r4
 8001d1e:	f000 fa77 	bl	8002210 <I2C_RequestMemoryRead>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2240      	movs	r2, #64	@ 0x40
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0b9      	b.n	8001ea6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2bff      	cmp	r3, #255	@ 0xff
 8001d3a:	d911      	bls.n	8001d60 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	22ff      	movs	r2, #255	@ 0xff
 8001d40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	045c      	lsls	r4, r3, #17
 8001d4c:	230a      	movs	r3, #10
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	8819      	ldrh	r1, [r3, #0]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	4b56      	ldr	r3, [pc, #344]	@ (8001eb0 <HAL_I2C_Mem_Read+0x260>)
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	0023      	movs	r3, r4
 8001d5a:	f001 f877 	bl	8002e4c <I2C_TransferConfig>
 8001d5e:	e012      	b.n	8001d86 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	2380      	movs	r3, #128	@ 0x80
 8001d72:	049c      	lsls	r4, r3, #18
 8001d74:	230a      	movs	r3, #10
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	8819      	ldrh	r1, [r3, #0]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	4b4c      	ldr	r3, [pc, #304]	@ (8001eb0 <HAL_I2C_Mem_Read+0x260>)
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	0023      	movs	r3, r4
 8001d82:	f001 f863 	bl	8002e4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	0013      	movs	r3, r2
 8001d90:	2200      	movs	r2, #0
 8001d92:	2104      	movs	r1, #4
 8001d94:	f000 fe8a 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8001d98:	1e03      	subs	r3, r0, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e082      	b.n	8001ea6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d03a      	beq.n	8001e52 <HAL_I2C_Mem_Read+0x202>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d136      	bne.n	8001e52 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	0013      	movs	r3, r2
 8001dee:	2200      	movs	r2, #0
 8001df0:	2180      	movs	r1, #128	@ 0x80
 8001df2:	f000 fe5b 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8001df6:	1e03      	subs	r3, r0, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e053      	b.n	8001ea6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2bff      	cmp	r3, #255	@ 0xff
 8001e06:	d911      	bls.n	8001e2c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	22ff      	movs	r2, #255	@ 0xff
 8001e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	2380      	movs	r3, #128	@ 0x80
 8001e16:	045c      	lsls	r4, r3, #17
 8001e18:	230a      	movs	r3, #10
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	8819      	ldrh	r1, [r3, #0]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	2300      	movs	r3, #0
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	0023      	movs	r3, r4
 8001e26:	f001 f811 	bl	8002e4c <I2C_TransferConfig>
 8001e2a:	e012      	b.n	8001e52 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	2380      	movs	r3, #128	@ 0x80
 8001e3e:	049c      	lsls	r4, r3, #18
 8001e40:	230a      	movs	r3, #10
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	8819      	ldrh	r1, [r3, #0]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	0023      	movs	r3, r4
 8001e4e:	f000 fffd 	bl	8002e4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d194      	bne.n	8001d86 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	0018      	movs	r0, r3
 8001e64:	f000 feb6 	bl	8002bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e68:	1e03      	subs	r3, r0, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e01a      	b.n	8001ea6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2220      	movs	r2, #32
 8001e76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	490c      	ldr	r1, [pc, #48]	@ (8001eb4 <HAL_I2C_Mem_Read+0x264>)
 8001e84:	400a      	ands	r2, r1
 8001e86:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2241      	movs	r2, #65	@ 0x41
 8001e8c:	2120      	movs	r1, #32
 8001e8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2242      	movs	r2, #66	@ 0x42
 8001e94:	2100      	movs	r1, #0
 8001e96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2240      	movs	r2, #64	@ 0x40
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e000      	b.n	8001ea6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001ea4:	2302      	movs	r3, #2
  }
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b007      	add	sp, #28
 8001eac:	bd90      	pop	{r4, r7, pc}
 8001eae:	46c0      	nop			@ (mov r8, r8)
 8001eb0:	80002400 	.word	0x80002400
 8001eb4:	fe00e800 	.word	0xfe00e800

08001eb8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	68f9      	ldr	r1, [r7, #12]
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	4798      	blx	r3
  }
}
 8001ee4:	46c0      	nop			@ (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b004      	add	sp, #16
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	2380      	movs	r3, #128	@ 0x80
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d00e      	beq.n	8001f2c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2280      	movs	r2, #128	@ 0x80
 8001f12:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f14:	d00a      	beq.n	8001f2c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2280      	movs	r2, #128	@ 0x80
 8001f28:	0052      	lsls	r2, r2, #1
 8001f2a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	2380      	movs	r3, #128	@ 0x80
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4013      	ands	r3, r2
 8001f34:	d00e      	beq.n	8001f54 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2280      	movs	r2, #128	@ 0x80
 8001f3a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f3c:	d00a      	beq.n	8001f54 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	2208      	movs	r2, #8
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2280      	movs	r2, #128	@ 0x80
 8001f50:	00d2      	lsls	r2, r2, #3
 8001f52:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	2380      	movs	r3, #128	@ 0x80
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d00e      	beq.n	8001f7c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2280      	movs	r2, #128	@ 0x80
 8001f62:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f64:	d00a      	beq.n	8001f7c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2280      	movs	r2, #128	@ 0x80
 8001f78:	0092      	lsls	r2, r2, #2
 8001f7a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	220b      	movs	r2, #11
 8001f86:	4013      	ands	r3, r2
 8001f88:	d005      	beq.n	8001f96 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	0011      	movs	r1, r2
 8001f90:	0018      	movs	r0, r3
 8001f92:	f000 fc1f 	bl	80027d4 <I2C_ITError>
  }
}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b006      	add	sp, #24
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b002      	add	sp, #8
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fb6:	46c0      	nop			@ (mov r8, r8)
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b002      	add	sp, #8
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	0008      	movs	r0, r1
 8001fc8:	0011      	movs	r1, r2
 8001fca:	1cfb      	adds	r3, r7, #3
 8001fcc:	1c02      	adds	r2, r0, #0
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	003b      	movs	r3, r7
 8001fd2:	1c0a      	adds	r2, r1, #0
 8001fd4:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b002      	add	sp, #8
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b002      	add	sp, #8
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b002      	add	sp, #8
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002020:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2240      	movs	r2, #64	@ 0x40
 800202a:	5c9b      	ldrb	r3, [r3, r2]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <I2C_Slave_ISR_IT+0x24>
 8002030:	2302      	movs	r3, #2
 8002032:	e0e6      	b.n	8002202 <I2C_Slave_ISR_IT+0x1f2>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2240      	movs	r2, #64	@ 0x40
 8002038:	2101      	movs	r1, #1
 800203a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	2220      	movs	r2, #32
 8002040:	4013      	ands	r3, r2
 8002042:	d009      	beq.n	8002058 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800204a:	d005      	beq.n	8002058 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0011      	movs	r1, r2
 8002052:	0018      	movs	r0, r3
 8002054:	f000 fa46 	bl	80024e4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2210      	movs	r2, #16
 800205c:	4013      	ands	r3, r2
 800205e:	d052      	beq.n	8002106 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2210      	movs	r2, #16
 8002064:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002066:	d04e      	beq.n	8002106 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d12d      	bne.n	80020ce <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2241      	movs	r2, #65	@ 0x41
 8002076:	5c9b      	ldrb	r3, [r3, r2]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b28      	cmp	r3, #40	@ 0x28
 800207c:	d10b      	bne.n	8002096 <I2C_Slave_ISR_IT+0x86>
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	2380      	movs	r3, #128	@ 0x80
 8002082:	049b      	lsls	r3, r3, #18
 8002084:	429a      	cmp	r2, r3
 8002086:	d106      	bne.n	8002096 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	0011      	movs	r1, r2
 800208e:	0018      	movs	r0, r3
 8002090:	f000 fb48 	bl	8002724 <I2C_ITListenCplt>
 8002094:	e036      	b.n	8002104 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2241      	movs	r2, #65	@ 0x41
 800209a:	5c9b      	ldrb	r3, [r3, r2]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b29      	cmp	r3, #41	@ 0x29
 80020a0:	d110      	bne.n	80020c4 <I2C_Slave_ISR_IT+0xb4>
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	4a59      	ldr	r2, [pc, #356]	@ (800220c <I2C_Slave_ISR_IT+0x1fc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00c      	beq.n	80020c4 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2210      	movs	r2, #16
 80020b0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 fcb8 	bl	8002a2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 f9ad 	bl	800241c <I2C_ITSlaveSeqCplt>
 80020c2:	e01f      	b.n	8002104 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2210      	movs	r2, #16
 80020ca:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80020cc:	e091      	b.n	80021f2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2210      	movs	r2, #16
 80020d4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	2204      	movs	r2, #4
 80020dc:	431a      	orrs	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <I2C_Slave_ISR_IT+0xe4>
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	2380      	movs	r3, #128	@ 0x80
 80020ec:	045b      	lsls	r3, r3, #17
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d000      	beq.n	80020f4 <I2C_Slave_ISR_IT+0xe4>
 80020f2:	e07e      	b.n	80021f2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	0011      	movs	r1, r2
 80020fc:	0018      	movs	r0, r3
 80020fe:	f000 fb69 	bl	80027d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002102:	e076      	b.n	80021f2 <I2C_Slave_ISR_IT+0x1e2>
 8002104:	e075      	b.n	80021f2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2204      	movs	r2, #4
 800210a:	4013      	ands	r3, r2
 800210c:	d02f      	beq.n	800216e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2204      	movs	r2, #4
 8002112:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002114:	d02b      	beq.n	800216e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d018      	beq.n	8002152 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d14c      	bne.n	80021f6 <I2C_Slave_ISR_IT+0x1e6>
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	4a2b      	ldr	r2, [pc, #172]	@ (800220c <I2C_Slave_ISR_IT+0x1fc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d048      	beq.n	80021f6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	0018      	movs	r0, r3
 8002168:	f000 f958 	bl	800241c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800216c:	e043      	b.n	80021f6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2208      	movs	r2, #8
 8002172:	4013      	ands	r3, r2
 8002174:	d00a      	beq.n	800218c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2208      	movs	r2, #8
 800217a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800217c:	d006      	beq.n	800218c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	0011      	movs	r1, r2
 8002184:	0018      	movs	r0, r3
 8002186:	f000 f8a5 	bl	80022d4 <I2C_ITAddrCplt>
 800218a:	e035      	b.n	80021f8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2202      	movs	r2, #2
 8002190:	4013      	ands	r3, r2
 8002192:	d031      	beq.n	80021f8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800219a:	d02d      	beq.n	80021f8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d018      	beq.n	80021d8 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80021d6:	e00f      	b.n	80021f8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	2380      	movs	r3, #128	@ 0x80
 80021dc:	045b      	lsls	r3, r3, #17
 80021de:	429a      	cmp	r2, r3
 80021e0:	d002      	beq.n	80021e8 <I2C_Slave_ISR_IT+0x1d8>
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d107      	bne.n	80021f8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	0018      	movs	r0, r3
 80021ec:	f000 f916 	bl	800241c <I2C_ITSlaveSeqCplt>
 80021f0:	e002      	b.n	80021f8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	e000      	b.n	80021f8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80021f6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2240      	movs	r2, #64	@ 0x40
 80021fc:	2100      	movs	r1, #0
 80021fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b006      	add	sp, #24
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	ffff0000 	.word	0xffff0000

08002210 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	000c      	movs	r4, r1
 800221a:	0010      	movs	r0, r2
 800221c:	0019      	movs	r1, r3
 800221e:	250a      	movs	r5, #10
 8002220:	197b      	adds	r3, r7, r5
 8002222:	1c22      	adds	r2, r4, #0
 8002224:	801a      	strh	r2, [r3, #0]
 8002226:	2308      	movs	r3, #8
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	1c02      	adds	r2, r0, #0
 800222c:	801a      	strh	r2, [r3, #0]
 800222e:	1dbb      	adds	r3, r7, #6
 8002230:	1c0a      	adds	r2, r1, #0
 8002232:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002234:	1dbb      	adds	r3, r7, #6
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	197b      	adds	r3, r7, r5
 800223c:	8819      	ldrh	r1, [r3, #0]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	4b23      	ldr	r3, [pc, #140]	@ (80022d0 <I2C_RequestMemoryRead+0xc0>)
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2300      	movs	r3, #0
 8002246:	f000 fe01 	bl	8002e4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800224a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800224c:	6a39      	ldr	r1, [r7, #32]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	0018      	movs	r0, r3
 8002252:	f000 fc79 	bl	8002b48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002256:	1e03      	subs	r3, r0, #0
 8002258:	d001      	beq.n	800225e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e033      	b.n	80022c6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800225e:	1dbb      	adds	r3, r7, #6
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002266:	2308      	movs	r3, #8
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	629a      	str	r2, [r3, #40]	@ 0x28
 8002274:	e019      	b.n	80022aa <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002276:	2308      	movs	r3, #8
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	b29b      	uxth	r3, r3
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800228a:	6a39      	ldr	r1, [r7, #32]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	0018      	movs	r0, r3
 8002290:	f000 fc5a 	bl	8002b48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002294:	1e03      	subs	r3, r0, #0
 8002296:	d001      	beq.n	800229c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e014      	b.n	80022c6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800229c:	2308      	movs	r3, #8
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80022aa:	6a3a      	ldr	r2, [r7, #32]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	0013      	movs	r3, r2
 80022b4:	2200      	movs	r2, #0
 80022b6:	2140      	movs	r1, #64	@ 0x40
 80022b8:	f000 fbf8 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 80022bc:	1e03      	subs	r3, r0, #0
 80022be:	d001      	beq.n	80022c4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b004      	add	sp, #16
 80022cc:	bdb0      	pop	{r4, r5, r7, pc}
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	80002000 	.word	0x80002000

080022d4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2241      	movs	r2, #65	@ 0x41
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	001a      	movs	r2, r3
 80022e8:	2328      	movs	r3, #40	@ 0x28
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b28      	cmp	r3, #40	@ 0x28
 80022ee:	d000      	beq.n	80022f2 <I2C_ITAddrCplt+0x1e>
 80022f0:	e088      	b.n	8002404 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	250f      	movs	r5, #15
 80022fe:	197b      	adds	r3, r7, r5
 8002300:	2101      	movs	r1, #1
 8002302:	400a      	ands	r2, r1
 8002304:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	b29a      	uxth	r2, r3
 8002310:	200c      	movs	r0, #12
 8002312:	183b      	adds	r3, r7, r0
 8002314:	21fe      	movs	r1, #254	@ 0xfe
 8002316:	400a      	ands	r2, r1
 8002318:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	b29a      	uxth	r2, r3
 8002322:	240a      	movs	r4, #10
 8002324:	193b      	adds	r3, r7, r4
 8002326:	0592      	lsls	r2, r2, #22
 8002328:	0d92      	lsrs	r2, r2, #22
 800232a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	b29a      	uxth	r2, r3
 8002334:	2308      	movs	r3, #8
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	21fe      	movs	r1, #254	@ 0xfe
 800233a:	400a      	ands	r2, r1
 800233c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d148      	bne.n	80023d8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002346:	0021      	movs	r1, r4
 8002348:	187b      	adds	r3, r7, r1
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	09db      	lsrs	r3, r3, #7
 800234e:	b29a      	uxth	r2, r3
 8002350:	183b      	adds	r3, r7, r0
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	4053      	eors	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	001a      	movs	r2, r3
 800235a:	2306      	movs	r3, #6
 800235c:	4013      	ands	r3, r2
 800235e:	d120      	bne.n	80023a2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002360:	183b      	adds	r3, r7, r0
 8002362:	187a      	adds	r2, r7, r1
 8002364:	8812      	ldrh	r2, [r2, #0]
 8002366:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002376:	2b02      	cmp	r3, #2
 8002378:	d14c      	bne.n	8002414 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2208      	movs	r2, #8
 8002386:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2240      	movs	r2, #64	@ 0x40
 800238c:	2100      	movs	r1, #0
 800238e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002390:	183b      	adds	r3, r7, r0
 8002392:	881a      	ldrh	r2, [r3, #0]
 8002394:	197b      	adds	r3, r7, r5
 8002396:	7819      	ldrb	r1, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0018      	movs	r0, r3
 800239c:	f7ff fe0f 	bl	8001fbe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80023a0:	e038      	b.n	8002414 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80023a2:	240c      	movs	r4, #12
 80023a4:	193b      	adds	r3, r7, r4
 80023a6:	2208      	movs	r2, #8
 80023a8:	18ba      	adds	r2, r7, r2
 80023aa:	8812      	ldrh	r2, [r2, #0]
 80023ac:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023ae:	2380      	movs	r3, #128	@ 0x80
 80023b0:	021a      	lsls	r2, r3, #8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	0011      	movs	r1, r2
 80023b6:	0018      	movs	r0, r3
 80023b8:	f000 fd82 	bl	8002ec0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2240      	movs	r2, #64	@ 0x40
 80023c0:	2100      	movs	r1, #0
 80023c2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023c4:	193b      	adds	r3, r7, r4
 80023c6:	881a      	ldrh	r2, [r3, #0]
 80023c8:	230f      	movs	r3, #15
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	7819      	ldrb	r1, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7ff fdf4 	bl	8001fbe <HAL_I2C_AddrCallback>
}
 80023d6:	e01d      	b.n	8002414 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	021a      	lsls	r2, r3, #8
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	0011      	movs	r1, r2
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 fd6d 	bl	8002ec0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2240      	movs	r2, #64	@ 0x40
 80023ea:	2100      	movs	r1, #0
 80023ec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023ee:	230c      	movs	r3, #12
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	881a      	ldrh	r2, [r3, #0]
 80023f4:	230f      	movs	r3, #15
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	7819      	ldrb	r1, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7ff fdde 	bl	8001fbe <HAL_I2C_AddrCallback>
}
 8002402:	e007      	b.n	8002414 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2208      	movs	r2, #8
 800240a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2240      	movs	r2, #64	@ 0x40
 8002410:	2100      	movs	r1, #0
 8002412:	5499      	strb	r1, [r3, r2]
}
 8002414:	46c0      	nop			@ (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b004      	add	sp, #16
 800241a:	bdb0      	pop	{r4, r5, r7, pc}

0800241c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2242      	movs	r2, #66	@ 0x42
 8002430:	2100      	movs	r1, #0
 8002432:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	2380      	movs	r3, #128	@ 0x80
 8002438:	01db      	lsls	r3, r3, #7
 800243a:	4013      	ands	r3, r2
 800243c:	d008      	beq.n	8002450 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4924      	ldr	r1, [pc, #144]	@ (80024dc <I2C_ITSlaveSeqCplt+0xc0>)
 800244a:	400a      	ands	r2, r1
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e00c      	b.n	800246a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	2380      	movs	r3, #128	@ 0x80
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	4013      	ands	r3, r2
 8002458:	d007      	beq.n	800246a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	491e      	ldr	r1, [pc, #120]	@ (80024e0 <I2C_ITSlaveSeqCplt+0xc4>)
 8002466:	400a      	ands	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2241      	movs	r2, #65	@ 0x41
 800246e:	5c9b      	ldrb	r3, [r3, r2]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b29      	cmp	r3, #41	@ 0x29
 8002474:	d114      	bne.n	80024a0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2241      	movs	r2, #65	@ 0x41
 800247a:	2128      	movs	r1, #40	@ 0x28
 800247c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2221      	movs	r2, #33	@ 0x21
 8002482:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2101      	movs	r1, #1
 8002488:	0018      	movs	r0, r3
 800248a:	f000 fd19 	bl	8002ec0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2240      	movs	r2, #64	@ 0x40
 8002492:	2100      	movs	r1, #0
 8002494:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	0018      	movs	r0, r3
 800249a:	f7ff fd80 	bl	8001f9e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800249e:	e019      	b.n	80024d4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2241      	movs	r2, #65	@ 0x41
 80024a4:	5c9b      	ldrb	r3, [r3, r2]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80024aa:	d113      	bne.n	80024d4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2241      	movs	r2, #65	@ 0x41
 80024b0:	2128      	movs	r1, #40	@ 0x28
 80024b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2222      	movs	r2, #34	@ 0x22
 80024b8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2102      	movs	r1, #2
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 fcfe 	bl	8002ec0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2240      	movs	r2, #64	@ 0x40
 80024c8:	2100      	movs	r1, #0
 80024ca:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	0018      	movs	r0, r3
 80024d0:	f7ff fd6d 	bl	8001fae <HAL_I2C_SlaveRxCpltCallback>
}
 80024d4:	46c0      	nop			@ (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b004      	add	sp, #16
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	ffffbfff 	.word	0xffffbfff
 80024e0:	ffff7fff 	.word	0xffff7fff

080024e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80024fa:	200f      	movs	r0, #15
 80024fc:	183b      	adds	r3, r7, r0
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	2141      	movs	r1, #65	@ 0x41
 8002502:	5c52      	ldrb	r2, [r2, r1]
 8002504:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2220      	movs	r2, #32
 800250c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800250e:	183b      	adds	r3, r7, r0
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b21      	cmp	r3, #33	@ 0x21
 8002514:	d003      	beq.n	800251e <I2C_ITSlaveCplt+0x3a>
 8002516:	183b      	adds	r3, r7, r0
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b29      	cmp	r3, #41	@ 0x29
 800251c:	d109      	bne.n	8002532 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800251e:	4a7b      	ldr	r2, [pc, #492]	@ (800270c <I2C_ITSlaveCplt+0x228>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	0011      	movs	r1, r2
 8002524:	0018      	movs	r0, r3
 8002526:	f000 fccb 	bl	8002ec0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2221      	movs	r2, #33	@ 0x21
 800252e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002530:	e011      	b.n	8002556 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002532:	220f      	movs	r2, #15
 8002534:	18bb      	adds	r3, r7, r2
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b22      	cmp	r3, #34	@ 0x22
 800253a:	d003      	beq.n	8002544 <I2C_ITSlaveCplt+0x60>
 800253c:	18bb      	adds	r3, r7, r2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b2a      	cmp	r3, #42	@ 0x2a
 8002542:	d108      	bne.n	8002556 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002544:	4a72      	ldr	r2, [pc, #456]	@ (8002710 <I2C_ITSlaveCplt+0x22c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	0011      	movs	r1, r2
 800254a:	0018      	movs	r0, r3
 800254c:	f000 fcb8 	bl	8002ec0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2222      	movs	r2, #34	@ 0x22
 8002554:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2180      	movs	r1, #128	@ 0x80
 8002562:	0209      	lsls	r1, r1, #8
 8002564:	430a      	orrs	r2, r1
 8002566:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4968      	ldr	r1, [pc, #416]	@ (8002714 <I2C_ITSlaveCplt+0x230>)
 8002574:	400a      	ands	r2, r1
 8002576:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	0018      	movs	r0, r3
 800257c:	f000 fa55 	bl	8002a2a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	2380      	movs	r3, #128	@ 0x80
 8002584:	01db      	lsls	r3, r3, #7
 8002586:	4013      	ands	r3, r2
 8002588:	d013      	beq.n	80025b2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4960      	ldr	r1, [pc, #384]	@ (8002718 <I2C_ITSlaveCplt+0x234>)
 8002596:	400a      	ands	r2, r1
 8002598:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d01f      	beq.n	80025e2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025b0:	e017      	b.n	80025e2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	2380      	movs	r3, #128	@ 0x80
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	4013      	ands	r3, r2
 80025ba:	d012      	beq.n	80025e2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4955      	ldr	r1, [pc, #340]	@ (800271c <I2C_ITSlaveCplt+0x238>)
 80025c8:	400a      	ands	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2204      	movs	r2, #4
 80025e6:	4013      	ands	r3, r2
 80025e8:	d020      	beq.n	800262c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2204      	movs	r2, #4
 80025ee:	4393      	bics	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	2204      	movs	r2, #4
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2242      	movs	r2, #66	@ 0x42
 8002646:	2100      	movs	r1, #0
 8002648:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	0011      	movs	r1, r2
 8002660:	0018      	movs	r0, r3
 8002662:	f000 f8b7 	bl	80027d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2241      	movs	r2, #65	@ 0x41
 800266a:	5c9b      	ldrb	r3, [r3, r2]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b28      	cmp	r3, #40	@ 0x28
 8002670:	d147      	bne.n	8002702 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	0011      	movs	r1, r2
 8002678:	0018      	movs	r0, r3
 800267a:	f000 f853 	bl	8002724 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800267e:	e040      	b.n	8002702 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002684:	4a26      	ldr	r2, [pc, #152]	@ (8002720 <I2C_ITSlaveCplt+0x23c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d016      	beq.n	80026b8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0018      	movs	r0, r3
 800268e:	f7ff fec5 	bl	800241c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a22      	ldr	r2, [pc, #136]	@ (8002720 <I2C_ITSlaveCplt+0x23c>)
 8002696:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2241      	movs	r2, #65	@ 0x41
 800269c:	2120      	movs	r1, #32
 800269e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2240      	movs	r2, #64	@ 0x40
 80026aa:	2100      	movs	r1, #0
 80026ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7ff fc94 	bl	8001fde <HAL_I2C_ListenCpltCallback>
}
 80026b6:	e024      	b.n	8002702 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2241      	movs	r2, #65	@ 0x41
 80026bc:	5c9b      	ldrb	r3, [r3, r2]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b22      	cmp	r3, #34	@ 0x22
 80026c2:	d10f      	bne.n	80026e4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2241      	movs	r2, #65	@ 0x41
 80026c8:	2120      	movs	r1, #32
 80026ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2240      	movs	r2, #64	@ 0x40
 80026d6:	2100      	movs	r1, #0
 80026d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0018      	movs	r0, r3
 80026de:	f7ff fc66 	bl	8001fae <HAL_I2C_SlaveRxCpltCallback>
}
 80026e2:	e00e      	b.n	8002702 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2241      	movs	r2, #65	@ 0x41
 80026e8:	2120      	movs	r1, #32
 80026ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2240      	movs	r2, #64	@ 0x40
 80026f6:	2100      	movs	r1, #0
 80026f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff fc4e 	bl	8001f9e <HAL_I2C_SlaveTxCpltCallback>
}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b006      	add	sp, #24
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	00008001 	.word	0x00008001
 8002710:	00008002 	.word	0x00008002
 8002714:	fe00e800 	.word	0xfe00e800
 8002718:	ffffbfff 	.word	0xffffbfff
 800271c:	ffff7fff 	.word	0xffff7fff
 8002720:	ffff0000 	.word	0xffff0000

08002724 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a26      	ldr	r2, [pc, #152]	@ (80027cc <I2C_ITListenCplt+0xa8>)
 8002732:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2241      	movs	r2, #65	@ 0x41
 800273e:	2120      	movs	r1, #32
 8002740:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2242      	movs	r2, #66	@ 0x42
 8002746:	2100      	movs	r1, #0
 8002748:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2204      	movs	r2, #4
 8002754:	4013      	ands	r3, r2
 8002756:	d022      	beq.n	800279e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	d012      	beq.n	800279e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	2204      	movs	r2, #4
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800279e:	4a0c      	ldr	r2, [pc, #48]	@ (80027d0 <I2C_ITListenCplt+0xac>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	0011      	movs	r1, r2
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 fb8b 	bl	8002ec0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2210      	movs	r2, #16
 80027b0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2240      	movs	r2, #64	@ 0x40
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff fc0e 	bl	8001fde <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b002      	add	sp, #8
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	ffff0000 	.word	0xffff0000
 80027d0:	00008003 	.word	0x00008003

080027d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80027de:	200f      	movs	r0, #15
 80027e0:	183b      	adds	r3, r7, r0
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	2141      	movs	r1, #65	@ 0x41
 80027e6:	5c52      	ldrb	r2, [r2, r1]
 80027e8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2242      	movs	r2, #66	@ 0x42
 80027ee:	2100      	movs	r1, #0
 80027f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a72      	ldr	r2, [pc, #456]	@ (80029c0 <I2C_ITError+0x1ec>)
 80027f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800280a:	183b      	adds	r3, r7, r0
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b28      	cmp	r3, #40	@ 0x28
 8002810:	d007      	beq.n	8002822 <I2C_ITError+0x4e>
 8002812:	183b      	adds	r3, r7, r0
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b29      	cmp	r3, #41	@ 0x29
 8002818:	d003      	beq.n	8002822 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800281a:	183b      	adds	r3, r7, r0
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002820:	d10c      	bne.n	800283c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2103      	movs	r1, #3
 8002826:	0018      	movs	r0, r3
 8002828:	f000 fb4a 	bl	8002ec0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2241      	movs	r2, #65	@ 0x41
 8002830:	2128      	movs	r1, #40	@ 0x28
 8002832:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a63      	ldr	r2, [pc, #396]	@ (80029c4 <I2C_ITError+0x1f0>)
 8002838:	635a      	str	r2, [r3, #52]	@ 0x34
 800283a:	e032      	b.n	80028a2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800283c:	4a62      	ldr	r2, [pc, #392]	@ (80029c8 <I2C_ITError+0x1f4>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	0011      	movs	r1, r2
 8002842:	0018      	movs	r0, r3
 8002844:	f000 fb3c 	bl	8002ec0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	0018      	movs	r0, r3
 800284c:	f000 f8ed 	bl	8002a2a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2241      	movs	r2, #65	@ 0x41
 8002854:	5c9b      	ldrb	r3, [r3, r2]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b60      	cmp	r3, #96	@ 0x60
 800285a:	d01f      	beq.n	800289c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2241      	movs	r2, #65	@ 0x41
 8002860:	2120      	movs	r1, #32
 8002862:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2220      	movs	r2, #32
 800286c:	4013      	ands	r3, r2
 800286e:	2b20      	cmp	r3, #32
 8002870:	d114      	bne.n	800289c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2210      	movs	r2, #16
 800287a:	4013      	ands	r3, r2
 800287c:	2b10      	cmp	r3, #16
 800287e:	d109      	bne.n	8002894 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2210      	movs	r2, #16
 8002886:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	2204      	movs	r2, #4
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2220      	movs	r2, #32
 800289a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d03b      	beq.n	8002928 <I2C_ITError+0x154>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b11      	cmp	r3, #17
 80028b4:	d002      	beq.n	80028bc <I2C_ITError+0xe8>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b21      	cmp	r3, #33	@ 0x21
 80028ba:	d135      	bne.n	8002928 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	01db      	lsls	r3, r3, #7
 80028c6:	401a      	ands	r2, r3
 80028c8:	2380      	movs	r3, #128	@ 0x80
 80028ca:	01db      	lsls	r3, r3, #7
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d107      	bne.n	80028e0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	493c      	ldr	r1, [pc, #240]	@ (80029cc <I2C_ITError+0x1f8>)
 80028dc:	400a      	ands	r2, r1
 80028de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fe ff7a 	bl	80017de <HAL_DMA_GetState>
 80028ea:	0003      	movs	r3, r0
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d016      	beq.n	800291e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f4:	4a36      	ldr	r2, [pc, #216]	@ (80029d0 <I2C_ITError+0x1fc>)
 80028f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2240      	movs	r2, #64	@ 0x40
 80028fc:	2100      	movs	r1, #0
 80028fe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002904:	0018      	movs	r0, r3
 8002906:	f7fe ff25 	bl	8001754 <HAL_DMA_Abort_IT>
 800290a:	1e03      	subs	r3, r0, #0
 800290c:	d051      	beq.n	80029b2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002912:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002918:	0018      	movs	r0, r3
 800291a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800291c:	e049      	b.n	80029b2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	0018      	movs	r0, r3
 8002922:	f000 f859 	bl	80029d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002926:	e044      	b.n	80029b2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d03b      	beq.n	80029a8 <I2C_ITError+0x1d4>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b12      	cmp	r3, #18
 8002934:	d002      	beq.n	800293c <I2C_ITError+0x168>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b22      	cmp	r3, #34	@ 0x22
 800293a:	d135      	bne.n	80029a8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	2380      	movs	r3, #128	@ 0x80
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	401a      	ands	r2, r3
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	429a      	cmp	r2, r3
 800294e:	d107      	bne.n	8002960 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	491e      	ldr	r1, [pc, #120]	@ (80029d4 <I2C_ITError+0x200>)
 800295c:	400a      	ands	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002964:	0018      	movs	r0, r3
 8002966:	f7fe ff3a 	bl	80017de <HAL_DMA_GetState>
 800296a:	0003      	movs	r3, r0
 800296c:	2b01      	cmp	r3, #1
 800296e:	d016      	beq.n	800299e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002974:	4a16      	ldr	r2, [pc, #88]	@ (80029d0 <I2C_ITError+0x1fc>)
 8002976:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2240      	movs	r2, #64	@ 0x40
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002984:	0018      	movs	r0, r3
 8002986:	f7fe fee5 	bl	8001754 <HAL_DMA_Abort_IT>
 800298a:	1e03      	subs	r3, r0, #0
 800298c:	d013      	beq.n	80029b6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002998:	0018      	movs	r0, r3
 800299a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800299c:	e00b      	b.n	80029b6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 f819 	bl	80029d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029a6:	e006      	b.n	80029b6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 f814 	bl	80029d8 <I2C_TreatErrorCallback>
  }
}
 80029b0:	e002      	b.n	80029b8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029b2:	46c0      	nop			@ (mov r8, r8)
 80029b4:	e000      	b.n	80029b8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029b6:	46c0      	nop			@ (mov r8, r8)
}
 80029b8:	46c0      	nop			@ (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b004      	add	sp, #16
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	ffff0000 	.word	0xffff0000
 80029c4:	08002011 	.word	0x08002011
 80029c8:	00008003 	.word	0x00008003
 80029cc:	ffffbfff 	.word	0xffffbfff
 80029d0:	08002a6f 	.word	0x08002a6f
 80029d4:	ffff7fff 	.word	0xffff7fff

080029d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2241      	movs	r2, #65	@ 0x41
 80029e4:	5c9b      	ldrb	r3, [r3, r2]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b60      	cmp	r3, #96	@ 0x60
 80029ea:	d10f      	bne.n	8002a0c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2241      	movs	r2, #65	@ 0x41
 80029f0:	2120      	movs	r1, #32
 80029f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2240      	movs	r2, #64	@ 0x40
 80029fe:	2100      	movs	r1, #0
 8002a00:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff fafa 	bl	8001ffe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a0a:	e00a      	b.n	8002a22 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2240      	movs	r2, #64	@ 0x40
 8002a16:	2100      	movs	r1, #0
 8002a18:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff fae6 	bl	8001fee <HAL_I2C_ErrorCallback>
}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b002      	add	sp, #8
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d103      	bne.n	8002a48 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2200      	movs	r2, #0
 8002a46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d007      	beq.n	8002a66 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699a      	ldr	r2, [r3, #24]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	430a      	orrs	r2, r1
 8002a64:	619a      	str	r2, [r3, #24]
  }
}
 8002a66:	46c0      	nop			@ (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b002      	add	sp, #8
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a88:	2200      	movs	r2, #0
 8002a8a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a98:	2200      	movs	r2, #0
 8002a9a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f7ff ff9a 	bl	80029d8 <I2C_TreatErrorCallback>
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b004      	add	sp, #16
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	1dfb      	adds	r3, r7, #7
 8002aba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002abc:	e030      	b.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	d02d      	beq.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac4:	f7fe fd3a 	bl	800153c <HAL_GetTick>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d302      	bcc.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d122      	bne.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	425a      	negs	r2, r3
 8002aea:	4153      	adcs	r3, r2
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	001a      	movs	r2, r3
 8002af0:	1dfb      	adds	r3, r7, #7
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d113      	bne.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afc:	2220      	movs	r2, #32
 8002afe:	431a      	orrs	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2241      	movs	r2, #65	@ 0x41
 8002b08:	2120      	movs	r1, #32
 8002b0a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2242      	movs	r2, #66	@ 0x42
 8002b10:	2100      	movs	r1, #0
 8002b12:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2240      	movs	r2, #64	@ 0x40
 8002b18:	2100      	movs	r1, #0
 8002b1a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e00f      	b.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	425a      	negs	r2, r3
 8002b30:	4153      	adcs	r3, r2
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	001a      	movs	r2, r3
 8002b36:	1dfb      	adds	r3, r7, #7
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d0bf      	beq.n	8002abe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	0018      	movs	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b004      	add	sp, #16
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b54:	e032      	b.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 f87d 	bl	8002c5c <I2C_IsErrorOccurred>
 8002b62:	1e03      	subs	r3, r0, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e030      	b.n	8002bcc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	d025      	beq.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b70:	f7fe fce4 	bl	800153c <HAL_GetTick>
 8002b74:	0002      	movs	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d302      	bcc.n	8002b86 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d11a      	bne.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d013      	beq.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b98:	2220      	movs	r2, #32
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2241      	movs	r2, #65	@ 0x41
 8002ba4:	2120      	movs	r1, #32
 8002ba6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2242      	movs	r2, #66	@ 0x42
 8002bac:	2100      	movs	r1, #0
 8002bae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2240      	movs	r2, #64	@ 0x40
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e007      	b.n	8002bcc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d1c5      	bne.n	8002b56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b004      	add	sp, #16
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be0:	e02f      	b.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 f837 	bl	8002c5c <I2C_IsErrorOccurred>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e02d      	b.n	8002c52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf6:	f7fe fca1 	bl	800153c <HAL_GetTick>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d302      	bcc.n	8002c0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d11a      	bne.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2220      	movs	r2, #32
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d013      	beq.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	2220      	movs	r2, #32
 8002c20:	431a      	orrs	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2241      	movs	r2, #65	@ 0x41
 8002c2a:	2120      	movs	r1, #32
 8002c2c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2242      	movs	r2, #66	@ 0x42
 8002c32:	2100      	movs	r1, #0
 8002c34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2240      	movs	r2, #64	@ 0x40
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e007      	b.n	8002c52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d1c8      	bne.n	8002be2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b004      	add	sp, #16
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	@ 0x28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c68:	2327      	movs	r3, #39	@ 0x27
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2210      	movs	r2, #16
 8002c84:	4013      	ands	r3, r2
 8002c86:	d100      	bne.n	8002c8a <I2C_IsErrorOccurred+0x2e>
 8002c88:	e079      	b.n	8002d7e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2210      	movs	r2, #16
 8002c90:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c92:	e057      	b.n	8002d44 <I2C_IsErrorOccurred+0xe8>
 8002c94:	2227      	movs	r2, #39	@ 0x27
 8002c96:	18bb      	adds	r3, r7, r2
 8002c98:	18ba      	adds	r2, r7, r2
 8002c9a:	7812      	ldrb	r2, [r2, #0]
 8002c9c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	d04f      	beq.n	8002d44 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ca4:	f7fe fc4a 	bl	800153c <HAL_GetTick>
 8002ca8:	0002      	movs	r2, r0
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d302      	bcc.n	8002cba <I2C_IsErrorOccurred+0x5e>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d144      	bne.n	8002d44 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	2380      	movs	r3, #128	@ 0x80
 8002cc2:	01db      	lsls	r3, r3, #7
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cc8:	2013      	movs	r0, #19
 8002cca:	183b      	adds	r3, r7, r0
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	2142      	movs	r1, #66	@ 0x42
 8002cd0:	5c52      	ldrb	r2, [r2, r1]
 8002cd2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	2380      	movs	r3, #128	@ 0x80
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	401a      	ands	r2, r3
 8002ce0:	2380      	movs	r3, #128	@ 0x80
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d126      	bne.n	8002d36 <I2C_IsErrorOccurred+0xda>
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	2380      	movs	r3, #128	@ 0x80
 8002cec:	01db      	lsls	r3, r3, #7
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d021      	beq.n	8002d36 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002cf2:	183b      	adds	r3, r7, r0
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d01d      	beq.n	8002d36 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2180      	movs	r1, #128	@ 0x80
 8002d06:	01c9      	lsls	r1, r1, #7
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d0c:	f7fe fc16 	bl	800153c <HAL_GetTick>
 8002d10:	0003      	movs	r3, r0
 8002d12:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d14:	e00f      	b.n	8002d36 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d16:	f7fe fc11 	bl	800153c <HAL_GetTick>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b19      	cmp	r3, #25
 8002d22:	d908      	bls.n	8002d36 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	2220      	movs	r2, #32
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d2c:	2327      	movs	r3, #39	@ 0x27
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]

              break;
 8002d34:	e006      	b.n	8002d44 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d1e8      	bne.n	8002d16 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	d004      	beq.n	8002d5c <I2C_IsErrorOccurred+0x100>
 8002d52:	2327      	movs	r3, #39	@ 0x27
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d09b      	beq.n	8002c94 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d5c:	2327      	movs	r3, #39	@ 0x27
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	2204      	movs	r2, #4
 8002d72:	4313      	orrs	r3, r2
 8002d74:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d76:	2327      	movs	r3, #39	@ 0x27
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	2380      	movs	r3, #128	@ 0x80
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d00c      	beq.n	8002daa <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	2201      	movs	r2, #1
 8002d94:	4313      	orrs	r3, r2
 8002d96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2280      	movs	r2, #128	@ 0x80
 8002d9e:	0052      	lsls	r2, r2, #1
 8002da0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002da2:	2327      	movs	r3, #39	@ 0x27
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4013      	ands	r3, r2
 8002db2:	d00c      	beq.n	8002dce <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	2208      	movs	r2, #8
 8002db8:	4313      	orrs	r3, r2
 8002dba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2280      	movs	r2, #128	@ 0x80
 8002dc2:	00d2      	lsls	r2, r2, #3
 8002dc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dc6:	2327      	movs	r3, #39	@ 0x27
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	2380      	movs	r3, #128	@ 0x80
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d00c      	beq.n	8002df2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2280      	movs	r2, #128	@ 0x80
 8002de6:	0092      	lsls	r2, r2, #2
 8002de8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dea:	2327      	movs	r3, #39	@ 0x27
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	2201      	movs	r2, #1
 8002df0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002df2:	2327      	movs	r3, #39	@ 0x27
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01d      	beq.n	8002e38 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f7ff fe13 	bl	8002a2a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	490e      	ldr	r1, [pc, #56]	@ (8002e48 <I2C_IsErrorOccurred+0x1ec>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2241      	movs	r2, #65	@ 0x41
 8002e24:	2120      	movs	r1, #32
 8002e26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2242      	movs	r2, #66	@ 0x42
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2240      	movs	r2, #64	@ 0x40
 8002e34:	2100      	movs	r1, #0
 8002e36:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002e38:	2327      	movs	r3, #39	@ 0x27
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	781b      	ldrb	r3, [r3, #0]
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b00a      	add	sp, #40	@ 0x28
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	fe00e800 	.word	0xfe00e800

08002e4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	0008      	movs	r0, r1
 8002e56:	0011      	movs	r1, r2
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	240a      	movs	r4, #10
 8002e5c:	193b      	adds	r3, r7, r4
 8002e5e:	1c02      	adds	r2, r0, #0
 8002e60:	801a      	strh	r2, [r3, #0]
 8002e62:	2009      	movs	r0, #9
 8002e64:	183b      	adds	r3, r7, r0
 8002e66:	1c0a      	adds	r2, r1, #0
 8002e68:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e6a:	193b      	adds	r3, r7, r4
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	059b      	lsls	r3, r3, #22
 8002e70:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e72:	183b      	adds	r3, r7, r0
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	0419      	lsls	r1, r3, #16
 8002e78:	23ff      	movs	r3, #255	@ 0xff
 8002e7a:	041b      	lsls	r3, r3, #16
 8002e7c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e7e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e86:	4313      	orrs	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	085b      	lsrs	r3, r3, #1
 8002e8c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e96:	0d51      	lsrs	r1, r2, #21
 8002e98:	2280      	movs	r2, #128	@ 0x80
 8002e9a:	00d2      	lsls	r2, r2, #3
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	4907      	ldr	r1, [pc, #28]	@ (8002ebc <I2C_TransferConfig+0x70>)
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	43d2      	mvns	r2, r2
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	0011      	movs	r1, r2
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b007      	add	sp, #28
 8002eb8:	bd90      	pop	{r4, r7, pc}
 8002eba:	46c0      	nop			@ (mov r8, r8)
 8002ebc:	03ff63ff 	.word	0x03ff63ff

08002ec0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	000a      	movs	r2, r1
 8002eca:	1cbb      	adds	r3, r7, #2
 8002ecc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002ed2:	1cbb      	adds	r3, r7, #2
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d010      	beq.n	8002efe <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2242      	movs	r2, #66	@ 0x42
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2241      	movs	r2, #65	@ 0x41
 8002ee8:	5c9b      	ldrb	r3, [r3, r2]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	001a      	movs	r2, r3
 8002eee:	2328      	movs	r3, #40	@ 0x28
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b28      	cmp	r3, #40	@ 0x28
 8002ef4:	d003      	beq.n	8002efe <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	22b0      	movs	r2, #176	@ 0xb0
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002efe:	1cbb      	adds	r3, r7, #2
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	2202      	movs	r2, #2
 8002f04:	4013      	ands	r3, r2
 8002f06:	d010      	beq.n	8002f2a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2244      	movs	r2, #68	@ 0x44
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2241      	movs	r2, #65	@ 0x41
 8002f14:	5c9b      	ldrb	r3, [r3, r2]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	001a      	movs	r2, r3
 8002f1a:	2328      	movs	r3, #40	@ 0x28
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b28      	cmp	r3, #40	@ 0x28
 8002f20:	d003      	beq.n	8002f2a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	22b0      	movs	r2, #176	@ 0xb0
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f2a:	1cbb      	adds	r3, r7, #2
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	da03      	bge.n	8002f3c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	22b8      	movs	r2, #184	@ 0xb8
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002f3c:	1cbb      	adds	r3, r7, #2
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d103      	bne.n	8002f4c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2290      	movs	r2, #144	@ 0x90
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002f4c:	1cbb      	adds	r3, r7, #2
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	d103      	bne.n	8002f5c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002f5c:	1cbb      	adds	r3, r7, #2
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	2b40      	cmp	r3, #64	@ 0x40
 8002f62:	d103      	bne.n	8002f6c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2240      	movs	r2, #64	@ 0x40
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43d9      	mvns	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]
}
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2241      	movs	r2, #65	@ 0x41
 8002f96:	5c9b      	ldrb	r3, [r3, r2]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d138      	bne.n	8003010 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2240      	movs	r2, #64	@ 0x40
 8002fa2:	5c9b      	ldrb	r3, [r3, r2]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e032      	b.n	8003012 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2240      	movs	r2, #64	@ 0x40
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2241      	movs	r2, #65	@ 0x41
 8002fb8:	2124      	movs	r1, #36	@ 0x24
 8002fba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	438a      	bics	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4911      	ldr	r1, [pc, #68]	@ (800301c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002fd8:	400a      	ands	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6819      	ldr	r1, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2241      	movs	r2, #65	@ 0x41
 8003000:	2120      	movs	r1, #32
 8003002:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2240      	movs	r2, #64	@ 0x40
 8003008:	2100      	movs	r1, #0
 800300a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	e000      	b.n	8003012 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003010:	2302      	movs	r3, #2
  }
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b002      	add	sp, #8
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	ffffefff 	.word	0xffffefff

08003020 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2241      	movs	r2, #65	@ 0x41
 800302e:	5c9b      	ldrb	r3, [r3, r2]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b20      	cmp	r3, #32
 8003034:	d139      	bne.n	80030aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2240      	movs	r2, #64	@ 0x40
 800303a:	5c9b      	ldrb	r3, [r3, r2]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003040:	2302      	movs	r3, #2
 8003042:	e033      	b.n	80030ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2240      	movs	r2, #64	@ 0x40
 8003048:	2101      	movs	r1, #1
 800304a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2241      	movs	r2, #65	@ 0x41
 8003050:	2124      	movs	r1, #36	@ 0x24
 8003052:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2101      	movs	r1, #1
 8003060:	438a      	bics	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4a11      	ldr	r2, [pc, #68]	@ (80030b4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003070:	4013      	ands	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2101      	movs	r1, #1
 8003092:	430a      	orrs	r2, r1
 8003094:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2241      	movs	r2, #65	@ 0x41
 800309a:	2120      	movs	r1, #32
 800309c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2240      	movs	r2, #64	@ 0x40
 80030a2:	2100      	movs	r1, #0
 80030a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e000      	b.n	80030ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
  }
}
 80030ac:	0018      	movs	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b004      	add	sp, #16
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	fffff0ff 	.word	0xfffff0ff

080030b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f000 fb76 	bl	80037b8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2201      	movs	r2, #1
 80030d2:	4013      	ands	r3, r2
 80030d4:	d100      	bne.n	80030d8 <HAL_RCC_OscConfig+0x20>
 80030d6:	e08e      	b.n	80031f6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030d8:	4bc5      	ldr	r3, [pc, #788]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	220c      	movs	r2, #12
 80030de:	4013      	ands	r3, r2
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d00e      	beq.n	8003102 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030e4:	4bc2      	ldr	r3, [pc, #776]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	220c      	movs	r2, #12
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d117      	bne.n	8003120 <HAL_RCC_OscConfig+0x68>
 80030f0:	4bbf      	ldr	r3, [pc, #764]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	23c0      	movs	r3, #192	@ 0xc0
 80030f6:	025b      	lsls	r3, r3, #9
 80030f8:	401a      	ands	r2, r3
 80030fa:	2380      	movs	r3, #128	@ 0x80
 80030fc:	025b      	lsls	r3, r3, #9
 80030fe:	429a      	cmp	r2, r3
 8003100:	d10e      	bne.n	8003120 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003102:	4bbb      	ldr	r3, [pc, #748]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	2380      	movs	r3, #128	@ 0x80
 8003108:	029b      	lsls	r3, r3, #10
 800310a:	4013      	ands	r3, r2
 800310c:	d100      	bne.n	8003110 <HAL_RCC_OscConfig+0x58>
 800310e:	e071      	b.n	80031f4 <HAL_RCC_OscConfig+0x13c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d000      	beq.n	800311a <HAL_RCC_OscConfig+0x62>
 8003118:	e06c      	b.n	80031f4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f000 fb4c 	bl	80037b8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d107      	bne.n	8003138 <HAL_RCC_OscConfig+0x80>
 8003128:	4bb1      	ldr	r3, [pc, #708]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4bb0      	ldr	r3, [pc, #704]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 800312e:	2180      	movs	r1, #128	@ 0x80
 8003130:	0249      	lsls	r1, r1, #9
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e02f      	b.n	8003198 <HAL_RCC_OscConfig+0xe0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10c      	bne.n	800315a <HAL_RCC_OscConfig+0xa2>
 8003140:	4bab      	ldr	r3, [pc, #684]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4baa      	ldr	r3, [pc, #680]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003146:	49ab      	ldr	r1, [pc, #684]	@ (80033f4 <HAL_RCC_OscConfig+0x33c>)
 8003148:	400a      	ands	r2, r1
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	4ba8      	ldr	r3, [pc, #672]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4ba7      	ldr	r3, [pc, #668]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003152:	49a9      	ldr	r1, [pc, #676]	@ (80033f8 <HAL_RCC_OscConfig+0x340>)
 8003154:	400a      	ands	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e01e      	b.n	8003198 <HAL_RCC_OscConfig+0xe0>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b05      	cmp	r3, #5
 8003160:	d10e      	bne.n	8003180 <HAL_RCC_OscConfig+0xc8>
 8003162:	4ba3      	ldr	r3, [pc, #652]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4ba2      	ldr	r3, [pc, #648]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003168:	2180      	movs	r1, #128	@ 0x80
 800316a:	02c9      	lsls	r1, r1, #11
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	4b9f      	ldr	r3, [pc, #636]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b9e      	ldr	r3, [pc, #632]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003176:	2180      	movs	r1, #128	@ 0x80
 8003178:	0249      	lsls	r1, r1, #9
 800317a:	430a      	orrs	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e00b      	b.n	8003198 <HAL_RCC_OscConfig+0xe0>
 8003180:	4b9b      	ldr	r3, [pc, #620]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b9a      	ldr	r3, [pc, #616]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003186:	499b      	ldr	r1, [pc, #620]	@ (80033f4 <HAL_RCC_OscConfig+0x33c>)
 8003188:	400a      	ands	r2, r1
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	4b98      	ldr	r3, [pc, #608]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b97      	ldr	r3, [pc, #604]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003192:	4999      	ldr	r1, [pc, #612]	@ (80033f8 <HAL_RCC_OscConfig+0x340>)
 8003194:	400a      	ands	r2, r1
 8003196:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d014      	beq.n	80031ca <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fe f9cc 	bl	800153c <HAL_GetTick>
 80031a4:	0003      	movs	r3, r0
 80031a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031aa:	f7fe f9c7 	bl	800153c <HAL_GetTick>
 80031ae:	0002      	movs	r2, r0
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b64      	cmp	r3, #100	@ 0x64
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e2fd      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031bc:	4b8c      	ldr	r3, [pc, #560]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2380      	movs	r3, #128	@ 0x80
 80031c2:	029b      	lsls	r3, r3, #10
 80031c4:	4013      	ands	r3, r2
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0xf2>
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fe f9b7 	bl	800153c <HAL_GetTick>
 80031ce:	0003      	movs	r3, r0
 80031d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d4:	f7fe f9b2 	bl	800153c <HAL_GetTick>
 80031d8:	0002      	movs	r2, r0
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	@ 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e2e8      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e6:	4b82      	ldr	r3, [pc, #520]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	2380      	movs	r3, #128	@ 0x80
 80031ec:	029b      	lsls	r3, r3, #10
 80031ee:	4013      	ands	r3, r2
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x11c>
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2202      	movs	r2, #2
 80031fc:	4013      	ands	r3, r2
 80031fe:	d100      	bne.n	8003202 <HAL_RCC_OscConfig+0x14a>
 8003200:	e06c      	b.n	80032dc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003202:	4b7b      	ldr	r3, [pc, #492]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	220c      	movs	r2, #12
 8003208:	4013      	ands	r3, r2
 800320a:	d00e      	beq.n	800322a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800320c:	4b78      	ldr	r3, [pc, #480]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	220c      	movs	r2, #12
 8003212:	4013      	ands	r3, r2
 8003214:	2b08      	cmp	r3, #8
 8003216:	d11f      	bne.n	8003258 <HAL_RCC_OscConfig+0x1a0>
 8003218:	4b75      	ldr	r3, [pc, #468]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	23c0      	movs	r3, #192	@ 0xc0
 800321e:	025b      	lsls	r3, r3, #9
 8003220:	401a      	ands	r2, r3
 8003222:	2380      	movs	r3, #128	@ 0x80
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	429a      	cmp	r2, r3
 8003228:	d116      	bne.n	8003258 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	4b71      	ldr	r3, [pc, #452]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2202      	movs	r2, #2
 8003230:	4013      	ands	r3, r2
 8003232:	d005      	beq.n	8003240 <HAL_RCC_OscConfig+0x188>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d001      	beq.n	8003240 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e2bb      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b6b      	ldr	r3, [pc, #428]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	22f8      	movs	r2, #248	@ 0xf8
 8003246:	4393      	bics	r3, r2
 8003248:	0019      	movs	r1, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00da      	lsls	r2, r3, #3
 8003250:	4b67      	ldr	r3, [pc, #412]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	e041      	b.n	80032dc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d024      	beq.n	80032aa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003260:	4b63      	ldr	r3, [pc, #396]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b62      	ldr	r3, [pc, #392]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003266:	2101      	movs	r1, #1
 8003268:	430a      	orrs	r2, r1
 800326a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe f966 	bl	800153c <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003276:	f7fe f961 	bl	800153c <HAL_GetTick>
 800327a:	0002      	movs	r2, r0
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e297      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003288:	4b59      	ldr	r3, [pc, #356]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2202      	movs	r2, #2
 800328e:	4013      	ands	r3, r2
 8003290:	d0f1      	beq.n	8003276 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003292:	4b57      	ldr	r3, [pc, #348]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	22f8      	movs	r2, #248	@ 0xf8
 8003298:	4393      	bics	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	00da      	lsls	r2, r3, #3
 80032a2:	4b53      	ldr	r3, [pc, #332]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	e018      	b.n	80032dc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032aa:	4b51      	ldr	r3, [pc, #324]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b50      	ldr	r3, [pc, #320]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 80032b0:	2101      	movs	r1, #1
 80032b2:	438a      	bics	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fe f941 	bl	800153c <HAL_GetTick>
 80032ba:	0003      	movs	r3, r0
 80032bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c0:	f7fe f93c 	bl	800153c <HAL_GetTick>
 80032c4:	0002      	movs	r2, r0
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e272      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	4b47      	ldr	r3, [pc, #284]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2202      	movs	r2, #2
 80032d8:	4013      	ands	r3, r2
 80032da:	d1f1      	bne.n	80032c0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2208      	movs	r2, #8
 80032e2:	4013      	ands	r3, r2
 80032e4:	d036      	beq.n	8003354 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d019      	beq.n	8003322 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	4b40      	ldr	r3, [pc, #256]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 80032f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032f2:	4b3f      	ldr	r3, [pc, #252]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 80032f4:	2101      	movs	r1, #1
 80032f6:	430a      	orrs	r2, r1
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fa:	f7fe f91f 	bl	800153c <HAL_GetTick>
 80032fe:	0003      	movs	r3, r0
 8003300:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003304:	f7fe f91a 	bl	800153c <HAL_GetTick>
 8003308:	0002      	movs	r2, r0
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e250      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003316:	4b36      	ldr	r3, [pc, #216]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	2202      	movs	r2, #2
 800331c:	4013      	ands	r3, r2
 800331e:	d0f1      	beq.n	8003304 <HAL_RCC_OscConfig+0x24c>
 8003320:	e018      	b.n	8003354 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003322:	4b33      	ldr	r3, [pc, #204]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003326:	4b32      	ldr	r3, [pc, #200]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003328:	2101      	movs	r1, #1
 800332a:	438a      	bics	r2, r1
 800332c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332e:	f7fe f905 	bl	800153c <HAL_GetTick>
 8003332:	0003      	movs	r3, r0
 8003334:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003338:	f7fe f900 	bl	800153c <HAL_GetTick>
 800333c:	0002      	movs	r2, r0
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e236      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334a:	4b29      	ldr	r3, [pc, #164]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	2202      	movs	r2, #2
 8003350:	4013      	ands	r3, r2
 8003352:	d1f1      	bne.n	8003338 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2204      	movs	r2, #4
 800335a:	4013      	ands	r3, r2
 800335c:	d100      	bne.n	8003360 <HAL_RCC_OscConfig+0x2a8>
 800335e:	e0b5      	b.n	80034cc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003360:	201f      	movs	r0, #31
 8003362:	183b      	adds	r3, r7, r0
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003368:	4b21      	ldr	r3, [pc, #132]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	2380      	movs	r3, #128	@ 0x80
 800336e:	055b      	lsls	r3, r3, #21
 8003370:	4013      	ands	r3, r2
 8003372:	d110      	bne.n	8003396 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003374:	4b1e      	ldr	r3, [pc, #120]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003376:	69da      	ldr	r2, [r3, #28]
 8003378:	4b1d      	ldr	r3, [pc, #116]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 800337a:	2180      	movs	r1, #128	@ 0x80
 800337c:	0549      	lsls	r1, r1, #21
 800337e:	430a      	orrs	r2, r1
 8003380:	61da      	str	r2, [r3, #28]
 8003382:	4b1b      	ldr	r3, [pc, #108]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	2380      	movs	r3, #128	@ 0x80
 8003388:	055b      	lsls	r3, r3, #21
 800338a:	4013      	ands	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003390:	183b      	adds	r3, r7, r0
 8003392:	2201      	movs	r2, #1
 8003394:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b19      	ldr	r3, [pc, #100]	@ (80033fc <HAL_RCC_OscConfig+0x344>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	2380      	movs	r3, #128	@ 0x80
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4013      	ands	r3, r2
 80033a0:	d11a      	bne.n	80033d8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a2:	4b16      	ldr	r3, [pc, #88]	@ (80033fc <HAL_RCC_OscConfig+0x344>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4b15      	ldr	r3, [pc, #84]	@ (80033fc <HAL_RCC_OscConfig+0x344>)
 80033a8:	2180      	movs	r1, #128	@ 0x80
 80033aa:	0049      	lsls	r1, r1, #1
 80033ac:	430a      	orrs	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b0:	f7fe f8c4 	bl	800153c <HAL_GetTick>
 80033b4:	0003      	movs	r3, r0
 80033b6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ba:	f7fe f8bf 	bl	800153c <HAL_GetTick>
 80033be:	0002      	movs	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b64      	cmp	r3, #100	@ 0x64
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e1f5      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033cc:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_RCC_OscConfig+0x344>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	2380      	movs	r3, #128	@ 0x80
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	4013      	ands	r3, r2
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d10f      	bne.n	8003400 <HAL_RCC_OscConfig+0x348>
 80033e0:	4b03      	ldr	r3, [pc, #12]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 80033e2:	6a1a      	ldr	r2, [r3, #32]
 80033e4:	4b02      	ldr	r3, [pc, #8]	@ (80033f0 <HAL_RCC_OscConfig+0x338>)
 80033e6:	2101      	movs	r1, #1
 80033e8:	430a      	orrs	r2, r1
 80033ea:	621a      	str	r2, [r3, #32]
 80033ec:	e036      	b.n	800345c <HAL_RCC_OscConfig+0x3a4>
 80033ee:	46c0      	nop			@ (mov r8, r8)
 80033f0:	40021000 	.word	0x40021000
 80033f4:	fffeffff 	.word	0xfffeffff
 80033f8:	fffbffff 	.word	0xfffbffff
 80033fc:	40007000 	.word	0x40007000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10c      	bne.n	8003422 <HAL_RCC_OscConfig+0x36a>
 8003408:	4bca      	ldr	r3, [pc, #808]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800340a:	6a1a      	ldr	r2, [r3, #32]
 800340c:	4bc9      	ldr	r3, [pc, #804]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800340e:	2101      	movs	r1, #1
 8003410:	438a      	bics	r2, r1
 8003412:	621a      	str	r2, [r3, #32]
 8003414:	4bc7      	ldr	r3, [pc, #796]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003416:	6a1a      	ldr	r2, [r3, #32]
 8003418:	4bc6      	ldr	r3, [pc, #792]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800341a:	2104      	movs	r1, #4
 800341c:	438a      	bics	r2, r1
 800341e:	621a      	str	r2, [r3, #32]
 8003420:	e01c      	b.n	800345c <HAL_RCC_OscConfig+0x3a4>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b05      	cmp	r3, #5
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x38c>
 800342a:	4bc2      	ldr	r3, [pc, #776]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800342c:	6a1a      	ldr	r2, [r3, #32]
 800342e:	4bc1      	ldr	r3, [pc, #772]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003430:	2104      	movs	r1, #4
 8003432:	430a      	orrs	r2, r1
 8003434:	621a      	str	r2, [r3, #32]
 8003436:	4bbf      	ldr	r3, [pc, #764]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003438:	6a1a      	ldr	r2, [r3, #32]
 800343a:	4bbe      	ldr	r3, [pc, #760]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800343c:	2101      	movs	r1, #1
 800343e:	430a      	orrs	r2, r1
 8003440:	621a      	str	r2, [r3, #32]
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0x3a4>
 8003444:	4bbb      	ldr	r3, [pc, #748]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003446:	6a1a      	ldr	r2, [r3, #32]
 8003448:	4bba      	ldr	r3, [pc, #744]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800344a:	2101      	movs	r1, #1
 800344c:	438a      	bics	r2, r1
 800344e:	621a      	str	r2, [r3, #32]
 8003450:	4bb8      	ldr	r3, [pc, #736]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003452:	6a1a      	ldr	r2, [r3, #32]
 8003454:	4bb7      	ldr	r3, [pc, #732]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003456:	2104      	movs	r1, #4
 8003458:	438a      	bics	r2, r1
 800345a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d014      	beq.n	800348e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003464:	f7fe f86a 	bl	800153c <HAL_GetTick>
 8003468:	0003      	movs	r3, r0
 800346a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	e009      	b.n	8003482 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7fe f865 	bl	800153c <HAL_GetTick>
 8003472:	0002      	movs	r2, r0
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	4aaf      	ldr	r2, [pc, #700]	@ (8003738 <HAL_RCC_OscConfig+0x680>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e19a      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003482:	4bac      	ldr	r3, [pc, #688]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	2202      	movs	r2, #2
 8003488:	4013      	ands	r3, r2
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x3b6>
 800348c:	e013      	b.n	80034b6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348e:	f7fe f855 	bl	800153c <HAL_GetTick>
 8003492:	0003      	movs	r3, r0
 8003494:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003496:	e009      	b.n	80034ac <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7fe f850 	bl	800153c <HAL_GetTick>
 800349c:	0002      	movs	r2, r0
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	4aa5      	ldr	r2, [pc, #660]	@ (8003738 <HAL_RCC_OscConfig+0x680>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e185      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ac:	4ba1      	ldr	r3, [pc, #644]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	2202      	movs	r2, #2
 80034b2:	4013      	ands	r3, r2
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034b6:	231f      	movs	r3, #31
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d105      	bne.n	80034cc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c0:	4b9c      	ldr	r3, [pc, #624]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80034c2:	69da      	ldr	r2, [r3, #28]
 80034c4:	4b9b      	ldr	r3, [pc, #620]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80034c6:	499d      	ldr	r1, [pc, #628]	@ (800373c <HAL_RCC_OscConfig+0x684>)
 80034c8:	400a      	ands	r2, r1
 80034ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2210      	movs	r2, #16
 80034d2:	4013      	ands	r3, r2
 80034d4:	d063      	beq.n	800359e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d12a      	bne.n	8003534 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80034de:	4b95      	ldr	r3, [pc, #596]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80034e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034e2:	4b94      	ldr	r3, [pc, #592]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80034e4:	2104      	movs	r1, #4
 80034e6:	430a      	orrs	r2, r1
 80034e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80034ea:	4b92      	ldr	r3, [pc, #584]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80034ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034ee:	4b91      	ldr	r3, [pc, #580]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80034f0:	2101      	movs	r1, #1
 80034f2:	430a      	orrs	r2, r1
 80034f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f6:	f7fe f821 	bl	800153c <HAL_GetTick>
 80034fa:	0003      	movs	r3, r0
 80034fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003500:	f7fe f81c 	bl	800153c <HAL_GetTick>
 8003504:	0002      	movs	r2, r0
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e152      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003512:	4b88      	ldr	r3, [pc, #544]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003516:	2202      	movs	r2, #2
 8003518:	4013      	ands	r3, r2
 800351a:	d0f1      	beq.n	8003500 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800351c:	4b85      	ldr	r3, [pc, #532]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800351e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003520:	22f8      	movs	r2, #248	@ 0xf8
 8003522:	4393      	bics	r3, r2
 8003524:	0019      	movs	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	00da      	lsls	r2, r3, #3
 800352c:	4b81      	ldr	r3, [pc, #516]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800352e:	430a      	orrs	r2, r1
 8003530:	635a      	str	r2, [r3, #52]	@ 0x34
 8003532:	e034      	b.n	800359e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	3305      	adds	r3, #5
 800353a:	d111      	bne.n	8003560 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800353c:	4b7d      	ldr	r3, [pc, #500]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800353e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003540:	4b7c      	ldr	r3, [pc, #496]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003542:	2104      	movs	r1, #4
 8003544:	438a      	bics	r2, r1
 8003546:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003548:	4b7a      	ldr	r3, [pc, #488]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800354a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354c:	22f8      	movs	r2, #248	@ 0xf8
 800354e:	4393      	bics	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	00da      	lsls	r2, r3, #3
 8003558:	4b76      	ldr	r3, [pc, #472]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800355a:	430a      	orrs	r2, r1
 800355c:	635a      	str	r2, [r3, #52]	@ 0x34
 800355e:	e01e      	b.n	800359e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003560:	4b74      	ldr	r3, [pc, #464]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003564:	4b73      	ldr	r3, [pc, #460]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003566:	2104      	movs	r1, #4
 8003568:	430a      	orrs	r2, r1
 800356a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800356c:	4b71      	ldr	r3, [pc, #452]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800356e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003570:	4b70      	ldr	r3, [pc, #448]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003572:	2101      	movs	r1, #1
 8003574:	438a      	bics	r2, r1
 8003576:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003578:	f7fd ffe0 	bl	800153c <HAL_GetTick>
 800357c:	0003      	movs	r3, r0
 800357e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003582:	f7fd ffdb 	bl	800153c <HAL_GetTick>
 8003586:	0002      	movs	r2, r0
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e111      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003594:	4b67      	ldr	r3, [pc, #412]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003598:	2202      	movs	r2, #2
 800359a:	4013      	ands	r3, r2
 800359c:	d1f1      	bne.n	8003582 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2220      	movs	r2, #32
 80035a4:	4013      	ands	r3, r2
 80035a6:	d05c      	beq.n	8003662 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80035a8:	4b62      	ldr	r3, [pc, #392]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	220c      	movs	r2, #12
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d00e      	beq.n	80035d2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80035b4:	4b5f      	ldr	r3, [pc, #380]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	220c      	movs	r2, #12
 80035ba:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d114      	bne.n	80035ea <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80035c0:	4b5c      	ldr	r3, [pc, #368]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	23c0      	movs	r3, #192	@ 0xc0
 80035c6:	025b      	lsls	r3, r3, #9
 80035c8:	401a      	ands	r2, r3
 80035ca:	23c0      	movs	r3, #192	@ 0xc0
 80035cc:	025b      	lsls	r3, r3, #9
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d10b      	bne.n	80035ea <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80035d2:	4b58      	ldr	r3, [pc, #352]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80035d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035d6:	2380      	movs	r3, #128	@ 0x80
 80035d8:	029b      	lsls	r3, r3, #10
 80035da:	4013      	ands	r3, r2
 80035dc:	d040      	beq.n	8003660 <HAL_RCC_OscConfig+0x5a8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d03c      	beq.n	8003660 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e0e6      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01b      	beq.n	800362a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80035f2:	4b50      	ldr	r3, [pc, #320]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80035f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80035f8:	2180      	movs	r1, #128	@ 0x80
 80035fa:	0249      	lsls	r1, r1, #9
 80035fc:	430a      	orrs	r2, r1
 80035fe:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fd ff9c 	bl	800153c <HAL_GetTick>
 8003604:	0003      	movs	r3, r0
 8003606:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800360a:	f7fd ff97 	bl	800153c <HAL_GetTick>
 800360e:	0002      	movs	r2, r0
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e0cd      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800361c:	4b45      	ldr	r3, [pc, #276]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800361e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003620:	2380      	movs	r3, #128	@ 0x80
 8003622:	029b      	lsls	r3, r3, #10
 8003624:	4013      	ands	r3, r2
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x552>
 8003628:	e01b      	b.n	8003662 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800362a:	4b42      	ldr	r3, [pc, #264]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800362c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800362e:	4b41      	ldr	r3, [pc, #260]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003630:	4943      	ldr	r1, [pc, #268]	@ (8003740 <HAL_RCC_OscConfig+0x688>)
 8003632:	400a      	ands	r2, r1
 8003634:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003636:	f7fd ff81 	bl	800153c <HAL_GetTick>
 800363a:	0003      	movs	r3, r0
 800363c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003640:	f7fd ff7c 	bl	800153c <HAL_GetTick>
 8003644:	0002      	movs	r2, r0
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e0b2      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003652:	4b38      	ldr	r3, [pc, #224]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003656:	2380      	movs	r3, #128	@ 0x80
 8003658:	029b      	lsls	r3, r3, #10
 800365a:	4013      	ands	r3, r2
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x588>
 800365e:	e000      	b.n	8003662 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003660:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	2b00      	cmp	r3, #0
 8003668:	d100      	bne.n	800366c <HAL_RCC_OscConfig+0x5b4>
 800366a:	e0a4      	b.n	80037b6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800366c:	4b31      	ldr	r3, [pc, #196]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	220c      	movs	r2, #12
 8003672:	4013      	ands	r3, r2
 8003674:	2b08      	cmp	r3, #8
 8003676:	d100      	bne.n	800367a <HAL_RCC_OscConfig+0x5c2>
 8003678:	e078      	b.n	800376c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	2b02      	cmp	r3, #2
 8003680:	d14c      	bne.n	800371c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	4b2c      	ldr	r3, [pc, #176]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b2b      	ldr	r3, [pc, #172]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003688:	492e      	ldr	r1, [pc, #184]	@ (8003744 <HAL_RCC_OscConfig+0x68c>)
 800368a:	400a      	ands	r2, r1
 800368c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fd ff55 	bl	800153c <HAL_GetTick>
 8003692:	0003      	movs	r3, r0
 8003694:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003698:	f7fd ff50 	bl	800153c <HAL_GetTick>
 800369c:	0002      	movs	r2, r0
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e086      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036aa:	4b22      	ldr	r3, [pc, #136]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	2380      	movs	r3, #128	@ 0x80
 80036b0:	049b      	lsls	r3, r3, #18
 80036b2:	4013      	ands	r3, r2
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ba:	220f      	movs	r2, #15
 80036bc:	4393      	bics	r3, r2
 80036be:	0019      	movs	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80036c6:	430a      	orrs	r2, r1
 80036c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003748 <HAL_RCC_OscConfig+0x690>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036dc:	431a      	orrs	r2, r3
 80036de:	4b15      	ldr	r3, [pc, #84]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80036e0:	430a      	orrs	r2, r1
 80036e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e4:	4b13      	ldr	r3, [pc, #76]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b12      	ldr	r3, [pc, #72]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 80036ea:	2180      	movs	r1, #128	@ 0x80
 80036ec:	0449      	lsls	r1, r1, #17
 80036ee:	430a      	orrs	r2, r1
 80036f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fd ff23 	bl	800153c <HAL_GetTick>
 80036f6:	0003      	movs	r3, r0
 80036f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fc:	f7fd ff1e 	bl	800153c <HAL_GetTick>
 8003700:	0002      	movs	r2, r0
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e054      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800370e:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	2380      	movs	r3, #128	@ 0x80
 8003714:	049b      	lsls	r3, r3, #18
 8003716:	4013      	ands	r3, r2
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x644>
 800371a:	e04c      	b.n	80037b6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371c:	4b05      	ldr	r3, [pc, #20]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b04      	ldr	r3, [pc, #16]	@ (8003734 <HAL_RCC_OscConfig+0x67c>)
 8003722:	4908      	ldr	r1, [pc, #32]	@ (8003744 <HAL_RCC_OscConfig+0x68c>)
 8003724:	400a      	ands	r2, r1
 8003726:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fd ff08 	bl	800153c <HAL_GetTick>
 800372c:	0003      	movs	r3, r0
 800372e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003730:	e015      	b.n	800375e <HAL_RCC_OscConfig+0x6a6>
 8003732:	46c0      	nop			@ (mov r8, r8)
 8003734:	40021000 	.word	0x40021000
 8003738:	00001388 	.word	0x00001388
 800373c:	efffffff 	.word	0xefffffff
 8003740:	fffeffff 	.word	0xfffeffff
 8003744:	feffffff 	.word	0xfeffffff
 8003748:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fd fef6 	bl	800153c <HAL_GetTick>
 8003750:	0002      	movs	r2, r0
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e02c      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375e:	4b18      	ldr	r3, [pc, #96]	@ (80037c0 <HAL_RCC_OscConfig+0x708>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	2380      	movs	r3, #128	@ 0x80
 8003764:	049b      	lsls	r3, r3, #18
 8003766:	4013      	ands	r3, r2
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x694>
 800376a:	e024      	b.n	80037b6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e01f      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003778:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <HAL_RCC_OscConfig+0x708>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800377e:	4b10      	ldr	r3, [pc, #64]	@ (80037c0 <HAL_RCC_OscConfig+0x708>)
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	23c0      	movs	r3, #192	@ 0xc0
 8003788:	025b      	lsls	r3, r3, #9
 800378a:	401a      	ands	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003790:	429a      	cmp	r2, r3
 8003792:	d10e      	bne.n	80037b2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	220f      	movs	r2, #15
 8003798:	401a      	ands	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	23f0      	movs	r3, #240	@ 0xf0
 80037a6:	039b      	lsls	r3, r3, #14
 80037a8:	401a      	ands	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b008      	add	sp, #32
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000

080037c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0bf      	b.n	8003958 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d8:	4b61      	ldr	r3, [pc, #388]	@ (8003960 <HAL_RCC_ClockConfig+0x19c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2201      	movs	r2, #1
 80037de:	4013      	ands	r3, r2
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d911      	bls.n	800380a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b5e      	ldr	r3, [pc, #376]	@ (8003960 <HAL_RCC_ClockConfig+0x19c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2201      	movs	r2, #1
 80037ec:	4393      	bics	r3, r2
 80037ee:	0019      	movs	r1, r3
 80037f0:	4b5b      	ldr	r3, [pc, #364]	@ (8003960 <HAL_RCC_ClockConfig+0x19c>)
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f8:	4b59      	ldr	r3, [pc, #356]	@ (8003960 <HAL_RCC_ClockConfig+0x19c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2201      	movs	r2, #1
 80037fe:	4013      	ands	r3, r2
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d001      	beq.n	800380a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e0a6      	b.n	8003958 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2202      	movs	r2, #2
 8003810:	4013      	ands	r3, r2
 8003812:	d015      	beq.n	8003840 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2204      	movs	r2, #4
 800381a:	4013      	ands	r3, r2
 800381c:	d006      	beq.n	800382c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800381e:	4b51      	ldr	r3, [pc, #324]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	4b50      	ldr	r3, [pc, #320]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 8003824:	21e0      	movs	r1, #224	@ 0xe0
 8003826:	00c9      	lsls	r1, r1, #3
 8003828:	430a      	orrs	r2, r1
 800382a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b4d      	ldr	r3, [pc, #308]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	22f0      	movs	r2, #240	@ 0xf0
 8003832:	4393      	bics	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	4b4a      	ldr	r3, [pc, #296]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2201      	movs	r2, #1
 8003846:	4013      	ands	r3, r2
 8003848:	d04c      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b44      	ldr	r3, [pc, #272]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	2380      	movs	r3, #128	@ 0x80
 8003858:	029b      	lsls	r3, r3, #10
 800385a:	4013      	ands	r3, r2
 800385c:	d120      	bne.n	80038a0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e07a      	b.n	8003958 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386a:	4b3e      	ldr	r3, [pc, #248]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	2380      	movs	r3, #128	@ 0x80
 8003870:	049b      	lsls	r3, r3, #18
 8003872:	4013      	ands	r3, r2
 8003874:	d114      	bne.n	80038a0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e06e      	b.n	8003958 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b03      	cmp	r3, #3
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003882:	4b38      	ldr	r3, [pc, #224]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 8003884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003886:	2380      	movs	r3, #128	@ 0x80
 8003888:	029b      	lsls	r3, r3, #10
 800388a:	4013      	ands	r3, r2
 800388c:	d108      	bne.n	80038a0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e062      	b.n	8003958 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003892:	4b34      	ldr	r3, [pc, #208]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2202      	movs	r2, #2
 8003898:	4013      	ands	r3, r2
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e05b      	b.n	8003958 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038a0:	4b30      	ldr	r3, [pc, #192]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2203      	movs	r2, #3
 80038a6:	4393      	bics	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b4:	f7fd fe42 	bl	800153c <HAL_GetTick>
 80038b8:	0003      	movs	r3, r0
 80038ba:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038bc:	e009      	b.n	80038d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038be:	f7fd fe3d 	bl	800153c <HAL_GetTick>
 80038c2:	0002      	movs	r2, r0
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	4a27      	ldr	r2, [pc, #156]	@ (8003968 <HAL_RCC_ClockConfig+0x1a4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e042      	b.n	8003958 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	4b24      	ldr	r3, [pc, #144]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	220c      	movs	r2, #12
 80038d8:	401a      	ands	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d1ec      	bne.n	80038be <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003960 <HAL_RCC_ClockConfig+0x19c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2201      	movs	r2, #1
 80038ea:	4013      	ands	r3, r2
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d211      	bcs.n	8003916 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003960 <HAL_RCC_ClockConfig+0x19c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2201      	movs	r2, #1
 80038f8:	4393      	bics	r3, r2
 80038fa:	0019      	movs	r1, r3
 80038fc:	4b18      	ldr	r3, [pc, #96]	@ (8003960 <HAL_RCC_ClockConfig+0x19c>)
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003904:	4b16      	ldr	r3, [pc, #88]	@ (8003960 <HAL_RCC_ClockConfig+0x19c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2201      	movs	r2, #1
 800390a:	4013      	ands	r3, r2
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d001      	beq.n	8003916 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e020      	b.n	8003958 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2204      	movs	r2, #4
 800391c:	4013      	ands	r3, r2
 800391e:	d009      	beq.n	8003934 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003920:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a11      	ldr	r2, [pc, #68]	@ (800396c <HAL_RCC_ClockConfig+0x1a8>)
 8003926:	4013      	ands	r3, r2
 8003928:	0019      	movs	r1, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003934:	f000 f820 	bl	8003978 <HAL_RCC_GetSysClockFreq>
 8003938:	0001      	movs	r1, r0
 800393a:	4b0a      	ldr	r3, [pc, #40]	@ (8003964 <HAL_RCC_ClockConfig+0x1a0>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	220f      	movs	r2, #15
 8003942:	4013      	ands	r3, r2
 8003944:	4a0a      	ldr	r2, [pc, #40]	@ (8003970 <HAL_RCC_ClockConfig+0x1ac>)
 8003946:	5cd3      	ldrb	r3, [r2, r3]
 8003948:	000a      	movs	r2, r1
 800394a:	40da      	lsrs	r2, r3
 800394c:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <HAL_RCC_ClockConfig+0x1b0>)
 800394e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003950:	2003      	movs	r0, #3
 8003952:	f7fd fdad 	bl	80014b0 <HAL_InitTick>
  
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40022000 	.word	0x40022000
 8003964:	40021000 	.word	0x40021000
 8003968:	00001388 	.word	0x00001388
 800396c:	fffff8ff 	.word	0xfffff8ff
 8003970:	08004d08 	.word	0x08004d08
 8003974:	20000000 	.word	0x20000000

08003978 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003992:	4b2d      	ldr	r3, [pc, #180]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	220c      	movs	r2, #12
 800399c:	4013      	ands	r3, r2
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d046      	beq.n	8003a30 <HAL_RCC_GetSysClockFreq+0xb8>
 80039a2:	d848      	bhi.n	8003a36 <HAL_RCC_GetSysClockFreq+0xbe>
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d002      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0x36>
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d003      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x3c>
 80039ac:	e043      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039ae:	4b27      	ldr	r3, [pc, #156]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xd4>)
 80039b0:	613b      	str	r3, [r7, #16]
      break;
 80039b2:	e043      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	0c9b      	lsrs	r3, r3, #18
 80039b8:	220f      	movs	r2, #15
 80039ba:	4013      	ands	r3, r2
 80039bc:	4a24      	ldr	r2, [pc, #144]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0xd8>)
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80039c2:	4b21      	ldr	r3, [pc, #132]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c6:	220f      	movs	r2, #15
 80039c8:	4013      	ands	r3, r2
 80039ca:	4a22      	ldr	r2, [pc, #136]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0xdc>)
 80039cc:	5cd3      	ldrb	r3, [r2, r3]
 80039ce:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	23c0      	movs	r3, #192	@ 0xc0
 80039d4:	025b      	lsls	r3, r3, #9
 80039d6:	401a      	ands	r2, r3
 80039d8:	2380      	movs	r3, #128	@ 0x80
 80039da:	025b      	lsls	r3, r3, #9
 80039dc:	429a      	cmp	r2, r3
 80039de:	d109      	bne.n	80039f4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	481a      	ldr	r0, [pc, #104]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xd4>)
 80039e4:	f7fc fb90 	bl	8000108 <__udivsi3>
 80039e8:	0003      	movs	r3, r0
 80039ea:	001a      	movs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4353      	muls	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e01a      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	23c0      	movs	r3, #192	@ 0xc0
 80039f8:	025b      	lsls	r3, r3, #9
 80039fa:	401a      	ands	r2, r3
 80039fc:	23c0      	movs	r3, #192	@ 0xc0
 80039fe:	025b      	lsls	r3, r3, #9
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d109      	bne.n	8003a18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	4814      	ldr	r0, [pc, #80]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003a08:	f7fc fb7e 	bl	8000108 <__udivsi3>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	001a      	movs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4353      	muls	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	480c      	ldr	r0, [pc, #48]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a1c:	f7fc fb74 	bl	8000108 <__udivsi3>
 8003a20:	0003      	movs	r3, r0
 8003a22:	001a      	movs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4353      	muls	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	613b      	str	r3, [r7, #16]
      break;
 8003a2e:	e005      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003a30:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003a32:	613b      	str	r3, [r7, #16]
      break;
 8003a34:	e002      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a36:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a38:	613b      	str	r3, [r7, #16]
      break;
 8003a3a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a3c:	693b      	ldr	r3, [r7, #16]
}
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b006      	add	sp, #24
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	007a1200 	.word	0x007a1200
 8003a50:	08004d18 	.word	0x08004d18
 8003a54:	08004d28 	.word	0x08004d28
 8003a58:	02dc6c00 	.word	0x02dc6c00

08003a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	025b      	lsls	r3, r3, #9
 8003a74:	4013      	ands	r3, r2
 8003a76:	d100      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003a78:	e08e      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003a7a:	2017      	movs	r0, #23
 8003a7c:	183b      	adds	r3, r7, r0
 8003a7e:	2200      	movs	r2, #0
 8003a80:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a82:	4b6e      	ldr	r3, [pc, #440]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	2380      	movs	r3, #128	@ 0x80
 8003a88:	055b      	lsls	r3, r3, #21
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d110      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a8e:	4b6b      	ldr	r3, [pc, #428]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	4b6a      	ldr	r3, [pc, #424]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a94:	2180      	movs	r1, #128	@ 0x80
 8003a96:	0549      	lsls	r1, r1, #21
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	61da      	str	r2, [r3, #28]
 8003a9c:	4b67      	ldr	r3, [pc, #412]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	2380      	movs	r3, #128	@ 0x80
 8003aa2:	055b      	lsls	r3, r3, #21
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aaa:	183b      	adds	r3, r7, r0
 8003aac:	2201      	movs	r2, #1
 8003aae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab0:	4b63      	ldr	r3, [pc, #396]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	2380      	movs	r3, #128	@ 0x80
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d11a      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003abc:	4b60      	ldr	r3, [pc, #384]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4b5f      	ldr	r3, [pc, #380]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003ac2:	2180      	movs	r1, #128	@ 0x80
 8003ac4:	0049      	lsls	r1, r1, #1
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aca:	f7fd fd37 	bl	800153c <HAL_GetTick>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad4:	f7fd fd32 	bl	800153c <HAL_GetTick>
 8003ad8:	0002      	movs	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	@ 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e0a6      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae6:	4b56      	ldr	r3, [pc, #344]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	2380      	movs	r3, #128	@ 0x80
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4013      	ands	r3, r2
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003af2:	4b52      	ldr	r3, [pc, #328]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003af4:	6a1a      	ldr	r2, [r3, #32]
 8003af6:	23c0      	movs	r3, #192	@ 0xc0
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4013      	ands	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d034      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	23c0      	movs	r3, #192	@ 0xc0
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d02c      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b14:	4b49      	ldr	r3, [pc, #292]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4a4a      	ldr	r2, [pc, #296]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b1e:	4b47      	ldr	r3, [pc, #284]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b20:	6a1a      	ldr	r2, [r3, #32]
 8003b22:	4b46      	ldr	r3, [pc, #280]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b24:	2180      	movs	r1, #128	@ 0x80
 8003b26:	0249      	lsls	r1, r1, #9
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2c:	4b43      	ldr	r3, [pc, #268]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b2e:	6a1a      	ldr	r2, [r3, #32]
 8003b30:	4b42      	ldr	r3, [pc, #264]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b32:	4945      	ldr	r1, [pc, #276]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003b34:	400a      	ands	r2, r1
 8003b36:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b38:	4b40      	ldr	r3, [pc, #256]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	4013      	ands	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b46:	f7fd fcf9 	bl	800153c <HAL_GetTick>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4e:	e009      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f7fd fcf4 	bl	800153c <HAL_GetTick>
 8003b54:	0002      	movs	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	4a3c      	ldr	r2, [pc, #240]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e067      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b64:	4b35      	ldr	r3, [pc, #212]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b6e:	4b33      	ldr	r3, [pc, #204]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4a34      	ldr	r2, [pc, #208]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b82:	2317      	movs	r3, #23
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	4b2a      	ldr	r3, [pc, #168]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b92:	492f      	ldr	r1, [pc, #188]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003b94:	400a      	ands	r2, r1
 8003b96:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ba2:	4b26      	ldr	r3, [pc, #152]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	4393      	bics	r3, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	4b22      	ldr	r3, [pc, #136]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d009      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc4:	4a23      	ldr	r2, [pc, #140]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	0019      	movs	r1, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	4b1b      	ldr	r3, [pc, #108]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bde:	4b17      	ldr	r3, [pc, #92]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	2210      	movs	r2, #16
 8003be4:	4393      	bics	r3, r2
 8003be6:	0019      	movs	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	4b13      	ldr	r3, [pc, #76]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	2380      	movs	r3, #128	@ 0x80
 8003bf8:	029b      	lsls	r3, r3, #10
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c02:	2280      	movs	r2, #128	@ 0x80
 8003c04:	4393      	bics	r3, r2
 8003c06:	0019      	movs	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699a      	ldr	r2, [r3, #24]
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	2380      	movs	r3, #128	@ 0x80
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d009      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c1e:	4b07      	ldr	r3, [pc, #28]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c22:	2240      	movs	r2, #64	@ 0x40
 8003c24:	4393      	bics	r3, r2
 8003c26:	0019      	movs	r1, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	4b03      	ldr	r3, [pc, #12]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	0018      	movs	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b006      	add	sp, #24
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40007000 	.word	0x40007000
 8003c44:	fffffcff 	.word	0xfffffcff
 8003c48:	fffeffff 	.word	0xfffeffff
 8003c4c:	00001388 	.word	0x00001388
 8003c50:	efffffff 	.word	0xefffffff
 8003c54:	fffcffff 	.word	0xfffcffff

08003c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e0a8      	b.n	8003dbc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	2382      	movs	r3, #130	@ 0x82
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d009      	beq.n	8003c92 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	61da      	str	r2, [r3, #28]
 8003c84:	e005      	b.n	8003c92 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	225d      	movs	r2, #93	@ 0x5d
 8003c9c:	5c9b      	ldrb	r3, [r3, r2]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d107      	bne.n	8003cb4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	225c      	movs	r2, #92	@ 0x5c
 8003ca8:	2100      	movs	r1, #0
 8003caa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f7fd fb06 	bl	80012c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	225d      	movs	r2, #93	@ 0x5d
 8003cb8:	2102      	movs	r1, #2
 8003cba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2140      	movs	r1, #64	@ 0x40
 8003cc8:	438a      	bics	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	23e0      	movs	r3, #224	@ 0xe0
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d902      	bls.n	8003cde <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e002      	b.n	8003ce4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cde:	2380      	movs	r3, #128	@ 0x80
 8003ce0:	015b      	lsls	r3, r3, #5
 8003ce2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	23f0      	movs	r3, #240	@ 0xf0
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d008      	beq.n	8003d02 <HAL_SPI_Init+0xaa>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	23e0      	movs	r3, #224	@ 0xe0
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d002      	beq.n	8003d02 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	2382      	movs	r3, #130	@ 0x82
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	401a      	ands	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6899      	ldr	r1, [r3, #8]
 8003d10:	2384      	movs	r3, #132	@ 0x84
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	400b      	ands	r3, r1
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	400b      	ands	r3, r1
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	2101      	movs	r1, #1
 8003d28:	400b      	ands	r3, r1
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6999      	ldr	r1, [r3, #24]
 8003d30:	2380      	movs	r3, #128	@ 0x80
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	400b      	ands	r3, r1
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2138      	movs	r1, #56	@ 0x38
 8003d3e:	400b      	ands	r3, r1
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	2180      	movs	r1, #128	@ 0x80
 8003d48:	400b      	ands	r3, r1
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	0011      	movs	r1, r2
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d52:	2380      	movs	r3, #128	@ 0x80
 8003d54:	019b      	lsls	r3, r3, #6
 8003d56:	401a      	ands	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	0c1b      	lsrs	r3, r3, #16
 8003d66:	2204      	movs	r2, #4
 8003d68:	401a      	ands	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	2110      	movs	r1, #16
 8003d70:	400b      	ands	r3, r1
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d78:	2108      	movs	r1, #8
 8003d7a:	400b      	ands	r3, r1
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68d9      	ldr	r1, [r3, #12]
 8003d82:	23f0      	movs	r3, #240	@ 0xf0
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	400b      	ands	r3, r1
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	0011      	movs	r1, r2
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	2380      	movs	r3, #128	@ 0x80
 8003d90:	015b      	lsls	r3, r3, #5
 8003d92:	401a      	ands	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4907      	ldr	r1, [pc, #28]	@ (8003dc4 <HAL_SPI_Init+0x16c>)
 8003da8:	400a      	ands	r2, r1
 8003daa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	225d      	movs	r2, #93	@ 0x5d
 8003db6:	2101      	movs	r1, #1
 8003db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b004      	add	sp, #16
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	fffff7ff 	.word	0xfffff7ff

08003dc8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	1dbb      	adds	r3, r7, #6
 8003dd6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dd8:	231f      	movs	r3, #31
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	225c      	movs	r2, #92	@ 0x5c
 8003de4:	5c9b      	ldrb	r3, [r3, r2]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_SPI_Transmit+0x26>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e147      	b.n	800407e <HAL_SPI_Transmit+0x2b6>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	225c      	movs	r2, #92	@ 0x5c
 8003df2:	2101      	movs	r1, #1
 8003df4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df6:	f7fd fba1 	bl	800153c <HAL_GetTick>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003dfe:	2316      	movs	r3, #22
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	1dba      	adds	r2, r7, #6
 8003e04:	8812      	ldrh	r2, [r2, #0]
 8003e06:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	225d      	movs	r2, #93	@ 0x5d
 8003e0c:	5c9b      	ldrb	r3, [r3, r2]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d004      	beq.n	8003e1e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003e14:	231f      	movs	r3, #31
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	2202      	movs	r2, #2
 8003e1a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e1c:	e128      	b.n	8004070 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_SPI_Transmit+0x64>
 8003e24:	1dbb      	adds	r3, r7, #6
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d104      	bne.n	8003e36 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003e2c:	231f      	movs	r3, #31
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	2201      	movs	r2, #1
 8003e32:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e34:	e11c      	b.n	8004070 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	225d      	movs	r2, #93	@ 0x5d
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1dba      	adds	r2, r7, #6
 8003e4e:	8812      	ldrh	r2, [r2, #0]
 8003e50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1dba      	adds	r2, r7, #6
 8003e56:	8812      	ldrh	r2, [r2, #0]
 8003e58:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2244      	movs	r2, #68	@ 0x44
 8003e64:	2100      	movs	r1, #0
 8003e66:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2246      	movs	r2, #70	@ 0x46
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	2380      	movs	r3, #128	@ 0x80
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d110      	bne.n	8003eaa <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2140      	movs	r1, #64	@ 0x40
 8003e94:	438a      	bics	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2180      	movs	r1, #128	@ 0x80
 8003ea4:	01c9      	lsls	r1, r1, #7
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2240      	movs	r2, #64	@ 0x40
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b40      	cmp	r3, #64	@ 0x40
 8003eb6:	d007      	beq.n	8003ec8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2140      	movs	r1, #64	@ 0x40
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	23e0      	movs	r3, #224	@ 0xe0
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d952      	bls.n	8003f7a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <HAL_SPI_Transmit+0x11e>
 8003edc:	2316      	movs	r3, #22
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d143      	bne.n	8003f6e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eea:	881a      	ldrh	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef6:	1c9a      	adds	r2, r3, #2
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f0a:	e030      	b.n	8003f6e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2202      	movs	r2, #2
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d112      	bne.n	8003f40 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1e:	881a      	ldrh	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	1c9a      	adds	r2, r3, #2
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f3e:	e016      	b.n	8003f6e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f40:	f7fd fafc 	bl	800153c <HAL_GetTick>
 8003f44:	0002      	movs	r2, r0
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d802      	bhi.n	8003f56 <HAL_SPI_Transmit+0x18e>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	d102      	bne.n	8003f5c <HAL_SPI_Transmit+0x194>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d108      	bne.n	8003f6e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003f5c:	231f      	movs	r3, #31
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	2203      	movs	r2, #3
 8003f62:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	225d      	movs	r2, #93	@ 0x5d
 8003f68:	2101      	movs	r1, #1
 8003f6a:	5499      	strb	r1, [r3, r2]
          goto error;
 8003f6c:	e080      	b.n	8004070 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1c9      	bne.n	8003f0c <HAL_SPI_Transmit+0x144>
 8003f78:	e053      	b.n	8004022 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <HAL_SPI_Transmit+0x1c4>
 8003f82:	2316      	movs	r3, #22
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d145      	bne.n	8004018 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	7812      	ldrb	r2, [r2, #0]
 8003f98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003fb2:	e031      	b.n	8004018 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d113      	bne.n	8003fea <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	7812      	ldrb	r2, [r2, #0]
 8003fce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fe8:	e016      	b.n	8004018 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fea:	f7fd faa7 	bl	800153c <HAL_GetTick>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d802      	bhi.n	8004000 <HAL_SPI_Transmit+0x238>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	d102      	bne.n	8004006 <HAL_SPI_Transmit+0x23e>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d108      	bne.n	8004018 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8004006:	231f      	movs	r3, #31
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	2203      	movs	r2, #3
 800400c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	225d      	movs	r2, #93	@ 0x5d
 8004012:	2101      	movs	r1, #1
 8004014:	5499      	strb	r1, [r3, r2]
          goto error;
 8004016:	e02b      	b.n	8004070 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1c8      	bne.n	8003fb4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	6839      	ldr	r1, [r7, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	0018      	movs	r0, r3
 800402a:	f000 f95d 	bl	80042e8 <SPI_EndRxTxTransaction>
 800402e:	1e03      	subs	r3, r0, #0
 8004030:	d002      	beq.n	8004038 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405a:	2b00      	cmp	r3, #0
 800405c:	d004      	beq.n	8004068 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800405e:	231f      	movs	r3, #31
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	e003      	b.n	8004070 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	225d      	movs	r2, #93	@ 0x5d
 800406c:	2101      	movs	r1, #1
 800406e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	225c      	movs	r2, #92	@ 0x5c
 8004074:	2100      	movs	r1, #0
 8004076:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004078:	231f      	movs	r3, #31
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	781b      	ldrb	r3, [r3, #0]
}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b008      	add	sp, #32
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	1dfb      	adds	r3, r7, #7
 8004096:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004098:	f7fd fa50 	bl	800153c <HAL_GetTick>
 800409c:	0002      	movs	r2, r0
 800409e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	18d3      	adds	r3, r2, r3
 80040a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040a8:	f7fd fa48 	bl	800153c <HAL_GetTick>
 80040ac:	0003      	movs	r3, r0
 80040ae:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040b0:	4b3a      	ldr	r3, [pc, #232]	@ (800419c <SPI_WaitFlagStateUntilTimeout+0x114>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	015b      	lsls	r3, r3, #5
 80040b6:	0d1b      	lsrs	r3, r3, #20
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	4353      	muls	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040be:	e058      	b.n	8004172 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	3301      	adds	r3, #1
 80040c4:	d055      	beq.n	8004172 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040c6:	f7fd fa39 	bl	800153c <HAL_GetTick>
 80040ca:	0002      	movs	r2, r0
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d902      	bls.n	80040dc <SPI_WaitFlagStateUntilTimeout+0x54>
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d142      	bne.n	8004162 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	21e0      	movs	r1, #224	@ 0xe0
 80040e8:	438a      	bics	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	2382      	movs	r3, #130	@ 0x82
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d113      	bne.n	8004120 <SPI_WaitFlagStateUntilTimeout+0x98>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	2380      	movs	r3, #128	@ 0x80
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	429a      	cmp	r2, r3
 8004102:	d005      	beq.n	8004110 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	2380      	movs	r3, #128	@ 0x80
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	429a      	cmp	r2, r3
 800410e:	d107      	bne.n	8004120 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2140      	movs	r1, #64	@ 0x40
 800411c:	438a      	bics	r2, r1
 800411e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004124:	2380      	movs	r3, #128	@ 0x80
 8004126:	019b      	lsls	r3, r3, #6
 8004128:	429a      	cmp	r2, r3
 800412a:	d110      	bne.n	800414e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	491a      	ldr	r1, [pc, #104]	@ (80041a0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004138:	400a      	ands	r2, r1
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2180      	movs	r1, #128	@ 0x80
 8004148:	0189      	lsls	r1, r1, #6
 800414a:	430a      	orrs	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	225d      	movs	r2, #93	@ 0x5d
 8004152:	2101      	movs	r1, #1
 8004154:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	225c      	movs	r2, #92	@ 0x5c
 800415a:	2100      	movs	r1, #0
 800415c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e017      	b.n	8004192 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	3b01      	subs	r3, #1
 8004170:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	425a      	negs	r2, r3
 8004182:	4153      	adcs	r3, r2
 8004184:	b2db      	uxtb	r3, r3
 8004186:	001a      	movs	r2, r3
 8004188:	1dfb      	adds	r3, r7, #7
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d197      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	0018      	movs	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	b008      	add	sp, #32
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	20000000 	.word	0x20000000
 80041a0:	ffffdfff 	.word	0xffffdfff

080041a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	@ 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80041b2:	2317      	movs	r3, #23
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80041ba:	f7fd f9bf 	bl	800153c <HAL_GetTick>
 80041be:	0002      	movs	r2, r0
 80041c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	18d3      	adds	r3, r2, r3
 80041c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80041ca:	f7fd f9b7 	bl	800153c <HAL_GetTick>
 80041ce:	0003      	movs	r3, r0
 80041d0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80041da:	4b41      	ldr	r3, [pc, #260]	@ (80042e0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	0013      	movs	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	189b      	adds	r3, r3, r2
 80041e4:	00da      	lsls	r2, r3, #3
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	0d1b      	lsrs	r3, r3, #20
 80041ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ec:	4353      	muls	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80041f0:	e068      	b.n	80042c4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	23c0      	movs	r3, #192	@ 0xc0
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d10a      	bne.n	8004212 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d107      	bne.n	8004212 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	b2da      	uxtb	r2, r3
 8004208:	2117      	movs	r1, #23
 800420a:	187b      	adds	r3, r7, r1
 800420c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800420e:	187b      	adds	r3, r7, r1
 8004210:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	d055      	beq.n	80042c4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004218:	f7fd f990 	bl	800153c <HAL_GetTick>
 800421c:	0002      	movs	r2, r0
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004224:	429a      	cmp	r2, r3
 8004226:	d902      	bls.n	800422e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	d142      	bne.n	80042b4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	21e0      	movs	r1, #224	@ 0xe0
 800423a:	438a      	bics	r2, r1
 800423c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	2382      	movs	r3, #130	@ 0x82
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	429a      	cmp	r2, r3
 8004248:	d113      	bne.n	8004272 <SPI_WaitFifoStateUntilTimeout+0xce>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	2380      	movs	r3, #128	@ 0x80
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	429a      	cmp	r2, r3
 8004254:	d005      	beq.n	8004262 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	429a      	cmp	r2, r3
 8004260:	d107      	bne.n	8004272 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2140      	movs	r1, #64	@ 0x40
 800426e:	438a      	bics	r2, r1
 8004270:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004276:	2380      	movs	r3, #128	@ 0x80
 8004278:	019b      	lsls	r3, r3, #6
 800427a:	429a      	cmp	r2, r3
 800427c:	d110      	bne.n	80042a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4916      	ldr	r1, [pc, #88]	@ (80042e4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800428a:	400a      	ands	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2180      	movs	r1, #128	@ 0x80
 800429a:	0189      	lsls	r1, r1, #6
 800429c:	430a      	orrs	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	225d      	movs	r2, #93	@ 0x5d
 80042a4:	2101      	movs	r1, #1
 80042a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	225c      	movs	r2, #92	@ 0x5c
 80042ac:	2100      	movs	r1, #0
 80042ae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e010      	b.n	80042d6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	4013      	ands	r3, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d18e      	bne.n	80041f2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	0018      	movs	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	b00a      	add	sp, #40	@ 0x28
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	20000000 	.word	0x20000000
 80042e4:	ffffdfff 	.word	0xffffdfff

080042e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	23c0      	movs	r3, #192	@ 0xc0
 80042f8:	0159      	lsls	r1, r3, #5
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	0013      	movs	r3, r2
 8004302:	2200      	movs	r2, #0
 8004304:	f7ff ff4e 	bl	80041a4 <SPI_WaitFifoStateUntilTimeout>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d007      	beq.n	800431c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004310:	2220      	movs	r2, #32
 8004312:	431a      	orrs	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e027      	b.n	800436c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	0013      	movs	r3, r2
 8004326:	2200      	movs	r2, #0
 8004328:	2180      	movs	r1, #128	@ 0x80
 800432a:	f7ff fead 	bl	8004088 <SPI_WaitFlagStateUntilTimeout>
 800432e:	1e03      	subs	r3, r0, #0
 8004330:	d007      	beq.n	8004342 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004336:	2220      	movs	r2, #32
 8004338:	431a      	orrs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e014      	b.n	800436c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	23c0      	movs	r3, #192	@ 0xc0
 8004346:	00d9      	lsls	r1, r3, #3
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	0013      	movs	r3, r2
 8004350:	2200      	movs	r2, #0
 8004352:	f7ff ff27 	bl	80041a4 <SPI_WaitFifoStateUntilTimeout>
 8004356:	1e03      	subs	r3, r0, #0
 8004358:	d007      	beq.n	800436a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800435e:	2220      	movs	r2, #32
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e000      	b.n	800436c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b004      	add	sp, #16
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e042      	b.n	800440c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	223d      	movs	r2, #61	@ 0x3d
 800438a:	5c9b      	ldrb	r3, [r3, r2]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d107      	bne.n	80043a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	223c      	movs	r2, #60	@ 0x3c
 8004396:	2100      	movs	r1, #0
 8004398:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	0018      	movs	r0, r3
 800439e:	f7fc ffdd 	bl	800135c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	223d      	movs	r2, #61	@ 0x3d
 80043a6:	2102      	movs	r1, #2
 80043a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	0019      	movs	r1, r3
 80043b4:	0010      	movs	r0, r2
 80043b6:	f000 fa89 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2246      	movs	r2, #70	@ 0x46
 80043be:	2101      	movs	r1, #1
 80043c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	223e      	movs	r2, #62	@ 0x3e
 80043c6:	2101      	movs	r1, #1
 80043c8:	5499      	strb	r1, [r3, r2]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	223f      	movs	r2, #63	@ 0x3f
 80043ce:	2101      	movs	r1, #1
 80043d0:	5499      	strb	r1, [r3, r2]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2240      	movs	r2, #64	@ 0x40
 80043d6:	2101      	movs	r1, #1
 80043d8:	5499      	strb	r1, [r3, r2]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2241      	movs	r2, #65	@ 0x41
 80043de:	2101      	movs	r1, #1
 80043e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2242      	movs	r2, #66	@ 0x42
 80043e6:	2101      	movs	r1, #1
 80043e8:	5499      	strb	r1, [r3, r2]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2243      	movs	r2, #67	@ 0x43
 80043ee:	2101      	movs	r1, #1
 80043f0:	5499      	strb	r1, [r3, r2]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2244      	movs	r2, #68	@ 0x44
 80043f6:	2101      	movs	r1, #1
 80043f8:	5499      	strb	r1, [r3, r2]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2245      	movs	r2, #69	@ 0x45
 80043fe:	2101      	movs	r1, #1
 8004400:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	223d      	movs	r2, #61	@ 0x3d
 8004406:	2101      	movs	r1, #1
 8004408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	0018      	movs	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	b002      	add	sp, #8
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	223d      	movs	r2, #61	@ 0x3d
 8004420:	5c9b      	ldrb	r3, [r3, r2]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d001      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e03b      	b.n	80044a4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	223d      	movs	r2, #61	@ 0x3d
 8004430:	2102      	movs	r1, #2
 8004432:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2101      	movs	r1, #1
 8004440:	430a      	orrs	r2, r1
 8004442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a18      	ldr	r2, [pc, #96]	@ (80044ac <HAL_TIM_Base_Start_IT+0x98>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00f      	beq.n	800446e <HAL_TIM_Base_Start_IT+0x5a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	2380      	movs	r3, #128	@ 0x80
 8004454:	05db      	lsls	r3, r3, #23
 8004456:	429a      	cmp	r2, r3
 8004458:	d009      	beq.n	800446e <HAL_TIM_Base_Start_IT+0x5a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a14      	ldr	r2, [pc, #80]	@ (80044b0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_TIM_Base_Start_IT+0x5a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a12      	ldr	r2, [pc, #72]	@ (80044b4 <HAL_TIM_Base_Start_IT+0xa0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d111      	bne.n	8004492 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2207      	movs	r2, #7
 8004476:	4013      	ands	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b06      	cmp	r3, #6
 800447e:	d010      	beq.n	80044a2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2101      	movs	r1, #1
 800448c:	430a      	orrs	r2, r1
 800448e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004490:	e007      	b.n	80044a2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2101      	movs	r1, #1
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b004      	add	sp, #16
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40014000 	.word	0x40014000

080044b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2202      	movs	r2, #2
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d124      	bne.n	8004518 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2202      	movs	r2, #2
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d11d      	bne.n	8004518 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2203      	movs	r2, #3
 80044e2:	4252      	negs	r2, r2
 80044e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	2203      	movs	r2, #3
 80044f4:	4013      	ands	r3, r2
 80044f6:	d004      	beq.n	8004502 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	0018      	movs	r0, r3
 80044fc:	f000 f9ce 	bl	800489c <HAL_TIM_IC_CaptureCallback>
 8004500:	e007      	b.n	8004512 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0018      	movs	r0, r3
 8004506:	f000 f9c1 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	0018      	movs	r0, r3
 800450e:	f000 f9cd 	bl	80048ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2204      	movs	r2, #4
 8004520:	4013      	ands	r3, r2
 8004522:	2b04      	cmp	r3, #4
 8004524:	d125      	bne.n	8004572 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2204      	movs	r2, #4
 800452e:	4013      	ands	r3, r2
 8004530:	2b04      	cmp	r3, #4
 8004532:	d11e      	bne.n	8004572 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2205      	movs	r2, #5
 800453a:	4252      	negs	r2, r2
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	23c0      	movs	r3, #192	@ 0xc0
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4013      	ands	r3, r2
 8004550:	d004      	beq.n	800455c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	0018      	movs	r0, r3
 8004556:	f000 f9a1 	bl	800489c <HAL_TIM_IC_CaptureCallback>
 800455a:	e007      	b.n	800456c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	0018      	movs	r0, r3
 8004560:	f000 f994 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	0018      	movs	r0, r3
 8004568:	f000 f9a0 	bl	80048ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2208      	movs	r2, #8
 800457a:	4013      	ands	r3, r2
 800457c:	2b08      	cmp	r3, #8
 800457e:	d124      	bne.n	80045ca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2208      	movs	r2, #8
 8004588:	4013      	ands	r3, r2
 800458a:	2b08      	cmp	r3, #8
 800458c:	d11d      	bne.n	80045ca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2209      	movs	r2, #9
 8004594:	4252      	negs	r2, r2
 8004596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2204      	movs	r2, #4
 800459c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	2203      	movs	r2, #3
 80045a6:	4013      	ands	r3, r2
 80045a8:	d004      	beq.n	80045b4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	0018      	movs	r0, r3
 80045ae:	f000 f975 	bl	800489c <HAL_TIM_IC_CaptureCallback>
 80045b2:	e007      	b.n	80045c4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	0018      	movs	r0, r3
 80045b8:	f000 f968 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	0018      	movs	r0, r3
 80045c0:	f000 f974 	bl	80048ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2210      	movs	r2, #16
 80045d2:	4013      	ands	r3, r2
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d125      	bne.n	8004624 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	2210      	movs	r2, #16
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	d11e      	bne.n	8004624 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2211      	movs	r2, #17
 80045ec:	4252      	negs	r2, r2
 80045ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2208      	movs	r2, #8
 80045f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	23c0      	movs	r3, #192	@ 0xc0
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4013      	ands	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	0018      	movs	r0, r3
 8004608:	f000 f948 	bl	800489c <HAL_TIM_IC_CaptureCallback>
 800460c:	e007      	b.n	800461e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	0018      	movs	r0, r3
 8004612:	f000 f93b 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	0018      	movs	r0, r3
 800461a:	f000 f947 	bl	80048ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2201      	movs	r2, #1
 800462c:	4013      	ands	r3, r2
 800462e:	2b01      	cmp	r3, #1
 8004630:	d10f      	bne.n	8004652 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	4013      	ands	r3, r2
 800463c:	2b01      	cmp	r3, #1
 800463e:	d108      	bne.n	8004652 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2202      	movs	r2, #2
 8004646:	4252      	negs	r2, r2
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	0018      	movs	r0, r3
 800464e:	f7fc fba1 	bl	8000d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2280      	movs	r2, #128	@ 0x80
 800465a:	4013      	ands	r3, r2
 800465c:	2b80      	cmp	r3, #128	@ 0x80
 800465e:	d10f      	bne.n	8004680 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	2280      	movs	r2, #128	@ 0x80
 8004668:	4013      	ands	r3, r2
 800466a:	2b80      	cmp	r3, #128	@ 0x80
 800466c:	d108      	bne.n	8004680 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2281      	movs	r2, #129	@ 0x81
 8004674:	4252      	negs	r2, r2
 8004676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	0018      	movs	r0, r3
 800467c:	f000 faa6 	bl	8004bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2240      	movs	r2, #64	@ 0x40
 8004688:	4013      	ands	r3, r2
 800468a:	2b40      	cmp	r3, #64	@ 0x40
 800468c:	d10f      	bne.n	80046ae <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2240      	movs	r2, #64	@ 0x40
 8004696:	4013      	ands	r3, r2
 8004698:	2b40      	cmp	r3, #64	@ 0x40
 800469a:	d108      	bne.n	80046ae <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2241      	movs	r2, #65	@ 0x41
 80046a2:	4252      	negs	r2, r2
 80046a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	0018      	movs	r0, r3
 80046aa:	f000 f907 	bl	80048bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2220      	movs	r2, #32
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d10f      	bne.n	80046dc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d108      	bne.n	80046dc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2221      	movs	r2, #33	@ 0x21
 80046d0:	4252      	negs	r2, r2
 80046d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	0018      	movs	r0, r3
 80046d8:	f000 fa70 	bl	8004bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046dc:	46c0      	nop			@ (mov r8, r8)
 80046de:	46bd      	mov	sp, r7
 80046e0:	b002      	add	sp, #8
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ee:	230f      	movs	r3, #15
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	2200      	movs	r2, #0
 80046f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	223c      	movs	r2, #60	@ 0x3c
 80046fa:	5c9b      	ldrb	r3, [r3, r2]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_TIM_ConfigClockSource+0x20>
 8004700:	2302      	movs	r3, #2
 8004702:	e0bc      	b.n	800487e <HAL_TIM_ConfigClockSource+0x19a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	223c      	movs	r2, #60	@ 0x3c
 8004708:	2101      	movs	r1, #1
 800470a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	223d      	movs	r2, #61	@ 0x3d
 8004710:	2102      	movs	r1, #2
 8004712:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2277      	movs	r2, #119	@ 0x77
 8004720:	4393      	bics	r3, r2
 8004722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a58      	ldr	r2, [pc, #352]	@ (8004888 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004728:	4013      	ands	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2280      	movs	r2, #128	@ 0x80
 800473a:	0192      	lsls	r2, r2, #6
 800473c:	4293      	cmp	r3, r2
 800473e:	d040      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0xde>
 8004740:	2280      	movs	r2, #128	@ 0x80
 8004742:	0192      	lsls	r2, r2, #6
 8004744:	4293      	cmp	r3, r2
 8004746:	d900      	bls.n	800474a <HAL_TIM_ConfigClockSource+0x66>
 8004748:	e088      	b.n	800485c <HAL_TIM_ConfigClockSource+0x178>
 800474a:	2280      	movs	r2, #128	@ 0x80
 800474c:	0152      	lsls	r2, r2, #5
 800474e:	4293      	cmp	r3, r2
 8004750:	d100      	bne.n	8004754 <HAL_TIM_ConfigClockSource+0x70>
 8004752:	e088      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x182>
 8004754:	2280      	movs	r2, #128	@ 0x80
 8004756:	0152      	lsls	r2, r2, #5
 8004758:	4293      	cmp	r3, r2
 800475a:	d900      	bls.n	800475e <HAL_TIM_ConfigClockSource+0x7a>
 800475c:	e07e      	b.n	800485c <HAL_TIM_ConfigClockSource+0x178>
 800475e:	2b70      	cmp	r3, #112	@ 0x70
 8004760:	d018      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0xb0>
 8004762:	d900      	bls.n	8004766 <HAL_TIM_ConfigClockSource+0x82>
 8004764:	e07a      	b.n	800485c <HAL_TIM_ConfigClockSource+0x178>
 8004766:	2b60      	cmp	r3, #96	@ 0x60
 8004768:	d04f      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x126>
 800476a:	d900      	bls.n	800476e <HAL_TIM_ConfigClockSource+0x8a>
 800476c:	e076      	b.n	800485c <HAL_TIM_ConfigClockSource+0x178>
 800476e:	2b50      	cmp	r3, #80	@ 0x50
 8004770:	d03b      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x106>
 8004772:	d900      	bls.n	8004776 <HAL_TIM_ConfigClockSource+0x92>
 8004774:	e072      	b.n	800485c <HAL_TIM_ConfigClockSource+0x178>
 8004776:	2b40      	cmp	r3, #64	@ 0x40
 8004778:	d057      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x146>
 800477a:	d900      	bls.n	800477e <HAL_TIM_ConfigClockSource+0x9a>
 800477c:	e06e      	b.n	800485c <HAL_TIM_ConfigClockSource+0x178>
 800477e:	2b30      	cmp	r3, #48	@ 0x30
 8004780:	d063      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x166>
 8004782:	d86b      	bhi.n	800485c <HAL_TIM_ConfigClockSource+0x178>
 8004784:	2b20      	cmp	r3, #32
 8004786:	d060      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x166>
 8004788:	d868      	bhi.n	800485c <HAL_TIM_ConfigClockSource+0x178>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d05d      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x166>
 800478e:	2b10      	cmp	r3, #16
 8004790:	d05b      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x166>
 8004792:	e063      	b.n	800485c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047a4:	f000 f98c 	bl	8004ac0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2277      	movs	r2, #119	@ 0x77
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	609a      	str	r2, [r3, #8]
      break;
 80047c0:	e052      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047d2:	f000 f975 	bl	8004ac0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2180      	movs	r1, #128	@ 0x80
 80047e2:	01c9      	lsls	r1, r1, #7
 80047e4:	430a      	orrs	r2, r1
 80047e6:	609a      	str	r2, [r3, #8]
      break;
 80047e8:	e03e      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f6:	001a      	movs	r2, r3
 80047f8:	f000 f8e8 	bl	80049cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2150      	movs	r1, #80	@ 0x50
 8004802:	0018      	movs	r0, r3
 8004804:	f000 f942 	bl	8004a8c <TIM_ITRx_SetConfig>
      break;
 8004808:	e02e      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004816:	001a      	movs	r2, r3
 8004818:	f000 f906 	bl	8004a28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2160      	movs	r1, #96	@ 0x60
 8004822:	0018      	movs	r0, r3
 8004824:	f000 f932 	bl	8004a8c <TIM_ITRx_SetConfig>
      break;
 8004828:	e01e      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004836:	001a      	movs	r2, r3
 8004838:	f000 f8c8 	bl	80049cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2140      	movs	r1, #64	@ 0x40
 8004842:	0018      	movs	r0, r3
 8004844:	f000 f922 	bl	8004a8c <TIM_ITRx_SetConfig>
      break;
 8004848:	e00e      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	0019      	movs	r1, r3
 8004854:	0010      	movs	r0, r2
 8004856:	f000 f919 	bl	8004a8c <TIM_ITRx_SetConfig>
      break;
 800485a:	e005      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800485c:	230f      	movs	r3, #15
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
      break;
 8004864:	e000      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004866:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	223d      	movs	r2, #61	@ 0x3d
 800486c:	2101      	movs	r1, #1
 800486e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	223c      	movs	r2, #60	@ 0x3c
 8004874:	2100      	movs	r1, #0
 8004876:	5499      	strb	r1, [r3, r2]

  return status;
 8004878:	230f      	movs	r3, #15
 800487a:	18fb      	adds	r3, r7, r3
 800487c:	781b      	ldrb	r3, [r3, #0]
}
 800487e:	0018      	movs	r0, r3
 8004880:	46bd      	mov	sp, r7
 8004882:	b004      	add	sp, #16
 8004884:	bd80      	pop	{r7, pc}
 8004886:	46c0      	nop			@ (mov r8, r8)
 8004888:	ffff00ff 	.word	0xffff00ff

0800488c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004894:	46c0      	nop			@ (mov r8, r8)
 8004896:	46bd      	mov	sp, r7
 8004898:	b002      	add	sp, #8
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048a4:	46c0      	nop			@ (mov r8, r8)
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b002      	add	sp, #8
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048b4:	46c0      	nop			@ (mov r8, r8)
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b002      	add	sp, #8
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c4:	46c0      	nop			@ (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b002      	add	sp, #8
 80048ca:	bd80      	pop	{r7, pc}

080048cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a34      	ldr	r2, [pc, #208]	@ (80049b0 <TIM_Base_SetConfig+0xe4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d008      	beq.n	80048f6 <TIM_Base_SetConfig+0x2a>
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	2380      	movs	r3, #128	@ 0x80
 80048e8:	05db      	lsls	r3, r3, #23
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d003      	beq.n	80048f6 <TIM_Base_SetConfig+0x2a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a30      	ldr	r2, [pc, #192]	@ (80049b4 <TIM_Base_SetConfig+0xe8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d108      	bne.n	8004908 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2270      	movs	r2, #112	@ 0x70
 80048fa:	4393      	bics	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a29      	ldr	r2, [pc, #164]	@ (80049b0 <TIM_Base_SetConfig+0xe4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d018      	beq.n	8004942 <TIM_Base_SetConfig+0x76>
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	2380      	movs	r3, #128	@ 0x80
 8004914:	05db      	lsls	r3, r3, #23
 8004916:	429a      	cmp	r2, r3
 8004918:	d013      	beq.n	8004942 <TIM_Base_SetConfig+0x76>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a25      	ldr	r2, [pc, #148]	@ (80049b4 <TIM_Base_SetConfig+0xe8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00f      	beq.n	8004942 <TIM_Base_SetConfig+0x76>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a24      	ldr	r2, [pc, #144]	@ (80049b8 <TIM_Base_SetConfig+0xec>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00b      	beq.n	8004942 <TIM_Base_SetConfig+0x76>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a23      	ldr	r2, [pc, #140]	@ (80049bc <TIM_Base_SetConfig+0xf0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d007      	beq.n	8004942 <TIM_Base_SetConfig+0x76>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a22      	ldr	r2, [pc, #136]	@ (80049c0 <TIM_Base_SetConfig+0xf4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_Base_SetConfig+0x76>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a21      	ldr	r2, [pc, #132]	@ (80049c4 <TIM_Base_SetConfig+0xf8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d108      	bne.n	8004954 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4a20      	ldr	r2, [pc, #128]	@ (80049c8 <TIM_Base_SetConfig+0xfc>)
 8004946:	4013      	ands	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2280      	movs	r2, #128	@ 0x80
 8004958:	4393      	bics	r3, r2
 800495a:	001a      	movs	r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a0c      	ldr	r2, [pc, #48]	@ (80049b0 <TIM_Base_SetConfig+0xe4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_Base_SetConfig+0xce>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a0d      	ldr	r2, [pc, #52]	@ (80049bc <TIM_Base_SetConfig+0xf0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_Base_SetConfig+0xce>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a0c      	ldr	r2, [pc, #48]	@ (80049c0 <TIM_Base_SetConfig+0xf4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_Base_SetConfig+0xce>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a0b      	ldr	r2, [pc, #44]	@ (80049c4 <TIM_Base_SetConfig+0xf8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d103      	bne.n	80049a2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	615a      	str	r2, [r3, #20]
}
 80049a8:	46c0      	nop			@ (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b004      	add	sp, #16
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40002000 	.word	0x40002000
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	fffffcff 	.word	0xfffffcff

080049cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	2201      	movs	r2, #1
 80049e4:	4393      	bics	r3, r2
 80049e6:	001a      	movs	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	22f0      	movs	r2, #240	@ 0xf0
 80049f6:	4393      	bics	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	220a      	movs	r2, #10
 8004a08:	4393      	bics	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	621a      	str	r2, [r3, #32]
}
 8004a20:	46c0      	nop			@ (mov r8, r8)
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b006      	add	sp, #24
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	2210      	movs	r2, #16
 8004a3a:	4393      	bics	r3, r2
 8004a3c:	001a      	movs	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	4a0d      	ldr	r2, [pc, #52]	@ (8004a88 <TIM_TI2_ConfigInputStage+0x60>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	031b      	lsls	r3, r3, #12
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	22a0      	movs	r2, #160	@ 0xa0
 8004a64:	4393      	bics	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b006      	add	sp, #24
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	ffff0fff 	.word	0xffff0fff

08004a8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2270      	movs	r2, #112	@ 0x70
 8004aa0:	4393      	bics	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	2207      	movs	r2, #7
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	609a      	str	r2, [r3, #8]
}
 8004ab6:	46c0      	nop			@ (mov r8, r8)
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b004      	add	sp, #16
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	4a09      	ldr	r2, [pc, #36]	@ (8004afc <TIM_ETR_SetConfig+0x3c>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	021a      	lsls	r2, r3, #8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	609a      	str	r2, [r3, #8]
}
 8004af4:	46c0      	nop			@ (mov r8, r8)
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b006      	add	sp, #24
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	ffff00ff 	.word	0xffff00ff

08004b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	223c      	movs	r2, #60	@ 0x3c
 8004b0e:	5c9b      	ldrb	r3, [r3, r2]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e047      	b.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	223c      	movs	r2, #60	@ 0x3c
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	223d      	movs	r2, #61	@ 0x3d
 8004b24:	2102      	movs	r1, #2
 8004b26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2270      	movs	r2, #112	@ 0x70
 8004b3c:	4393      	bics	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a16      	ldr	r2, [pc, #88]	@ (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00f      	beq.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	2380      	movs	r3, #128	@ 0x80
 8004b62:	05db      	lsls	r3, r3, #23
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d009      	beq.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a11      	ldr	r2, [pc, #68]	@ (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a10      	ldr	r2, [pc, #64]	@ (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d10c      	bne.n	8004b96 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2280      	movs	r2, #128	@ 0x80
 8004b80:	4393      	bics	r3, r2
 8004b82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	223d      	movs	r2, #61	@ 0x3d
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	223c      	movs	r2, #60	@ 0x3c
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b004      	add	sp, #16
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40014000 	.word	0x40014000

08004bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bc4:	46c0      	nop			@ (mov r8, r8)
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bd4:	46c0      	nop			@ (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b002      	add	sp, #8
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <memset>:
 8004bdc:	0003      	movs	r3, r0
 8004bde:	1882      	adds	r2, r0, r2
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d100      	bne.n	8004be6 <memset+0xa>
 8004be4:	4770      	bx	lr
 8004be6:	7019      	strb	r1, [r3, #0]
 8004be8:	3301      	adds	r3, #1
 8004bea:	e7f9      	b.n	8004be0 <memset+0x4>

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	2600      	movs	r6, #0
 8004bf0:	4c0c      	ldr	r4, [pc, #48]	@ (8004c24 <__libc_init_array+0x38>)
 8004bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8004c28 <__libc_init_array+0x3c>)
 8004bf4:	1b64      	subs	r4, r4, r5
 8004bf6:	10a4      	asrs	r4, r4, #2
 8004bf8:	42a6      	cmp	r6, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	2600      	movs	r6, #0
 8004bfe:	f000 f819 	bl	8004c34 <_init>
 8004c02:	4c0a      	ldr	r4, [pc, #40]	@ (8004c2c <__libc_init_array+0x40>)
 8004c04:	4d0a      	ldr	r5, [pc, #40]	@ (8004c30 <__libc_init_array+0x44>)
 8004c06:	1b64      	subs	r4, r4, r5
 8004c08:	10a4      	asrs	r4, r4, #2
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	00b3      	lsls	r3, r6, #2
 8004c12:	58eb      	ldr	r3, [r5, r3]
 8004c14:	4798      	blx	r3
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	00b3      	lsls	r3, r6, #2
 8004c1c:	58eb      	ldr	r3, [r5, r3]
 8004c1e:	4798      	blx	r3
 8004c20:	3601      	adds	r6, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	08004d38 	.word	0x08004d38
 8004c28:	08004d38 	.word	0x08004d38
 8004c2c:	08004d3c 	.word	0x08004d3c
 8004c30:	08004d38 	.word	0x08004d38

08004c34 <_init>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3a:	bc08      	pop	{r3}
 8004c3c:	469e      	mov	lr, r3
 8004c3e:	4770      	bx	lr

08004c40 <_fini>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr
