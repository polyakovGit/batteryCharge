
batteryCharge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036fc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080037bc  080037bc  000047bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a8  080038a8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080038a8  080038a8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038a8  080038a8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a8  080038a8  000048a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038ac  080038ac  000048ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080038b0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  080038bc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080038bc  0000514c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc1e  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df1  00000000  00000000  00011c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00013a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b38  00000000  00000000  00014888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190b9  00000000  00000000  000153c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001109a  00000000  00000000  0002e479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009395e  00000000  00000000  0003f513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2e71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003578  00000000  00000000  000d2eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d642c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037a4 	.word	0x080037a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080037a4 	.word	0x080037a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	@ 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fb90 	bl	800094c <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 faef 	bl	8000814 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	@ 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 f945 	bl	80004cc <__aeabi_fsub>
 8000242:	f000 fae7 	bl	8000814 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fmul>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	464f      	mov	r7, r9
 8000254:	4646      	mov	r6, r8
 8000256:	46d6      	mov	lr, sl
 8000258:	0243      	lsls	r3, r0, #9
 800025a:	0a5b      	lsrs	r3, r3, #9
 800025c:	0045      	lsls	r5, r0, #1
 800025e:	b5c0      	push	{r6, r7, lr}
 8000260:	4699      	mov	r9, r3
 8000262:	1c0f      	adds	r7, r1, #0
 8000264:	0e2d      	lsrs	r5, r5, #24
 8000266:	0fc6      	lsrs	r6, r0, #31
 8000268:	2d00      	cmp	r5, #0
 800026a:	d100      	bne.n	800026e <__aeabi_fmul+0x1e>
 800026c:	e088      	b.n	8000380 <__aeabi_fmul+0x130>
 800026e:	2dff      	cmp	r5, #255	@ 0xff
 8000270:	d100      	bne.n	8000274 <__aeabi_fmul+0x24>
 8000272:	e08d      	b.n	8000390 <__aeabi_fmul+0x140>
 8000274:	2280      	movs	r2, #128	@ 0x80
 8000276:	00db      	lsls	r3, r3, #3
 8000278:	04d2      	lsls	r2, r2, #19
 800027a:	431a      	orrs	r2, r3
 800027c:	2300      	movs	r3, #0
 800027e:	4691      	mov	r9, r2
 8000280:	4698      	mov	r8, r3
 8000282:	469a      	mov	sl, r3
 8000284:	3d7f      	subs	r5, #127	@ 0x7f
 8000286:	027c      	lsls	r4, r7, #9
 8000288:	007b      	lsls	r3, r7, #1
 800028a:	0a64      	lsrs	r4, r4, #9
 800028c:	0e1b      	lsrs	r3, r3, #24
 800028e:	0fff      	lsrs	r7, r7, #31
 8000290:	2b00      	cmp	r3, #0
 8000292:	d068      	beq.n	8000366 <__aeabi_fmul+0x116>
 8000294:	2bff      	cmp	r3, #255	@ 0xff
 8000296:	d021      	beq.n	80002dc <__aeabi_fmul+0x8c>
 8000298:	2280      	movs	r2, #128	@ 0x80
 800029a:	00e4      	lsls	r4, r4, #3
 800029c:	04d2      	lsls	r2, r2, #19
 800029e:	4314      	orrs	r4, r2
 80002a0:	4642      	mov	r2, r8
 80002a2:	3b7f      	subs	r3, #127	@ 0x7f
 80002a4:	195b      	adds	r3, r3, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	1c5d      	adds	r5, r3, #1
 80002aa:	2a0a      	cmp	r2, #10
 80002ac:	dc2e      	bgt.n	800030c <__aeabi_fmul+0xbc>
 80002ae:	407e      	eors	r6, r7
 80002b0:	4642      	mov	r2, r8
 80002b2:	2a02      	cmp	r2, #2
 80002b4:	dc23      	bgt.n	80002fe <__aeabi_fmul+0xae>
 80002b6:	3a01      	subs	r2, #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	d900      	bls.n	80002be <__aeabi_fmul+0x6e>
 80002bc:	e0bd      	b.n	800043a <__aeabi_fmul+0x1ea>
 80002be:	2902      	cmp	r1, #2
 80002c0:	d06e      	beq.n	80003a0 <__aeabi_fmul+0x150>
 80002c2:	2901      	cmp	r1, #1
 80002c4:	d12c      	bne.n	8000320 <__aeabi_fmul+0xd0>
 80002c6:	2000      	movs	r0, #0
 80002c8:	2200      	movs	r2, #0
 80002ca:	05c0      	lsls	r0, r0, #23
 80002cc:	07f6      	lsls	r6, r6, #31
 80002ce:	4310      	orrs	r0, r2
 80002d0:	4330      	orrs	r0, r6
 80002d2:	bce0      	pop	{r5, r6, r7}
 80002d4:	46ba      	mov	sl, r7
 80002d6:	46b1      	mov	r9, r6
 80002d8:	46a8      	mov	r8, r5
 80002da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002dc:	002b      	movs	r3, r5
 80002de:	33ff      	adds	r3, #255	@ 0xff
 80002e0:	2c00      	cmp	r4, #0
 80002e2:	d065      	beq.n	80003b0 <__aeabi_fmul+0x160>
 80002e4:	2203      	movs	r2, #3
 80002e6:	4641      	mov	r1, r8
 80002e8:	4311      	orrs	r1, r2
 80002ea:	0032      	movs	r2, r6
 80002ec:	3501      	adds	r5, #1
 80002ee:	4688      	mov	r8, r1
 80002f0:	407a      	eors	r2, r7
 80002f2:	35ff      	adds	r5, #255	@ 0xff
 80002f4:	290a      	cmp	r1, #10
 80002f6:	dd00      	ble.n	80002fa <__aeabi_fmul+0xaa>
 80002f8:	e0d8      	b.n	80004ac <__aeabi_fmul+0x25c>
 80002fa:	0016      	movs	r6, r2
 80002fc:	2103      	movs	r1, #3
 80002fe:	4640      	mov	r0, r8
 8000300:	2201      	movs	r2, #1
 8000302:	4082      	lsls	r2, r0
 8000304:	20a6      	movs	r0, #166	@ 0xa6
 8000306:	00c0      	lsls	r0, r0, #3
 8000308:	4202      	tst	r2, r0
 800030a:	d020      	beq.n	800034e <__aeabi_fmul+0xfe>
 800030c:	4653      	mov	r3, sl
 800030e:	2b02      	cmp	r3, #2
 8000310:	d046      	beq.n	80003a0 <__aeabi_fmul+0x150>
 8000312:	2b03      	cmp	r3, #3
 8000314:	d100      	bne.n	8000318 <__aeabi_fmul+0xc8>
 8000316:	e0bb      	b.n	8000490 <__aeabi_fmul+0x240>
 8000318:	4651      	mov	r1, sl
 800031a:	464c      	mov	r4, r9
 800031c:	2901      	cmp	r1, #1
 800031e:	d0d2      	beq.n	80002c6 <__aeabi_fmul+0x76>
 8000320:	002b      	movs	r3, r5
 8000322:	337f      	adds	r3, #127	@ 0x7f
 8000324:	2b00      	cmp	r3, #0
 8000326:	dd70      	ble.n	800040a <__aeabi_fmul+0x1ba>
 8000328:	0762      	lsls	r2, r4, #29
 800032a:	d004      	beq.n	8000336 <__aeabi_fmul+0xe6>
 800032c:	220f      	movs	r2, #15
 800032e:	4022      	ands	r2, r4
 8000330:	2a04      	cmp	r2, #4
 8000332:	d000      	beq.n	8000336 <__aeabi_fmul+0xe6>
 8000334:	3404      	adds	r4, #4
 8000336:	0122      	lsls	r2, r4, #4
 8000338:	d503      	bpl.n	8000342 <__aeabi_fmul+0xf2>
 800033a:	4b63      	ldr	r3, [pc, #396]	@ (80004c8 <__aeabi_fmul+0x278>)
 800033c:	401c      	ands	r4, r3
 800033e:	002b      	movs	r3, r5
 8000340:	3380      	adds	r3, #128	@ 0x80
 8000342:	2bfe      	cmp	r3, #254	@ 0xfe
 8000344:	dc2c      	bgt.n	80003a0 <__aeabi_fmul+0x150>
 8000346:	01a2      	lsls	r2, r4, #6
 8000348:	0a52      	lsrs	r2, r2, #9
 800034a:	b2d8      	uxtb	r0, r3
 800034c:	e7bd      	b.n	80002ca <__aeabi_fmul+0x7a>
 800034e:	2090      	movs	r0, #144	@ 0x90
 8000350:	0080      	lsls	r0, r0, #2
 8000352:	4202      	tst	r2, r0
 8000354:	d127      	bne.n	80003a6 <__aeabi_fmul+0x156>
 8000356:	38b9      	subs	r0, #185	@ 0xb9
 8000358:	38ff      	subs	r0, #255	@ 0xff
 800035a:	4210      	tst	r0, r2
 800035c:	d06d      	beq.n	800043a <__aeabi_fmul+0x1ea>
 800035e:	003e      	movs	r6, r7
 8000360:	46a1      	mov	r9, r4
 8000362:	468a      	mov	sl, r1
 8000364:	e7d2      	b.n	800030c <__aeabi_fmul+0xbc>
 8000366:	2c00      	cmp	r4, #0
 8000368:	d141      	bne.n	80003ee <__aeabi_fmul+0x19e>
 800036a:	2301      	movs	r3, #1
 800036c:	4642      	mov	r2, r8
 800036e:	431a      	orrs	r2, r3
 8000370:	4690      	mov	r8, r2
 8000372:	002b      	movs	r3, r5
 8000374:	4642      	mov	r2, r8
 8000376:	2101      	movs	r1, #1
 8000378:	1c5d      	adds	r5, r3, #1
 800037a:	2a0a      	cmp	r2, #10
 800037c:	dd97      	ble.n	80002ae <__aeabi_fmul+0x5e>
 800037e:	e7c5      	b.n	800030c <__aeabi_fmul+0xbc>
 8000380:	2b00      	cmp	r3, #0
 8000382:	d126      	bne.n	80003d2 <__aeabi_fmul+0x182>
 8000384:	2304      	movs	r3, #4
 8000386:	4698      	mov	r8, r3
 8000388:	3b03      	subs	r3, #3
 800038a:	2500      	movs	r5, #0
 800038c:	469a      	mov	sl, r3
 800038e:	e77a      	b.n	8000286 <__aeabi_fmul+0x36>
 8000390:	2b00      	cmp	r3, #0
 8000392:	d118      	bne.n	80003c6 <__aeabi_fmul+0x176>
 8000394:	2308      	movs	r3, #8
 8000396:	4698      	mov	r8, r3
 8000398:	3b06      	subs	r3, #6
 800039a:	25ff      	movs	r5, #255	@ 0xff
 800039c:	469a      	mov	sl, r3
 800039e:	e772      	b.n	8000286 <__aeabi_fmul+0x36>
 80003a0:	20ff      	movs	r0, #255	@ 0xff
 80003a2:	2200      	movs	r2, #0
 80003a4:	e791      	b.n	80002ca <__aeabi_fmul+0x7a>
 80003a6:	2280      	movs	r2, #128	@ 0x80
 80003a8:	2600      	movs	r6, #0
 80003aa:	20ff      	movs	r0, #255	@ 0xff
 80003ac:	03d2      	lsls	r2, r2, #15
 80003ae:	e78c      	b.n	80002ca <__aeabi_fmul+0x7a>
 80003b0:	4641      	mov	r1, r8
 80003b2:	2202      	movs	r2, #2
 80003b4:	3501      	adds	r5, #1
 80003b6:	4311      	orrs	r1, r2
 80003b8:	4688      	mov	r8, r1
 80003ba:	35ff      	adds	r5, #255	@ 0xff
 80003bc:	290a      	cmp	r1, #10
 80003be:	dca5      	bgt.n	800030c <__aeabi_fmul+0xbc>
 80003c0:	2102      	movs	r1, #2
 80003c2:	407e      	eors	r6, r7
 80003c4:	e774      	b.n	80002b0 <__aeabi_fmul+0x60>
 80003c6:	230c      	movs	r3, #12
 80003c8:	4698      	mov	r8, r3
 80003ca:	3b09      	subs	r3, #9
 80003cc:	25ff      	movs	r5, #255	@ 0xff
 80003ce:	469a      	mov	sl, r3
 80003d0:	e759      	b.n	8000286 <__aeabi_fmul+0x36>
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 fac4 	bl	8000960 <__clzsi2>
 80003d8:	464a      	mov	r2, r9
 80003da:	1f43      	subs	r3, r0, #5
 80003dc:	2576      	movs	r5, #118	@ 0x76
 80003de:	409a      	lsls	r2, r3
 80003e0:	2300      	movs	r3, #0
 80003e2:	426d      	negs	r5, r5
 80003e4:	4691      	mov	r9, r2
 80003e6:	4698      	mov	r8, r3
 80003e8:	469a      	mov	sl, r3
 80003ea:	1a2d      	subs	r5, r5, r0
 80003ec:	e74b      	b.n	8000286 <__aeabi_fmul+0x36>
 80003ee:	0020      	movs	r0, r4
 80003f0:	f000 fab6 	bl	8000960 <__clzsi2>
 80003f4:	4642      	mov	r2, r8
 80003f6:	1f43      	subs	r3, r0, #5
 80003f8:	409c      	lsls	r4, r3
 80003fa:	1a2b      	subs	r3, r5, r0
 80003fc:	3b76      	subs	r3, #118	@ 0x76
 80003fe:	2100      	movs	r1, #0
 8000400:	1c5d      	adds	r5, r3, #1
 8000402:	2a0a      	cmp	r2, #10
 8000404:	dc00      	bgt.n	8000408 <__aeabi_fmul+0x1b8>
 8000406:	e752      	b.n	80002ae <__aeabi_fmul+0x5e>
 8000408:	e780      	b.n	800030c <__aeabi_fmul+0xbc>
 800040a:	2201      	movs	r2, #1
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	2b1b      	cmp	r3, #27
 8000410:	dd00      	ble.n	8000414 <__aeabi_fmul+0x1c4>
 8000412:	e758      	b.n	80002c6 <__aeabi_fmul+0x76>
 8000414:	359e      	adds	r5, #158	@ 0x9e
 8000416:	0022      	movs	r2, r4
 8000418:	40ac      	lsls	r4, r5
 800041a:	40da      	lsrs	r2, r3
 800041c:	1e63      	subs	r3, r4, #1
 800041e:	419c      	sbcs	r4, r3
 8000420:	4322      	orrs	r2, r4
 8000422:	0753      	lsls	r3, r2, #29
 8000424:	d004      	beq.n	8000430 <__aeabi_fmul+0x1e0>
 8000426:	230f      	movs	r3, #15
 8000428:	4013      	ands	r3, r2
 800042a:	2b04      	cmp	r3, #4
 800042c:	d000      	beq.n	8000430 <__aeabi_fmul+0x1e0>
 800042e:	3204      	adds	r2, #4
 8000430:	0153      	lsls	r3, r2, #5
 8000432:	d537      	bpl.n	80004a4 <__aeabi_fmul+0x254>
 8000434:	2001      	movs	r0, #1
 8000436:	2200      	movs	r2, #0
 8000438:	e747      	b.n	80002ca <__aeabi_fmul+0x7a>
 800043a:	0c21      	lsrs	r1, r4, #16
 800043c:	464a      	mov	r2, r9
 800043e:	0424      	lsls	r4, r4, #16
 8000440:	0c24      	lsrs	r4, r4, #16
 8000442:	0027      	movs	r7, r4
 8000444:	0c10      	lsrs	r0, r2, #16
 8000446:	0412      	lsls	r2, r2, #16
 8000448:	0c12      	lsrs	r2, r2, #16
 800044a:	4344      	muls	r4, r0
 800044c:	4357      	muls	r7, r2
 800044e:	4348      	muls	r0, r1
 8000450:	4351      	muls	r1, r2
 8000452:	0c3a      	lsrs	r2, r7, #16
 8000454:	1909      	adds	r1, r1, r4
 8000456:	1852      	adds	r2, r2, r1
 8000458:	4294      	cmp	r4, r2
 800045a:	d903      	bls.n	8000464 <__aeabi_fmul+0x214>
 800045c:	2180      	movs	r1, #128	@ 0x80
 800045e:	0249      	lsls	r1, r1, #9
 8000460:	468c      	mov	ip, r1
 8000462:	4460      	add	r0, ip
 8000464:	043f      	lsls	r7, r7, #16
 8000466:	0411      	lsls	r1, r2, #16
 8000468:	0c3f      	lsrs	r7, r7, #16
 800046a:	19c9      	adds	r1, r1, r7
 800046c:	018c      	lsls	r4, r1, #6
 800046e:	1e67      	subs	r7, r4, #1
 8000470:	41bc      	sbcs	r4, r7
 8000472:	0c12      	lsrs	r2, r2, #16
 8000474:	0e89      	lsrs	r1, r1, #26
 8000476:	1812      	adds	r2, r2, r0
 8000478:	430c      	orrs	r4, r1
 800047a:	0192      	lsls	r2, r2, #6
 800047c:	4314      	orrs	r4, r2
 800047e:	0112      	lsls	r2, r2, #4
 8000480:	d50e      	bpl.n	80004a0 <__aeabi_fmul+0x250>
 8000482:	2301      	movs	r3, #1
 8000484:	0862      	lsrs	r2, r4, #1
 8000486:	401c      	ands	r4, r3
 8000488:	4314      	orrs	r4, r2
 800048a:	e749      	b.n	8000320 <__aeabi_fmul+0xd0>
 800048c:	003e      	movs	r6, r7
 800048e:	46a1      	mov	r9, r4
 8000490:	2280      	movs	r2, #128	@ 0x80
 8000492:	464b      	mov	r3, r9
 8000494:	03d2      	lsls	r2, r2, #15
 8000496:	431a      	orrs	r2, r3
 8000498:	0252      	lsls	r2, r2, #9
 800049a:	20ff      	movs	r0, #255	@ 0xff
 800049c:	0a52      	lsrs	r2, r2, #9
 800049e:	e714      	b.n	80002ca <__aeabi_fmul+0x7a>
 80004a0:	001d      	movs	r5, r3
 80004a2:	e73d      	b.n	8000320 <__aeabi_fmul+0xd0>
 80004a4:	0192      	lsls	r2, r2, #6
 80004a6:	2000      	movs	r0, #0
 80004a8:	0a52      	lsrs	r2, r2, #9
 80004aa:	e70e      	b.n	80002ca <__aeabi_fmul+0x7a>
 80004ac:	290f      	cmp	r1, #15
 80004ae:	d1ed      	bne.n	800048c <__aeabi_fmul+0x23c>
 80004b0:	2280      	movs	r2, #128	@ 0x80
 80004b2:	464b      	mov	r3, r9
 80004b4:	03d2      	lsls	r2, r2, #15
 80004b6:	4213      	tst	r3, r2
 80004b8:	d0ea      	beq.n	8000490 <__aeabi_fmul+0x240>
 80004ba:	4214      	tst	r4, r2
 80004bc:	d1e8      	bne.n	8000490 <__aeabi_fmul+0x240>
 80004be:	003e      	movs	r6, r7
 80004c0:	20ff      	movs	r0, #255	@ 0xff
 80004c2:	4322      	orrs	r2, r4
 80004c4:	e701      	b.n	80002ca <__aeabi_fmul+0x7a>
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	f7ffffff 	.word	0xf7ffffff

080004cc <__aeabi_fsub>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	4647      	mov	r7, r8
 80004d0:	46ce      	mov	lr, r9
 80004d2:	024e      	lsls	r6, r1, #9
 80004d4:	0243      	lsls	r3, r0, #9
 80004d6:	0045      	lsls	r5, r0, #1
 80004d8:	0a72      	lsrs	r2, r6, #9
 80004da:	0fc4      	lsrs	r4, r0, #31
 80004dc:	0048      	lsls	r0, r1, #1
 80004de:	b580      	push	{r7, lr}
 80004e0:	4694      	mov	ip, r2
 80004e2:	0a5f      	lsrs	r7, r3, #9
 80004e4:	0e2d      	lsrs	r5, r5, #24
 80004e6:	099b      	lsrs	r3, r3, #6
 80004e8:	0e00      	lsrs	r0, r0, #24
 80004ea:	0fc9      	lsrs	r1, r1, #31
 80004ec:	09b6      	lsrs	r6, r6, #6
 80004ee:	28ff      	cmp	r0, #255	@ 0xff
 80004f0:	d024      	beq.n	800053c <__aeabi_fsub+0x70>
 80004f2:	2201      	movs	r2, #1
 80004f4:	4051      	eors	r1, r2
 80004f6:	1a2a      	subs	r2, r5, r0
 80004f8:	428c      	cmp	r4, r1
 80004fa:	d00f      	beq.n	800051c <__aeabi_fsub+0x50>
 80004fc:	2a00      	cmp	r2, #0
 80004fe:	dc00      	bgt.n	8000502 <__aeabi_fsub+0x36>
 8000500:	e16a      	b.n	80007d8 <__aeabi_fsub+0x30c>
 8000502:	2800      	cmp	r0, #0
 8000504:	d135      	bne.n	8000572 <__aeabi_fsub+0xa6>
 8000506:	2e00      	cmp	r6, #0
 8000508:	d100      	bne.n	800050c <__aeabi_fsub+0x40>
 800050a:	e0a2      	b.n	8000652 <__aeabi_fsub+0x186>
 800050c:	1e51      	subs	r1, r2, #1
 800050e:	2a01      	cmp	r2, #1
 8000510:	d100      	bne.n	8000514 <__aeabi_fsub+0x48>
 8000512:	e124      	b.n	800075e <__aeabi_fsub+0x292>
 8000514:	2aff      	cmp	r2, #255	@ 0xff
 8000516:	d021      	beq.n	800055c <__aeabi_fsub+0x90>
 8000518:	000a      	movs	r2, r1
 800051a:	e02f      	b.n	800057c <__aeabi_fsub+0xb0>
 800051c:	2a00      	cmp	r2, #0
 800051e:	dc00      	bgt.n	8000522 <__aeabi_fsub+0x56>
 8000520:	e167      	b.n	80007f2 <__aeabi_fsub+0x326>
 8000522:	2800      	cmp	r0, #0
 8000524:	d05e      	beq.n	80005e4 <__aeabi_fsub+0x118>
 8000526:	2dff      	cmp	r5, #255	@ 0xff
 8000528:	d018      	beq.n	800055c <__aeabi_fsub+0x90>
 800052a:	2180      	movs	r1, #128	@ 0x80
 800052c:	04c9      	lsls	r1, r1, #19
 800052e:	430e      	orrs	r6, r1
 8000530:	2a1b      	cmp	r2, #27
 8000532:	dc00      	bgt.n	8000536 <__aeabi_fsub+0x6a>
 8000534:	e076      	b.n	8000624 <__aeabi_fsub+0x158>
 8000536:	002a      	movs	r2, r5
 8000538:	3301      	adds	r3, #1
 800053a:	e032      	b.n	80005a2 <__aeabi_fsub+0xd6>
 800053c:	002a      	movs	r2, r5
 800053e:	3aff      	subs	r2, #255	@ 0xff
 8000540:	4691      	mov	r9, r2
 8000542:	2e00      	cmp	r6, #0
 8000544:	d042      	beq.n	80005cc <__aeabi_fsub+0x100>
 8000546:	428c      	cmp	r4, r1
 8000548:	d055      	beq.n	80005f6 <__aeabi_fsub+0x12a>
 800054a:	464a      	mov	r2, r9
 800054c:	2a00      	cmp	r2, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_fsub+0x86>
 8000550:	e09c      	b.n	800068c <__aeabi_fsub+0x1c0>
 8000552:	2d00      	cmp	r5, #0
 8000554:	d100      	bne.n	8000558 <__aeabi_fsub+0x8c>
 8000556:	e077      	b.n	8000648 <__aeabi_fsub+0x17c>
 8000558:	000c      	movs	r4, r1
 800055a:	0033      	movs	r3, r6
 800055c:	08db      	lsrs	r3, r3, #3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d100      	bne.n	8000564 <__aeabi_fsub+0x98>
 8000562:	e06e      	b.n	8000642 <__aeabi_fsub+0x176>
 8000564:	2280      	movs	r2, #128	@ 0x80
 8000566:	03d2      	lsls	r2, r2, #15
 8000568:	4313      	orrs	r3, r2
 800056a:	025b      	lsls	r3, r3, #9
 800056c:	20ff      	movs	r0, #255	@ 0xff
 800056e:	0a5b      	lsrs	r3, r3, #9
 8000570:	e024      	b.n	80005bc <__aeabi_fsub+0xf0>
 8000572:	2dff      	cmp	r5, #255	@ 0xff
 8000574:	d0f2      	beq.n	800055c <__aeabi_fsub+0x90>
 8000576:	2180      	movs	r1, #128	@ 0x80
 8000578:	04c9      	lsls	r1, r1, #19
 800057a:	430e      	orrs	r6, r1
 800057c:	2101      	movs	r1, #1
 800057e:	2a1b      	cmp	r2, #27
 8000580:	dc08      	bgt.n	8000594 <__aeabi_fsub+0xc8>
 8000582:	0031      	movs	r1, r6
 8000584:	2020      	movs	r0, #32
 8000586:	40d1      	lsrs	r1, r2
 8000588:	1a82      	subs	r2, r0, r2
 800058a:	4096      	lsls	r6, r2
 800058c:	0032      	movs	r2, r6
 800058e:	1e50      	subs	r0, r2, #1
 8000590:	4182      	sbcs	r2, r0
 8000592:	4311      	orrs	r1, r2
 8000594:	1a5b      	subs	r3, r3, r1
 8000596:	015a      	lsls	r2, r3, #5
 8000598:	d460      	bmi.n	800065c <__aeabi_fsub+0x190>
 800059a:	2107      	movs	r1, #7
 800059c:	002a      	movs	r2, r5
 800059e:	4019      	ands	r1, r3
 80005a0:	d057      	beq.n	8000652 <__aeabi_fsub+0x186>
 80005a2:	210f      	movs	r1, #15
 80005a4:	4019      	ands	r1, r3
 80005a6:	2904      	cmp	r1, #4
 80005a8:	d000      	beq.n	80005ac <__aeabi_fsub+0xe0>
 80005aa:	3304      	adds	r3, #4
 80005ac:	0159      	lsls	r1, r3, #5
 80005ae:	d550      	bpl.n	8000652 <__aeabi_fsub+0x186>
 80005b0:	1c50      	adds	r0, r2, #1
 80005b2:	2afe      	cmp	r2, #254	@ 0xfe
 80005b4:	d045      	beq.n	8000642 <__aeabi_fsub+0x176>
 80005b6:	019b      	lsls	r3, r3, #6
 80005b8:	b2c0      	uxtb	r0, r0
 80005ba:	0a5b      	lsrs	r3, r3, #9
 80005bc:	05c0      	lsls	r0, r0, #23
 80005be:	4318      	orrs	r0, r3
 80005c0:	07e4      	lsls	r4, r4, #31
 80005c2:	4320      	orrs	r0, r4
 80005c4:	bcc0      	pop	{r6, r7}
 80005c6:	46b9      	mov	r9, r7
 80005c8:	46b0      	mov	r8, r6
 80005ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005cc:	2201      	movs	r2, #1
 80005ce:	4051      	eors	r1, r2
 80005d0:	428c      	cmp	r4, r1
 80005d2:	d1ba      	bne.n	800054a <__aeabi_fsub+0x7e>
 80005d4:	464a      	mov	r2, r9
 80005d6:	2a00      	cmp	r2, #0
 80005d8:	d010      	beq.n	80005fc <__aeabi_fsub+0x130>
 80005da:	2d00      	cmp	r5, #0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fsub+0x114>
 80005de:	e098      	b.n	8000712 <__aeabi_fsub+0x246>
 80005e0:	2300      	movs	r3, #0
 80005e2:	e7bb      	b.n	800055c <__aeabi_fsub+0x90>
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d034      	beq.n	8000652 <__aeabi_fsub+0x186>
 80005e8:	1e51      	subs	r1, r2, #1
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	d06e      	beq.n	80006cc <__aeabi_fsub+0x200>
 80005ee:	2aff      	cmp	r2, #255	@ 0xff
 80005f0:	d0b4      	beq.n	800055c <__aeabi_fsub+0x90>
 80005f2:	000a      	movs	r2, r1
 80005f4:	e79c      	b.n	8000530 <__aeabi_fsub+0x64>
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	d000      	beq.n	80005fc <__aeabi_fsub+0x130>
 80005fa:	e088      	b.n	800070e <__aeabi_fsub+0x242>
 80005fc:	20fe      	movs	r0, #254	@ 0xfe
 80005fe:	1c6a      	adds	r2, r5, #1
 8000600:	4210      	tst	r0, r2
 8000602:	d000      	beq.n	8000606 <__aeabi_fsub+0x13a>
 8000604:	e092      	b.n	800072c <__aeabi_fsub+0x260>
 8000606:	2d00      	cmp	r5, #0
 8000608:	d000      	beq.n	800060c <__aeabi_fsub+0x140>
 800060a:	e0a4      	b.n	8000756 <__aeabi_fsub+0x28a>
 800060c:	2b00      	cmp	r3, #0
 800060e:	d100      	bne.n	8000612 <__aeabi_fsub+0x146>
 8000610:	e0cb      	b.n	80007aa <__aeabi_fsub+0x2de>
 8000612:	2e00      	cmp	r6, #0
 8000614:	d000      	beq.n	8000618 <__aeabi_fsub+0x14c>
 8000616:	e0ca      	b.n	80007ae <__aeabi_fsub+0x2e2>
 8000618:	2200      	movs	r2, #0
 800061a:	08db      	lsrs	r3, r3, #3
 800061c:	025b      	lsls	r3, r3, #9
 800061e:	0a5b      	lsrs	r3, r3, #9
 8000620:	b2d0      	uxtb	r0, r2
 8000622:	e7cb      	b.n	80005bc <__aeabi_fsub+0xf0>
 8000624:	0031      	movs	r1, r6
 8000626:	2020      	movs	r0, #32
 8000628:	40d1      	lsrs	r1, r2
 800062a:	1a82      	subs	r2, r0, r2
 800062c:	4096      	lsls	r6, r2
 800062e:	0032      	movs	r2, r6
 8000630:	1e50      	subs	r0, r2, #1
 8000632:	4182      	sbcs	r2, r0
 8000634:	430a      	orrs	r2, r1
 8000636:	189b      	adds	r3, r3, r2
 8000638:	015a      	lsls	r2, r3, #5
 800063a:	d5ae      	bpl.n	800059a <__aeabi_fsub+0xce>
 800063c:	1c6a      	adds	r2, r5, #1
 800063e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000640:	d14a      	bne.n	80006d8 <__aeabi_fsub+0x20c>
 8000642:	20ff      	movs	r0, #255	@ 0xff
 8000644:	2300      	movs	r3, #0
 8000646:	e7b9      	b.n	80005bc <__aeabi_fsub+0xf0>
 8000648:	22ff      	movs	r2, #255	@ 0xff
 800064a:	2b00      	cmp	r3, #0
 800064c:	d14b      	bne.n	80006e6 <__aeabi_fsub+0x21a>
 800064e:	000c      	movs	r4, r1
 8000650:	0033      	movs	r3, r6
 8000652:	08db      	lsrs	r3, r3, #3
 8000654:	2aff      	cmp	r2, #255	@ 0xff
 8000656:	d100      	bne.n	800065a <__aeabi_fsub+0x18e>
 8000658:	e781      	b.n	800055e <__aeabi_fsub+0x92>
 800065a:	e7df      	b.n	800061c <__aeabi_fsub+0x150>
 800065c:	019f      	lsls	r7, r3, #6
 800065e:	09bf      	lsrs	r7, r7, #6
 8000660:	0038      	movs	r0, r7
 8000662:	f000 f97d 	bl	8000960 <__clzsi2>
 8000666:	3805      	subs	r0, #5
 8000668:	4087      	lsls	r7, r0
 800066a:	4285      	cmp	r5, r0
 800066c:	dc21      	bgt.n	80006b2 <__aeabi_fsub+0x1e6>
 800066e:	003b      	movs	r3, r7
 8000670:	2120      	movs	r1, #32
 8000672:	1b42      	subs	r2, r0, r5
 8000674:	3201      	adds	r2, #1
 8000676:	40d3      	lsrs	r3, r2
 8000678:	1a8a      	subs	r2, r1, r2
 800067a:	4097      	lsls	r7, r2
 800067c:	1e7a      	subs	r2, r7, #1
 800067e:	4197      	sbcs	r7, r2
 8000680:	2200      	movs	r2, #0
 8000682:	433b      	orrs	r3, r7
 8000684:	0759      	lsls	r1, r3, #29
 8000686:	d000      	beq.n	800068a <__aeabi_fsub+0x1be>
 8000688:	e78b      	b.n	80005a2 <__aeabi_fsub+0xd6>
 800068a:	e78f      	b.n	80005ac <__aeabi_fsub+0xe0>
 800068c:	20fe      	movs	r0, #254	@ 0xfe
 800068e:	1c6a      	adds	r2, r5, #1
 8000690:	4210      	tst	r0, r2
 8000692:	d112      	bne.n	80006ba <__aeabi_fsub+0x1ee>
 8000694:	2d00      	cmp	r5, #0
 8000696:	d152      	bne.n	800073e <__aeabi_fsub+0x272>
 8000698:	2b00      	cmp	r3, #0
 800069a:	d07c      	beq.n	8000796 <__aeabi_fsub+0x2ca>
 800069c:	2e00      	cmp	r6, #0
 800069e:	d0bb      	beq.n	8000618 <__aeabi_fsub+0x14c>
 80006a0:	1b9a      	subs	r2, r3, r6
 80006a2:	0150      	lsls	r0, r2, #5
 80006a4:	d400      	bmi.n	80006a8 <__aeabi_fsub+0x1dc>
 80006a6:	e08b      	b.n	80007c0 <__aeabi_fsub+0x2f4>
 80006a8:	2401      	movs	r4, #1
 80006aa:	2200      	movs	r2, #0
 80006ac:	1af3      	subs	r3, r6, r3
 80006ae:	400c      	ands	r4, r1
 80006b0:	e7e8      	b.n	8000684 <__aeabi_fsub+0x1b8>
 80006b2:	4b56      	ldr	r3, [pc, #344]	@ (800080c <__aeabi_fsub+0x340>)
 80006b4:	1a2a      	subs	r2, r5, r0
 80006b6:	403b      	ands	r3, r7
 80006b8:	e7e4      	b.n	8000684 <__aeabi_fsub+0x1b8>
 80006ba:	1b9f      	subs	r7, r3, r6
 80006bc:	017a      	lsls	r2, r7, #5
 80006be:	d446      	bmi.n	800074e <__aeabi_fsub+0x282>
 80006c0:	2f00      	cmp	r7, #0
 80006c2:	d1cd      	bne.n	8000660 <__aeabi_fsub+0x194>
 80006c4:	2400      	movs	r4, #0
 80006c6:	2000      	movs	r0, #0
 80006c8:	2300      	movs	r3, #0
 80006ca:	e777      	b.n	80005bc <__aeabi_fsub+0xf0>
 80006cc:	199b      	adds	r3, r3, r6
 80006ce:	2501      	movs	r5, #1
 80006d0:	3201      	adds	r2, #1
 80006d2:	0159      	lsls	r1, r3, #5
 80006d4:	d400      	bmi.n	80006d8 <__aeabi_fsub+0x20c>
 80006d6:	e760      	b.n	800059a <__aeabi_fsub+0xce>
 80006d8:	2101      	movs	r1, #1
 80006da:	484d      	ldr	r0, [pc, #308]	@ (8000810 <__aeabi_fsub+0x344>)
 80006dc:	4019      	ands	r1, r3
 80006de:	085b      	lsrs	r3, r3, #1
 80006e0:	4003      	ands	r3, r0
 80006e2:	430b      	orrs	r3, r1
 80006e4:	e7ce      	b.n	8000684 <__aeabi_fsub+0x1b8>
 80006e6:	1e57      	subs	r7, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d05a      	beq.n	80007a2 <__aeabi_fsub+0x2d6>
 80006ec:	000c      	movs	r4, r1
 80006ee:	2aff      	cmp	r2, #255	@ 0xff
 80006f0:	d033      	beq.n	800075a <__aeabi_fsub+0x28e>
 80006f2:	2201      	movs	r2, #1
 80006f4:	2f1b      	cmp	r7, #27
 80006f6:	dc07      	bgt.n	8000708 <__aeabi_fsub+0x23c>
 80006f8:	2120      	movs	r1, #32
 80006fa:	1bc9      	subs	r1, r1, r7
 80006fc:	001a      	movs	r2, r3
 80006fe:	408b      	lsls	r3, r1
 8000700:	40fa      	lsrs	r2, r7
 8000702:	1e59      	subs	r1, r3, #1
 8000704:	418b      	sbcs	r3, r1
 8000706:	431a      	orrs	r2, r3
 8000708:	0005      	movs	r5, r0
 800070a:	1ab3      	subs	r3, r6, r2
 800070c:	e743      	b.n	8000596 <__aeabi_fsub+0xca>
 800070e:	2d00      	cmp	r5, #0
 8000710:	d123      	bne.n	800075a <__aeabi_fsub+0x28e>
 8000712:	22ff      	movs	r2, #255	@ 0xff
 8000714:	2b00      	cmp	r3, #0
 8000716:	d09b      	beq.n	8000650 <__aeabi_fsub+0x184>
 8000718:	1e51      	subs	r1, r2, #1
 800071a:	2a01      	cmp	r2, #1
 800071c:	d0d6      	beq.n	80006cc <__aeabi_fsub+0x200>
 800071e:	2aff      	cmp	r2, #255	@ 0xff
 8000720:	d01b      	beq.n	800075a <__aeabi_fsub+0x28e>
 8000722:	291b      	cmp	r1, #27
 8000724:	dd2c      	ble.n	8000780 <__aeabi_fsub+0x2b4>
 8000726:	0002      	movs	r2, r0
 8000728:	1c73      	adds	r3, r6, #1
 800072a:	e73a      	b.n	80005a2 <__aeabi_fsub+0xd6>
 800072c:	2aff      	cmp	r2, #255	@ 0xff
 800072e:	d088      	beq.n	8000642 <__aeabi_fsub+0x176>
 8000730:	199b      	adds	r3, r3, r6
 8000732:	085b      	lsrs	r3, r3, #1
 8000734:	0759      	lsls	r1, r3, #29
 8000736:	d000      	beq.n	800073a <__aeabi_fsub+0x26e>
 8000738:	e733      	b.n	80005a2 <__aeabi_fsub+0xd6>
 800073a:	08db      	lsrs	r3, r3, #3
 800073c:	e76e      	b.n	800061c <__aeabi_fsub+0x150>
 800073e:	2b00      	cmp	r3, #0
 8000740:	d110      	bne.n	8000764 <__aeabi_fsub+0x298>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d043      	beq.n	80007ce <__aeabi_fsub+0x302>
 8000746:	2401      	movs	r4, #1
 8000748:	0033      	movs	r3, r6
 800074a:	400c      	ands	r4, r1
 800074c:	e706      	b.n	800055c <__aeabi_fsub+0x90>
 800074e:	2401      	movs	r4, #1
 8000750:	1af7      	subs	r7, r6, r3
 8000752:	400c      	ands	r4, r1
 8000754:	e784      	b.n	8000660 <__aeabi_fsub+0x194>
 8000756:	2b00      	cmp	r3, #0
 8000758:	d104      	bne.n	8000764 <__aeabi_fsub+0x298>
 800075a:	0033      	movs	r3, r6
 800075c:	e6fe      	b.n	800055c <__aeabi_fsub+0x90>
 800075e:	2501      	movs	r5, #1
 8000760:	1b9b      	subs	r3, r3, r6
 8000762:	e718      	b.n	8000596 <__aeabi_fsub+0xca>
 8000764:	2e00      	cmp	r6, #0
 8000766:	d100      	bne.n	800076a <__aeabi_fsub+0x29e>
 8000768:	e6f8      	b.n	800055c <__aeabi_fsub+0x90>
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	03d2      	lsls	r2, r2, #15
 800076e:	4297      	cmp	r7, r2
 8000770:	d304      	bcc.n	800077c <__aeabi_fsub+0x2b0>
 8000772:	4594      	cmp	ip, r2
 8000774:	d202      	bcs.n	800077c <__aeabi_fsub+0x2b0>
 8000776:	2401      	movs	r4, #1
 8000778:	0033      	movs	r3, r6
 800077a:	400c      	ands	r4, r1
 800077c:	08db      	lsrs	r3, r3, #3
 800077e:	e6f1      	b.n	8000564 <__aeabi_fsub+0x98>
 8000780:	001a      	movs	r2, r3
 8000782:	2520      	movs	r5, #32
 8000784:	40ca      	lsrs	r2, r1
 8000786:	1a69      	subs	r1, r5, r1
 8000788:	408b      	lsls	r3, r1
 800078a:	1e59      	subs	r1, r3, #1
 800078c:	418b      	sbcs	r3, r1
 800078e:	4313      	orrs	r3, r2
 8000790:	0005      	movs	r5, r0
 8000792:	199b      	adds	r3, r3, r6
 8000794:	e750      	b.n	8000638 <__aeabi_fsub+0x16c>
 8000796:	2e00      	cmp	r6, #0
 8000798:	d094      	beq.n	80006c4 <__aeabi_fsub+0x1f8>
 800079a:	2401      	movs	r4, #1
 800079c:	0033      	movs	r3, r6
 800079e:	400c      	ands	r4, r1
 80007a0:	e73a      	b.n	8000618 <__aeabi_fsub+0x14c>
 80007a2:	000c      	movs	r4, r1
 80007a4:	2501      	movs	r5, #1
 80007a6:	1af3      	subs	r3, r6, r3
 80007a8:	e6f5      	b.n	8000596 <__aeabi_fsub+0xca>
 80007aa:	0033      	movs	r3, r6
 80007ac:	e734      	b.n	8000618 <__aeabi_fsub+0x14c>
 80007ae:	199b      	adds	r3, r3, r6
 80007b0:	2200      	movs	r2, #0
 80007b2:	0159      	lsls	r1, r3, #5
 80007b4:	d5c1      	bpl.n	800073a <__aeabi_fsub+0x26e>
 80007b6:	4a15      	ldr	r2, [pc, #84]	@ (800080c <__aeabi_fsub+0x340>)
 80007b8:	4013      	ands	r3, r2
 80007ba:	08db      	lsrs	r3, r3, #3
 80007bc:	2201      	movs	r2, #1
 80007be:	e72d      	b.n	800061c <__aeabi_fsub+0x150>
 80007c0:	2a00      	cmp	r2, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fsub+0x2fa>
 80007c4:	e77e      	b.n	80006c4 <__aeabi_fsub+0x1f8>
 80007c6:	0013      	movs	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	08db      	lsrs	r3, r3, #3
 80007cc:	e726      	b.n	800061c <__aeabi_fsub+0x150>
 80007ce:	2380      	movs	r3, #128	@ 0x80
 80007d0:	2400      	movs	r4, #0
 80007d2:	20ff      	movs	r0, #255	@ 0xff
 80007d4:	03db      	lsls	r3, r3, #15
 80007d6:	e6f1      	b.n	80005bc <__aeabi_fsub+0xf0>
 80007d8:	2a00      	cmp	r2, #0
 80007da:	d100      	bne.n	80007de <__aeabi_fsub+0x312>
 80007dc:	e756      	b.n	800068c <__aeabi_fsub+0x1c0>
 80007de:	1b47      	subs	r7, r0, r5
 80007e0:	003a      	movs	r2, r7
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fsub+0x31c>
 80007e6:	e730      	b.n	800064a <__aeabi_fsub+0x17e>
 80007e8:	2280      	movs	r2, #128	@ 0x80
 80007ea:	04d2      	lsls	r2, r2, #19
 80007ec:	000c      	movs	r4, r1
 80007ee:	4313      	orrs	r3, r2
 80007f0:	e77f      	b.n	80006f2 <__aeabi_fsub+0x226>
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fsub+0x32c>
 80007f6:	e701      	b.n	80005fc <__aeabi_fsub+0x130>
 80007f8:	1b41      	subs	r1, r0, r5
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d101      	bne.n	8000802 <__aeabi_fsub+0x336>
 80007fe:	000a      	movs	r2, r1
 8000800:	e788      	b.n	8000714 <__aeabi_fsub+0x248>
 8000802:	2280      	movs	r2, #128	@ 0x80
 8000804:	04d2      	lsls	r2, r2, #19
 8000806:	4313      	orrs	r3, r2
 8000808:	e78b      	b.n	8000722 <__aeabi_fsub+0x256>
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	fbffffff 	.word	0xfbffffff
 8000810:	7dffffff 	.word	0x7dffffff

08000814 <__aeabi_f2iz>:
 8000814:	0241      	lsls	r1, r0, #9
 8000816:	0042      	lsls	r2, r0, #1
 8000818:	0fc3      	lsrs	r3, r0, #31
 800081a:	0a49      	lsrs	r1, r1, #9
 800081c:	2000      	movs	r0, #0
 800081e:	0e12      	lsrs	r2, r2, #24
 8000820:	2a7e      	cmp	r2, #126	@ 0x7e
 8000822:	dd03      	ble.n	800082c <__aeabi_f2iz+0x18>
 8000824:	2a9d      	cmp	r2, #157	@ 0x9d
 8000826:	dd02      	ble.n	800082e <__aeabi_f2iz+0x1a>
 8000828:	4a09      	ldr	r2, [pc, #36]	@ (8000850 <__aeabi_f2iz+0x3c>)
 800082a:	1898      	adds	r0, r3, r2
 800082c:	4770      	bx	lr
 800082e:	2080      	movs	r0, #128	@ 0x80
 8000830:	0400      	lsls	r0, r0, #16
 8000832:	4301      	orrs	r1, r0
 8000834:	2a95      	cmp	r2, #149	@ 0x95
 8000836:	dc07      	bgt.n	8000848 <__aeabi_f2iz+0x34>
 8000838:	2096      	movs	r0, #150	@ 0x96
 800083a:	1a82      	subs	r2, r0, r2
 800083c:	40d1      	lsrs	r1, r2
 800083e:	4248      	negs	r0, r1
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1f3      	bne.n	800082c <__aeabi_f2iz+0x18>
 8000844:	0008      	movs	r0, r1
 8000846:	e7f1      	b.n	800082c <__aeabi_f2iz+0x18>
 8000848:	3a96      	subs	r2, #150	@ 0x96
 800084a:	4091      	lsls	r1, r2
 800084c:	e7f7      	b.n	800083e <__aeabi_f2iz+0x2a>
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	7fffffff 	.word	0x7fffffff

08000854 <__aeabi_i2f>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	2800      	cmp	r0, #0
 8000858:	d013      	beq.n	8000882 <__aeabi_i2f+0x2e>
 800085a:	17c3      	asrs	r3, r0, #31
 800085c:	18c5      	adds	r5, r0, r3
 800085e:	405d      	eors	r5, r3
 8000860:	0fc4      	lsrs	r4, r0, #31
 8000862:	0028      	movs	r0, r5
 8000864:	f000 f87c 	bl	8000960 <__clzsi2>
 8000868:	239e      	movs	r3, #158	@ 0x9e
 800086a:	0001      	movs	r1, r0
 800086c:	1a1b      	subs	r3, r3, r0
 800086e:	2b96      	cmp	r3, #150	@ 0x96
 8000870:	dc0f      	bgt.n	8000892 <__aeabi_i2f+0x3e>
 8000872:	2808      	cmp	r0, #8
 8000874:	d034      	beq.n	80008e0 <__aeabi_i2f+0x8c>
 8000876:	3908      	subs	r1, #8
 8000878:	408d      	lsls	r5, r1
 800087a:	026d      	lsls	r5, r5, #9
 800087c:	0a6d      	lsrs	r5, r5, #9
 800087e:	b2d8      	uxtb	r0, r3
 8000880:	e002      	b.n	8000888 <__aeabi_i2f+0x34>
 8000882:	2400      	movs	r4, #0
 8000884:	2000      	movs	r0, #0
 8000886:	2500      	movs	r5, #0
 8000888:	05c0      	lsls	r0, r0, #23
 800088a:	4328      	orrs	r0, r5
 800088c:	07e4      	lsls	r4, r4, #31
 800088e:	4320      	orrs	r0, r4
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	2b99      	cmp	r3, #153	@ 0x99
 8000894:	dc16      	bgt.n	80008c4 <__aeabi_i2f+0x70>
 8000896:	1f42      	subs	r2, r0, #5
 8000898:	2805      	cmp	r0, #5
 800089a:	d000      	beq.n	800089e <__aeabi_i2f+0x4a>
 800089c:	4095      	lsls	r5, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <__aeabi_i2f+0x94>)
 80008a2:	4002      	ands	r2, r0
 80008a4:	076e      	lsls	r6, r5, #29
 80008a6:	d009      	beq.n	80008bc <__aeabi_i2f+0x68>
 80008a8:	260f      	movs	r6, #15
 80008aa:	4035      	ands	r5, r6
 80008ac:	2d04      	cmp	r5, #4
 80008ae:	d005      	beq.n	80008bc <__aeabi_i2f+0x68>
 80008b0:	3204      	adds	r2, #4
 80008b2:	0155      	lsls	r5, r2, #5
 80008b4:	d502      	bpl.n	80008bc <__aeabi_i2f+0x68>
 80008b6:	239f      	movs	r3, #159	@ 0x9f
 80008b8:	4002      	ands	r2, r0
 80008ba:	1a5b      	subs	r3, r3, r1
 80008bc:	0192      	lsls	r2, r2, #6
 80008be:	0a55      	lsrs	r5, r2, #9
 80008c0:	b2d8      	uxtb	r0, r3
 80008c2:	e7e1      	b.n	8000888 <__aeabi_i2f+0x34>
 80008c4:	2205      	movs	r2, #5
 80008c6:	1a12      	subs	r2, r2, r0
 80008c8:	0028      	movs	r0, r5
 80008ca:	40d0      	lsrs	r0, r2
 80008cc:	0002      	movs	r2, r0
 80008ce:	0008      	movs	r0, r1
 80008d0:	301b      	adds	r0, #27
 80008d2:	4085      	lsls	r5, r0
 80008d4:	0028      	movs	r0, r5
 80008d6:	1e45      	subs	r5, r0, #1
 80008d8:	41a8      	sbcs	r0, r5
 80008da:	4302      	orrs	r2, r0
 80008dc:	0015      	movs	r5, r2
 80008de:	e7de      	b.n	800089e <__aeabi_i2f+0x4a>
 80008e0:	026d      	lsls	r5, r5, #9
 80008e2:	2096      	movs	r0, #150	@ 0x96
 80008e4:	0a6d      	lsrs	r5, r5, #9
 80008e6:	e7cf      	b.n	8000888 <__aeabi_i2f+0x34>
 80008e8:	fbffffff 	.word	0xfbffffff

080008ec <__aeabi_cfrcmple>:
 80008ec:	4684      	mov	ip, r0
 80008ee:	0008      	movs	r0, r1
 80008f0:	4661      	mov	r1, ip
 80008f2:	e7ff      	b.n	80008f4 <__aeabi_cfcmpeq>

080008f4 <__aeabi_cfcmpeq>:
 80008f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80008f6:	f000 f8c9 	bl	8000a8c <__lesf2>
 80008fa:	2800      	cmp	r0, #0
 80008fc:	d401      	bmi.n	8000902 <__aeabi_cfcmpeq+0xe>
 80008fe:	2100      	movs	r1, #0
 8000900:	42c8      	cmn	r0, r1
 8000902:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000904 <__aeabi_fcmpeq>:
 8000904:	b510      	push	{r4, lr}
 8000906:	f000 f849 	bl	800099c <__eqsf2>
 800090a:	4240      	negs	r0, r0
 800090c:	3001      	adds	r0, #1
 800090e:	bd10      	pop	{r4, pc}

08000910 <__aeabi_fcmplt>:
 8000910:	b510      	push	{r4, lr}
 8000912:	f000 f8bb 	bl	8000a8c <__lesf2>
 8000916:	2800      	cmp	r0, #0
 8000918:	db01      	blt.n	800091e <__aeabi_fcmplt+0xe>
 800091a:	2000      	movs	r0, #0
 800091c:	bd10      	pop	{r4, pc}
 800091e:	2001      	movs	r0, #1
 8000920:	bd10      	pop	{r4, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)

08000924 <__aeabi_fcmple>:
 8000924:	b510      	push	{r4, lr}
 8000926:	f000 f8b1 	bl	8000a8c <__lesf2>
 800092a:	2800      	cmp	r0, #0
 800092c:	dd01      	ble.n	8000932 <__aeabi_fcmple+0xe>
 800092e:	2000      	movs	r0, #0
 8000930:	bd10      	pop	{r4, pc}
 8000932:	2001      	movs	r0, #1
 8000934:	bd10      	pop	{r4, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)

08000938 <__aeabi_fcmpgt>:
 8000938:	b510      	push	{r4, lr}
 800093a:	f000 f857 	bl	80009ec <__gesf2>
 800093e:	2800      	cmp	r0, #0
 8000940:	dc01      	bgt.n	8000946 <__aeabi_fcmpgt+0xe>
 8000942:	2000      	movs	r0, #0
 8000944:	bd10      	pop	{r4, pc}
 8000946:	2001      	movs	r0, #1
 8000948:	bd10      	pop	{r4, pc}
 800094a:	46c0      	nop			@ (mov r8, r8)

0800094c <__aeabi_fcmpge>:
 800094c:	b510      	push	{r4, lr}
 800094e:	f000 f84d 	bl	80009ec <__gesf2>
 8000952:	2800      	cmp	r0, #0
 8000954:	da01      	bge.n	800095a <__aeabi_fcmpge+0xe>
 8000956:	2000      	movs	r0, #0
 8000958:	bd10      	pop	{r4, pc}
 800095a:	2001      	movs	r0, #1
 800095c:	bd10      	pop	{r4, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)

08000960 <__clzsi2>:
 8000960:	211c      	movs	r1, #28
 8000962:	2301      	movs	r3, #1
 8000964:	041b      	lsls	r3, r3, #16
 8000966:	4298      	cmp	r0, r3
 8000968:	d301      	bcc.n	800096e <__clzsi2+0xe>
 800096a:	0c00      	lsrs	r0, r0, #16
 800096c:	3910      	subs	r1, #16
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	4298      	cmp	r0, r3
 8000972:	d301      	bcc.n	8000978 <__clzsi2+0x18>
 8000974:	0a00      	lsrs	r0, r0, #8
 8000976:	3908      	subs	r1, #8
 8000978:	091b      	lsrs	r3, r3, #4
 800097a:	4298      	cmp	r0, r3
 800097c:	d301      	bcc.n	8000982 <__clzsi2+0x22>
 800097e:	0900      	lsrs	r0, r0, #4
 8000980:	3904      	subs	r1, #4
 8000982:	a202      	add	r2, pc, #8	@ (adr r2, 800098c <__clzsi2+0x2c>)
 8000984:	5c10      	ldrb	r0, [r2, r0]
 8000986:	1840      	adds	r0, r0, r1
 8000988:	4770      	bx	lr
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	02020304 	.word	0x02020304
 8000990:	01010101 	.word	0x01010101
	...

0800099c <__eqsf2>:
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	0042      	lsls	r2, r0, #1
 80009a0:	024e      	lsls	r6, r1, #9
 80009a2:	004c      	lsls	r4, r1, #1
 80009a4:	0245      	lsls	r5, r0, #9
 80009a6:	0a6d      	lsrs	r5, r5, #9
 80009a8:	0e12      	lsrs	r2, r2, #24
 80009aa:	0fc3      	lsrs	r3, r0, #31
 80009ac:	0a76      	lsrs	r6, r6, #9
 80009ae:	0e24      	lsrs	r4, r4, #24
 80009b0:	0fc9      	lsrs	r1, r1, #31
 80009b2:	2aff      	cmp	r2, #255	@ 0xff
 80009b4:	d010      	beq.n	80009d8 <__eqsf2+0x3c>
 80009b6:	2cff      	cmp	r4, #255	@ 0xff
 80009b8:	d00c      	beq.n	80009d4 <__eqsf2+0x38>
 80009ba:	2001      	movs	r0, #1
 80009bc:	42a2      	cmp	r2, r4
 80009be:	d10a      	bne.n	80009d6 <__eqsf2+0x3a>
 80009c0:	42b5      	cmp	r5, r6
 80009c2:	d108      	bne.n	80009d6 <__eqsf2+0x3a>
 80009c4:	428b      	cmp	r3, r1
 80009c6:	d00f      	beq.n	80009e8 <__eqsf2+0x4c>
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d104      	bne.n	80009d6 <__eqsf2+0x3a>
 80009cc:	0028      	movs	r0, r5
 80009ce:	1e43      	subs	r3, r0, #1
 80009d0:	4198      	sbcs	r0, r3
 80009d2:	e000      	b.n	80009d6 <__eqsf2+0x3a>
 80009d4:	2001      	movs	r0, #1
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	2001      	movs	r0, #1
 80009da:	2cff      	cmp	r4, #255	@ 0xff
 80009dc:	d1fb      	bne.n	80009d6 <__eqsf2+0x3a>
 80009de:	4335      	orrs	r5, r6
 80009e0:	d1f9      	bne.n	80009d6 <__eqsf2+0x3a>
 80009e2:	404b      	eors	r3, r1
 80009e4:	0018      	movs	r0, r3
 80009e6:	e7f6      	b.n	80009d6 <__eqsf2+0x3a>
 80009e8:	2000      	movs	r0, #0
 80009ea:	e7f4      	b.n	80009d6 <__eqsf2+0x3a>

080009ec <__gesf2>:
 80009ec:	b530      	push	{r4, r5, lr}
 80009ee:	0042      	lsls	r2, r0, #1
 80009f0:	0244      	lsls	r4, r0, #9
 80009f2:	024d      	lsls	r5, r1, #9
 80009f4:	0fc3      	lsrs	r3, r0, #31
 80009f6:	0048      	lsls	r0, r1, #1
 80009f8:	0a64      	lsrs	r4, r4, #9
 80009fa:	0e12      	lsrs	r2, r2, #24
 80009fc:	0a6d      	lsrs	r5, r5, #9
 80009fe:	0e00      	lsrs	r0, r0, #24
 8000a00:	0fc9      	lsrs	r1, r1, #31
 8000a02:	2aff      	cmp	r2, #255	@ 0xff
 8000a04:	d019      	beq.n	8000a3a <__gesf2+0x4e>
 8000a06:	28ff      	cmp	r0, #255	@ 0xff
 8000a08:	d00b      	beq.n	8000a22 <__gesf2+0x36>
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	d11e      	bne.n	8000a4c <__gesf2+0x60>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	d10b      	bne.n	8000a2a <__gesf2+0x3e>
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	d027      	beq.n	8000a66 <__gesf2+0x7a>
 8000a16:	2c00      	cmp	r4, #0
 8000a18:	d134      	bne.n	8000a84 <__gesf2+0x98>
 8000a1a:	2900      	cmp	r1, #0
 8000a1c:	d02f      	beq.n	8000a7e <__gesf2+0x92>
 8000a1e:	0008      	movs	r0, r1
 8000a20:	bd30      	pop	{r4, r5, pc}
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	d128      	bne.n	8000a78 <__gesf2+0x8c>
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	d101      	bne.n	8000a2e <__gesf2+0x42>
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d0f5      	beq.n	8000a1a <__gesf2+0x2e>
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d107      	bne.n	8000a42 <__gesf2+0x56>
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d023      	beq.n	8000a7e <__gesf2+0x92>
 8000a36:	0018      	movs	r0, r3
 8000a38:	e7f2      	b.n	8000a20 <__gesf2+0x34>
 8000a3a:	2c00      	cmp	r4, #0
 8000a3c:	d11c      	bne.n	8000a78 <__gesf2+0x8c>
 8000a3e:	28ff      	cmp	r0, #255	@ 0xff
 8000a40:	d014      	beq.n	8000a6c <__gesf2+0x80>
 8000a42:	1e58      	subs	r0, r3, #1
 8000a44:	2302      	movs	r3, #2
 8000a46:	4018      	ands	r0, r3
 8000a48:	3801      	subs	r0, #1
 8000a4a:	e7e9      	b.n	8000a20 <__gesf2+0x34>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d0f8      	beq.n	8000a42 <__gesf2+0x56>
 8000a50:	428b      	cmp	r3, r1
 8000a52:	d1f6      	bne.n	8000a42 <__gesf2+0x56>
 8000a54:	4282      	cmp	r2, r0
 8000a56:	dcf4      	bgt.n	8000a42 <__gesf2+0x56>
 8000a58:	dbeb      	blt.n	8000a32 <__gesf2+0x46>
 8000a5a:	42ac      	cmp	r4, r5
 8000a5c:	d8f1      	bhi.n	8000a42 <__gesf2+0x56>
 8000a5e:	2000      	movs	r0, #0
 8000a60:	42ac      	cmp	r4, r5
 8000a62:	d2dd      	bcs.n	8000a20 <__gesf2+0x34>
 8000a64:	e7e5      	b.n	8000a32 <__gesf2+0x46>
 8000a66:	2c00      	cmp	r4, #0
 8000a68:	d0da      	beq.n	8000a20 <__gesf2+0x34>
 8000a6a:	e7ea      	b.n	8000a42 <__gesf2+0x56>
 8000a6c:	2d00      	cmp	r5, #0
 8000a6e:	d103      	bne.n	8000a78 <__gesf2+0x8c>
 8000a70:	428b      	cmp	r3, r1
 8000a72:	d1e6      	bne.n	8000a42 <__gesf2+0x56>
 8000a74:	2000      	movs	r0, #0
 8000a76:	e7d3      	b.n	8000a20 <__gesf2+0x34>
 8000a78:	2002      	movs	r0, #2
 8000a7a:	4240      	negs	r0, r0
 8000a7c:	e7d0      	b.n	8000a20 <__gesf2+0x34>
 8000a7e:	2001      	movs	r0, #1
 8000a80:	4240      	negs	r0, r0
 8000a82:	e7cd      	b.n	8000a20 <__gesf2+0x34>
 8000a84:	428b      	cmp	r3, r1
 8000a86:	d0e8      	beq.n	8000a5a <__gesf2+0x6e>
 8000a88:	e7db      	b.n	8000a42 <__gesf2+0x56>
 8000a8a:	46c0      	nop			@ (mov r8, r8)

08000a8c <__lesf2>:
 8000a8c:	b530      	push	{r4, r5, lr}
 8000a8e:	0042      	lsls	r2, r0, #1
 8000a90:	0244      	lsls	r4, r0, #9
 8000a92:	024d      	lsls	r5, r1, #9
 8000a94:	0fc3      	lsrs	r3, r0, #31
 8000a96:	0048      	lsls	r0, r1, #1
 8000a98:	0a64      	lsrs	r4, r4, #9
 8000a9a:	0e12      	lsrs	r2, r2, #24
 8000a9c:	0a6d      	lsrs	r5, r5, #9
 8000a9e:	0e00      	lsrs	r0, r0, #24
 8000aa0:	0fc9      	lsrs	r1, r1, #31
 8000aa2:	2aff      	cmp	r2, #255	@ 0xff
 8000aa4:	d01a      	beq.n	8000adc <__lesf2+0x50>
 8000aa6:	28ff      	cmp	r0, #255	@ 0xff
 8000aa8:	d00e      	beq.n	8000ac8 <__lesf2+0x3c>
 8000aaa:	2a00      	cmp	r2, #0
 8000aac:	d11e      	bne.n	8000aec <__lesf2+0x60>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d10e      	bne.n	8000ad0 <__lesf2+0x44>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d02a      	beq.n	8000b0c <__lesf2+0x80>
 8000ab6:	2c00      	cmp	r4, #0
 8000ab8:	d00c      	beq.n	8000ad4 <__lesf2+0x48>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d01d      	beq.n	8000afa <__lesf2+0x6e>
 8000abe:	1e58      	subs	r0, r3, #1
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	4018      	ands	r0, r3
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	e010      	b.n	8000aea <__lesf2+0x5e>
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	d10d      	bne.n	8000ae8 <__lesf2+0x5c>
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d120      	bne.n	8000b12 <__lesf2+0x86>
 8000ad0:	2c00      	cmp	r4, #0
 8000ad2:	d11e      	bne.n	8000b12 <__lesf2+0x86>
 8000ad4:	2900      	cmp	r1, #0
 8000ad6:	d023      	beq.n	8000b20 <__lesf2+0x94>
 8000ad8:	0008      	movs	r0, r1
 8000ada:	e006      	b.n	8000aea <__lesf2+0x5e>
 8000adc:	2c00      	cmp	r4, #0
 8000ade:	d103      	bne.n	8000ae8 <__lesf2+0x5c>
 8000ae0:	28ff      	cmp	r0, #255	@ 0xff
 8000ae2:	d1ec      	bne.n	8000abe <__lesf2+0x32>
 8000ae4:	2d00      	cmp	r5, #0
 8000ae6:	d017      	beq.n	8000b18 <__lesf2+0x8c>
 8000ae8:	2002      	movs	r0, #2
 8000aea:	bd30      	pop	{r4, r5, pc}
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d0e6      	beq.n	8000abe <__lesf2+0x32>
 8000af0:	428b      	cmp	r3, r1
 8000af2:	d1e4      	bne.n	8000abe <__lesf2+0x32>
 8000af4:	4282      	cmp	r2, r0
 8000af6:	dce2      	bgt.n	8000abe <__lesf2+0x32>
 8000af8:	db04      	blt.n	8000b04 <__lesf2+0x78>
 8000afa:	42ac      	cmp	r4, r5
 8000afc:	d8df      	bhi.n	8000abe <__lesf2+0x32>
 8000afe:	2000      	movs	r0, #0
 8000b00:	42ac      	cmp	r4, r5
 8000b02:	d2f2      	bcs.n	8000aea <__lesf2+0x5e>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d00b      	beq.n	8000b20 <__lesf2+0x94>
 8000b08:	0018      	movs	r0, r3
 8000b0a:	e7ee      	b.n	8000aea <__lesf2+0x5e>
 8000b0c:	2c00      	cmp	r4, #0
 8000b0e:	d0ec      	beq.n	8000aea <__lesf2+0x5e>
 8000b10:	e7d5      	b.n	8000abe <__lesf2+0x32>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d1d3      	bne.n	8000abe <__lesf2+0x32>
 8000b16:	e7f5      	b.n	8000b04 <__lesf2+0x78>
 8000b18:	2000      	movs	r0, #0
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d0e5      	beq.n	8000aea <__lesf2+0x5e>
 8000b1e:	e7ce      	b.n	8000abe <__lesf2+0x32>
 8000b20:	2001      	movs	r0, #1
 8000b22:	4240      	negs	r0, r0
 8000b24:	e7e1      	b.n	8000aea <__lesf2+0x5e>
 8000b26:	46c0      	nop			@ (mov r8, r8)

08000b28 <RGs_Attr_Init>:
	uint8_t all_RGs_custom[RGS_NUMBER];
} RGs_Attr;

RGs_Attr RGs;

static void RGs_Attr_Init() {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
	RGs.RG_off = 0b11111111;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b30:	22ff      	movs	r2, #255	@ 0xff
 8000b32:	701a      	strb	r2, [r3, #0]
	RGs.RG_on = 0b00000000;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	705a      	strb	r2, [r3, #1]
	RGs.mixled_off = 0b10001110;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b3c:	228e      	movs	r2, #142	@ 0x8e
 8000b3e:	709a      	strb	r2, [r3, #2]
	RGs.mixled_on = 0b01110000;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b42:	2270      	movs	r2, #112	@ 0x70
 8000b44:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < RGS_NUMBER; ++i) {
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	e01c      	b.n	8000b88 <RGs_Attr_Init+0x60>
		RGs.all_RGs_on[i] = RGs.RG_on;
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b54:	7851      	ldrb	r1, [r2, #1]
 8000b56:	4a16      	ldr	r2, [pc, #88]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b58:	18d3      	adds	r3, r2, r3
 8000b5a:	1c0a      	adds	r2, r1, #0
 8000b5c:	711a      	strb	r2, [r3, #4]
		RGs.all_RGs_custom[i] = RGs.all_RGs_off[i] = RGs.RG_off;
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4a13      	ldr	r2, [pc, #76]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b64:	7811      	ldrb	r1, [r2, #0]
 8000b66:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b68:	18d2      	adds	r2, r2, r3
 8000b6a:	7351      	strb	r1, [r2, #13]
 8000b6c:	1dfa      	adds	r2, r7, #7
 8000b6e:	7812      	ldrb	r2, [r2, #0]
 8000b70:	490f      	ldr	r1, [pc, #60]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b72:	18cb      	adds	r3, r1, r3
 8000b74:	7b59      	ldrb	r1, [r3, #13]
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b78:	189b      	adds	r3, r3, r2
 8000b7a:	1c0a      	adds	r2, r1, #0
 8000b7c:	759a      	strb	r2, [r3, #22]
	for (uint8_t i = 0; i < RGS_NUMBER; ++i) {
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	1dfa      	adds	r2, r7, #7
 8000b82:	7812      	ldrb	r2, [r2, #0]
 8000b84:	3201      	adds	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b08      	cmp	r3, #8
 8000b8e:	d9de      	bls.n	8000b4e <RGs_Attr_Init+0x26>
	}

	RGs.all_RGs_on[4] = RGs.mixled_on;
 8000b90:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b92:	78da      	ldrb	r2, [r3, #3]
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b96:	721a      	strb	r2, [r3, #8]
	RGs.all_RGs_custom[4]=RGs.all_RGs_off[4] = RGs.mixled_off;
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b9a:	789a      	ldrb	r2, [r3, #2]
 8000b9c:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000b9e:	745a      	strb	r2, [r3, #17]
 8000ba0:	4b03      	ldr	r3, [pc, #12]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000ba2:	7c5a      	ldrb	r2, [r3, #17]
 8000ba4:	4b02      	ldr	r3, [pc, #8]	@ (8000bb0 <RGs_Attr_Init+0x88>)
 8000ba6:	769a      	strb	r2, [r3, #26]
}
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000128 	.word	0x20000128

08000bb4 <symbol_transform>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t symbol_transform(unsigned char symbol) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	701a      	strb	r2, [r3, #0]
	uint8_t sym_to_indicator = 0;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
	switch (symbol) {
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bce:	d83a      	bhi.n	8000c46 <symbol_transform+0x92>
 8000bd0:	009a      	lsls	r2, r3, #2
 8000bd2:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <symbol_transform+0xa0>)
 8000bd4:	18d3      	adds	r3, r2, r3
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	469f      	mov	pc, r3
	case 1:
		sym_to_indicator = 0b01110111;
 8000bda:	230f      	movs	r3, #15
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	2277      	movs	r2, #119	@ 0x77
 8000be0:	701a      	strb	r2, [r3, #0]
		break;
 8000be2:	e030      	b.n	8000c46 <symbol_transform+0x92>
	case 2:
		sym_to_indicator = 0b00101001;
 8000be4:	230f      	movs	r3, #15
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2229      	movs	r2, #41	@ 0x29
 8000bea:	701a      	strb	r2, [r3, #0]
		break;
 8000bec:	e02b      	b.n	8000c46 <symbol_transform+0x92>
	case 3:
		sym_to_indicator = 0b00100011;
 8000bee:	230f      	movs	r3, #15
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	2223      	movs	r2, #35	@ 0x23
 8000bf4:	701a      	strb	r2, [r3, #0]
		break;
 8000bf6:	e026      	b.n	8000c46 <symbol_transform+0x92>
	case 4:
		sym_to_indicator = 0b01000111;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	2247      	movs	r2, #71	@ 0x47
 8000bfe:	701a      	strb	r2, [r3, #0]
		break;
 8000c00:	e021      	b.n	8000c46 <symbol_transform+0x92>
	case 5:
		sym_to_indicator = 0b10000011;
 8000c02:	230f      	movs	r3, #15
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	2283      	movs	r2, #131	@ 0x83
 8000c08:	701a      	strb	r2, [r3, #0]
		break;
 8000c0a:	e01c      	b.n	8000c46 <symbol_transform+0x92>
	case 6:
		sym_to_indicator = 0b10000001;
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	2281      	movs	r2, #129	@ 0x81
 8000c12:	701a      	strb	r2, [r3, #0]
		break;
 8000c14:	e017      	b.n	8000c46 <symbol_transform+0x92>
	case 7:
		sym_to_indicator = 0b00110111;
 8000c16:	230f      	movs	r3, #15
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	2237      	movs	r2, #55	@ 0x37
 8000c1c:	701a      	strb	r2, [r3, #0]
		break;
 8000c1e:	e012      	b.n	8000c46 <symbol_transform+0x92>
	case 8:
		sym_to_indicator = 0b00000001;
 8000c20:	230f      	movs	r3, #15
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
		break;
 8000c28:	e00d      	b.n	8000c46 <symbol_transform+0x92>
	case 9:
		sym_to_indicator = 0b00000111;
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	18fb      	adds	r3, r7, r3
 8000c2e:	2207      	movs	r2, #7
 8000c30:	701a      	strb	r2, [r3, #0]
		break;
 8000c32:	e008      	b.n	8000c46 <symbol_transform+0x92>
	case 0:
		sym_to_indicator = 0b00010001;
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	2211      	movs	r2, #17
 8000c3a:	701a      	strb	r2, [r3, #0]
		break;
 8000c3c:	e003      	b.n	8000c46 <symbol_transform+0x92>
	case '.':
		sym_to_indicator = 0b11111110;
 8000c3e:	230f      	movs	r3, #15
 8000c40:	18fb      	adds	r3, r7, r3
 8000c42:	22fe      	movs	r2, #254	@ 0xfe
 8000c44:	701a      	strb	r2, [r3, #0]
	}
	return sym_to_indicator;
 8000c46:	230f      	movs	r3, #15
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	781b      	ldrb	r3, [r3, #0]
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b004      	add	sp, #16
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	080037bc 	.word	0x080037bc

08000c58 <number_to_indicator>:

uint8_t getInfo() {
	return 8;
}
void number_to_indicator(float number, bool voltage) {
 8000c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	000a      	movs	r2, r1
 8000c62:	1cfb      	adds	r3, r7, #3
 8000c64:	701a      	strb	r2, [r3, #0]
	if (voltage) {
 8000c66:	1cfb      	adds	r3, r7, #3
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d04c      	beq.n	8000d08 <number_to_indicator+0xb0>
		//2 1 3 RGs
		number = 3.14;
 8000c6e:	4b28      	ldr	r3, [pc, #160]	@ (8000d10 <number_to_indicator+0xb8>)
 8000c70:	607b      	str	r3, [r7, #4]
		uint8_t integer, fraction;
		integer = number;
 8000c72:	250f      	movs	r5, #15
 8000c74:	197c      	adds	r4, r7, r5
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff fad2 	bl	8000220 <__aeabi_f2uiz>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	7023      	strb	r3, [r4, #0]
		fraction = (number - integer) * 100;
 8000c80:	197b      	adds	r3, r7, r5
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff fde5 	bl	8000854 <__aeabi_i2f>
 8000c8a:	1c03      	adds	r3, r0, #0
 8000c8c:	1c19      	adds	r1, r3, #0
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fc1c 	bl	80004cc <__aeabi_fsub>
 8000c94:	1c03      	adds	r3, r0, #0
 8000c96:	491f      	ldr	r1, [pc, #124]	@ (8000d14 <number_to_indicator+0xbc>)
 8000c98:	1c18      	adds	r0, r3, #0
 8000c9a:	f7ff fad9 	bl	8000250 <__aeabi_fmul>
 8000c9e:	1c03      	adds	r3, r0, #0
 8000ca0:	260e      	movs	r6, #14
 8000ca2:	19bc      	adds	r4, r7, r6
 8000ca4:	1c18      	adds	r0, r3, #0
 8000ca6:	f7ff fabb 	bl	8000220 <__aeabi_f2uiz>
 8000caa:	0003      	movs	r3, r0
 8000cac:	7023      	strb	r3, [r4, #0]
		RGs.all_RGs_custom[2] = symbol_transform(integer) & symbol_transform('.');
 8000cae:	197b      	adds	r3, r7, r5
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff ff7e 	bl	8000bb4 <symbol_transform>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	001c      	movs	r4, r3
 8000cbc:	202e      	movs	r0, #46	@ 0x2e
 8000cbe:	f7ff ff79 	bl	8000bb4 <symbol_transform>
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	4023      	ands	r3, r4
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <number_to_indicator+0xc0>)
 8000cca:	761a      	strb	r2, [r3, #24]
		RGs.all_RGs_custom[1] = symbol_transform(fraction / 10);
 8000ccc:	19bb      	adds	r3, r7, r6
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	210a      	movs	r1, #10
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff fa18 	bl	8000108 <__udivsi3>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff ff69 	bl	8000bb4 <symbol_transform>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <number_to_indicator+0xc0>)
 8000ce8:	75da      	strb	r2, [r3, #23]
		RGs.all_RGs_custom[3] = symbol_transform(fraction % 10);
 8000cea:	19bb      	adds	r3, r7, r6
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	210a      	movs	r1, #10
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fa8f 	bl	8000214 <__aeabi_uidivmod>
 8000cf6:	000b      	movs	r3, r1
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff ff5a 	bl	8000bb4 <symbol_transform>
 8000d00:	0003      	movs	r3, r0
 8000d02:	001a      	movs	r2, r3
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <number_to_indicator+0xc0>)
 8000d06:	765a      	strb	r2, [r3, #25]
	}
	else {
		// 7 6 8
	}

}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b005      	add	sp, #20
 8000d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d10:	4048f5c3 	.word	0x4048f5c3
 8000d14:	42c80000 	.word	0x42c80000
 8000d18:	20000128 	.word	0x20000128

08000d1c <update_indication>:
void update_indication(bool indication, bool voltage) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	0002      	movs	r2, r0
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	1dbb      	adds	r3, r7, #6
 8000d2a:	1c0a      	adds	r2, r1, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
	if (indication) {
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00d      	beq.n	8000d52 <update_indication+0x36>
		number_to_indicator(3.14, voltage);
 8000d36:	1dbb      	adds	r3, r7, #6
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	4a12      	ldr	r2, [pc, #72]	@ (8000d84 <update_indication+0x68>)
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	1c10      	adds	r0, r2, #0
 8000d40:	f7ff ff8a 	bl	8000c58 <number_to_indicator>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) RGs.all_RGs_custom, RGS_NUMBER, 5000);  //SN74HC595N
 8000d44:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <update_indication+0x6c>)
 8000d46:	4911      	ldr	r1, [pc, #68]	@ (8000d8c <update_indication+0x70>)
 8000d48:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <update_indication+0x74>)
 8000d4a:	2209      	movs	r2, #9
 8000d4c:	f001 fdf4 	bl	8002938 <HAL_SPI_Transmit>
 8000d50:	e005      	b.n	8000d5e <update_indication+0x42>
	} else {
		HAL_SPI_Transmit(&hspi2, (uint8_t*) RGs.all_RGs_off, RGS_NUMBER, 5000);  //SN74HC595N
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <update_indication+0x6c>)
 8000d54:	490f      	ldr	r1, [pc, #60]	@ (8000d94 <update_indication+0x78>)
 8000d56:	480e      	ldr	r0, [pc, #56]	@ (8000d90 <update_indication+0x74>)
 8000d58:	2209      	movs	r2, #9
 8000d5a:	f001 fded 	bl	8002938 <HAL_SPI_Transmit>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000d5e:	2380      	movs	r3, #128	@ 0x80
 8000d60:	01db      	lsls	r3, r3, #7
 8000d62:	480d      	ldr	r0, [pc, #52]	@ (8000d98 <update_indication+0x7c>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	0019      	movs	r1, r3
 8000d68:	f000 fe12 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	01db      	lsls	r3, r3, #7
 8000d70:	4809      	ldr	r0, [pc, #36]	@ (8000d98 <update_indication+0x7c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	0019      	movs	r1, r3
 8000d76:	f000 fe0b 	bl	8001990 <HAL_GPIO_WritePin>
}
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b002      	add	sp, #8
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	4048f5c3 	.word	0x4048f5c3
 8000d88:	00001388 	.word	0x00001388
 8000d8c:	2000013e 	.word	0x2000013e
 8000d90:	2000007c 	.word	0x2000007c
 8000d94:	20000135 	.word	0x20000135
 8000d98:	48000400 	.word	0x48000400

08000d9c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) //check if the interrupt comes from TIM1
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d103      	bne.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		update_indication(false,true);//добавить переменные индикации и измеряемой переменной
 8000dae:	2101      	movs	r1, #1
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff ffb3 	bl	8000d1c <update_indication>
	}
}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	40012c00 	.word	0x40012c00

08000dc4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dc8:	f000 fb28 	bl	800141c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000dcc:	f000 f834 	bl	8000e38 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dd0:	f000 f964 	bl	800109c <MX_GPIO_Init>
	MX_I2C1_Init();
 8000dd4:	f000 f88a 	bl	8000eec <MX_I2C1_Init>
	MX_SPI2_Init();
 8000dd8:	f000 f8c8 	bl	8000f6c <MX_SPI2_Init>
	MX_TIM1_Init();
 8000ddc:	f000 f904 	bl	8000fe8 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	RGs_Attr_Init();
 8000de0:	f7ff fea2 	bl	8000b28 <RGs_Attr_Init>
	//cs_reset();
	//HAL_SPI_Transmit(&hspi1, &spi2_data, 1, 5000);//
	HAL_SPI_Transmit(&hspi2, (uint8_t*) RGs.all_RGs_off, RGS_NUMBER, 5000);  //SN74HC595N
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <main+0x60>)
 8000de6:	4910      	ldr	r1, [pc, #64]	@ (8000e28 <main+0x64>)
 8000de8:	4810      	ldr	r0, [pc, #64]	@ (8000e2c <main+0x68>)
 8000dea:	2209      	movs	r2, #9
 8000dec:	f001 fda4 	bl	8002938 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000df0:	2380      	movs	r3, #128	@ 0x80
 8000df2:	01db      	lsls	r3, r3, #7
 8000df4:	480e      	ldr	r0, [pc, #56]	@ (8000e30 <main+0x6c>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	0019      	movs	r1, r3
 8000dfa:	f000 fdc9 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000dfe:	2380      	movs	r3, #128	@ 0x80
 8000e00:	01db      	lsls	r3, r3, #7
 8000e02:	480b      	ldr	r0, [pc, #44]	@ (8000e30 <main+0x6c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	0019      	movs	r1, r3
 8000e08:	f000 fdc2 	bl	8001990 <HAL_GPIO_WritePin>
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);//подождать 4 секунды для STC3100
 8000e0c:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <main+0x70>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2202      	movs	r2, #2
 8000e12:	4252      	negs	r2, r2
 8000e14:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim1);
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <main+0x70>)
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f002 f8b3 	bl	8002f84 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	e7fd      	b.n	8000e1e <main+0x5a>
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	00001388 	.word	0x00001388
 8000e28:	20000135 	.word	0x20000135
 8000e2c:	2000007c 	.word	0x2000007c
 8000e30:	48000400 	.word	0x48000400
 8000e34:	200000e0 	.word	0x200000e0

08000e38 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b099      	sub	sp, #100	@ 0x64
 8000e3c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e3e:	242c      	movs	r4, #44	@ 0x2c
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	0018      	movs	r0, r3
 8000e44:	2334      	movs	r3, #52	@ 0x34
 8000e46:	001a      	movs	r2, r3
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f002 fc7f 	bl	800374c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e4e:	231c      	movs	r3, #28
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	0018      	movs	r0, r3
 8000e54:	2310      	movs	r3, #16
 8000e56:	001a      	movs	r2, r3
 8000e58:	2100      	movs	r1, #0
 8000e5a:	f002 fc77 	bl	800374c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000e5e:	003b      	movs	r3, r7
 8000e60:	0018      	movs	r0, r3
 8000e62:	231c      	movs	r3, #28
 8000e64:	001a      	movs	r2, r3
 8000e66:	2100      	movs	r1, #0
 8000e68:	f002 fc70 	bl	800374c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48;
 8000e6c:	0021      	movs	r1, r4
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2222      	movs	r2, #34	@ 0x22
 8000e72:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2201      	movs	r2, #1
 8000e78:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2210      	movs	r2, #16
 8000e84:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2200      	movs	r2, #0
 8000e8a:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f000 feca 	bl	8001c28 <HAL_RCC_OscConfig>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x64>
		Error_Handler();
 8000e98:	f000 f97c 	bl	8001194 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000e9c:	211c      	movs	r1, #28
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2101      	movs	r1, #1
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f001 fa3a 	bl	8002334 <HAL_RCC_ClockConfig>
 8000ec0:	1e03      	subs	r3, r0, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x90>
		Error_Handler();
 8000ec4:	f000 f966 	bl	8001194 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ec8:	003b      	movs	r3, r7
 8000eca:	2220      	movs	r2, #32
 8000ecc:	601a      	str	r2, [r3, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ece:	003b      	movs	r3, r7
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000ed4:	003b      	movs	r3, r7
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f001 fb78 	bl	80025cc <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0xac>
		Error_Handler();
 8000ee0:	f000 f958 	bl	8001194 <Error_Handler>
	}
}
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b019      	add	sp, #100	@ 0x64
 8000eea:	bd90      	pop	{r4, r7, pc}

08000eec <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <MX_I2C1_Init+0x74>)
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f64 <MX_I2C1_Init+0x78>)
 8000ef4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <MX_I2C1_Init+0x74>)
 8000ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f68 <MX_I2C1_Init+0x7c>)
 8000efa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000efc:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <MX_I2C1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f02:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <MX_I2C1_Init+0x74>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f08:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <MX_I2C1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000f0e:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <MX_I2C1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <MX_I2C1_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <MX_I2C1_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <MX_I2C1_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <MX_I2C1_Init+0x74>)
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f000 fd4f 	bl	80019cc <HAL_I2C_Init>
 8000f2e:	1e03      	subs	r3, r0, #0
 8000f30:	d001      	beq.n	8000f36 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000f32:	f000 f92f 	bl	8001194 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <MX_I2C1_Init+0x74>)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 fddc 	bl	8001af8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d001      	beq.n	8000f48 <MX_I2C1_Init+0x5c>
		Error_Handler();
 8000f44:	f000 f926 	bl	8001194 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <MX_I2C1_Init+0x74>)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f000 fe1f 	bl	8001b90 <HAL_I2CEx_ConfigDigitalFilter>
 8000f52:	1e03      	subs	r3, r0, #0
 8000f54:	d001      	beq.n	8000f5a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000f56:	f000 f91d 	bl	8001194 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000028 	.word	0x20000028
 8000f64:	40005400 	.word	0x40005400
 8000f68:	2000090e 	.word	0x2000090e

08000f6c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000f72:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe4 <MX_SPI2_Init+0x78>)
 8000f74:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000f78:	2282      	movs	r2, #130	@ 0x82
 8000f7a:	0052      	lsls	r2, r2, #1
 8000f7c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000f86:	22e0      	movs	r2, #224	@ 0xe0
 8000f88:	00d2      	lsls	r2, r2, #3
 8000f8a:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f92:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000f9a:	2280      	movs	r2, #128	@ 0x80
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000fa2:	2208      	movs	r2, #8
 8000fa4:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000fba:	2207      	movs	r2, #7
 8000fbc:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000fca:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <MX_SPI2_Init+0x74>)
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f001 fbfb 	bl	80027c8 <HAL_SPI_Init>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d001      	beq.n	8000fda <MX_SPI2_Init+0x6e>
		Error_Handler();
 8000fd6:	f000 f8dd 	bl	8001194 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000007c 	.word	0x2000007c
 8000fe4:	40003800 	.word	0x40003800

08000fe8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000fee:	2308      	movs	r3, #8
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f002 fba7 	bl	800374c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ffe:	003b      	movs	r3, r7
 8001000:	0018      	movs	r0, r3
 8001002:	2308      	movs	r3, #8
 8001004:	001a      	movs	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	f002 fba0 	bl	800374c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <MX_TIM1_Init+0xa4>)
 800100e:	4a20      	ldr	r2, [pc, #128]	@ (8001090 <MX_TIM1_Init+0xa8>)
 8001010:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 3839;
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <MX_TIM1_Init+0xa4>)
 8001014:	4a1f      	ldr	r2, [pc, #124]	@ (8001094 <MX_TIM1_Init+0xac>)
 8001016:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_TIM1_Init+0xa4>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 49999;
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_TIM1_Init+0xa4>)
 8001020:	4a1d      	ldr	r2, [pc, #116]	@ (8001098 <MX_TIM1_Init+0xb0>)
 8001022:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_TIM1_Init+0xa4>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_TIM1_Init+0xa4>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_TIM1_Init+0xa4>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_TIM1_Init+0xa4>)
 8001038:	0018      	movs	r0, r3
 800103a:	f001 ff53 	bl	8002ee4 <HAL_TIM_Base_Init>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM1_Init+0x5e>
		Error_Handler();
 8001042:	f000 f8a7 	bl	8001194 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001046:	2108      	movs	r1, #8
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2280      	movs	r2, #128	@ 0x80
 800104c:	0152      	lsls	r2, r2, #5
 800104e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001050:	187a      	adds	r2, r7, r1
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_TIM1_Init+0xa4>)
 8001054:	0011      	movs	r1, r2
 8001056:	0018      	movs	r0, r3
 8001058:	f002 f8fc 	bl	8003254 <HAL_TIM_ConfigClockSource>
 800105c:	1e03      	subs	r3, r0, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8001060:	f000 f898 	bl	8001194 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	003b      	movs	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106a:	003b      	movs	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001070:	003a      	movs	r2, r7
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_TIM1_Init+0xa4>)
 8001074:	0011      	movs	r1, r2
 8001076:	0018      	movs	r0, r3
 8001078:	f002 fafa 	bl	8003670 <HAL_TIMEx_MasterConfigSynchronization>
 800107c:	1e03      	subs	r3, r0, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0x9c>
		Error_Handler();
 8001080:	f000 f888 	bl	8001194 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001084:	46c0      	nop			@ (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b006      	add	sp, #24
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000e0 	.word	0x200000e0
 8001090:	40012c00 	.word	0x40012c00
 8001094:	00000eff 	.word	0x00000eff
 8001098:	0000c34f 	.word	0x0000c34f

0800109c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b089      	sub	sp, #36	@ 0x24
 80010a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010a2:	240c      	movs	r4, #12
 80010a4:	193b      	adds	r3, r7, r4
 80010a6:	0018      	movs	r0, r3
 80010a8:	2314      	movs	r3, #20
 80010aa:	001a      	movs	r2, r3
 80010ac:	2100      	movs	r1, #0
 80010ae:	f002 fb4d 	bl	800374c <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80010b2:	4b36      	ldr	r3, [pc, #216]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010b4:	695a      	ldr	r2, [r3, #20]
 80010b6:	4b35      	ldr	r3, [pc, #212]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010b8:	2180      	movs	r1, #128	@ 0x80
 80010ba:	03c9      	lsls	r1, r1, #15
 80010bc:	430a      	orrs	r2, r1
 80010be:	615a      	str	r2, [r3, #20]
 80010c0:	4b32      	ldr	r3, [pc, #200]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010c2:	695a      	ldr	r2, [r3, #20]
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	03db      	lsls	r3, r3, #15
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4b2f      	ldr	r3, [pc, #188]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	4b2e      	ldr	r3, [pc, #184]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010d4:	2180      	movs	r1, #128	@ 0x80
 80010d6:	02c9      	lsls	r1, r1, #11
 80010d8:	430a      	orrs	r2, r1
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	4b2b      	ldr	r3, [pc, #172]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010de:	695a      	ldr	r2, [r3, #20]
 80010e0:	2380      	movs	r3, #128	@ 0x80
 80010e2:	02db      	lsls	r3, r3, #11
 80010e4:	4013      	ands	r3, r2
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b28      	ldr	r3, [pc, #160]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010ec:	695a      	ldr	r2, [r3, #20]
 80010ee:	4b27      	ldr	r3, [pc, #156]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010f0:	2180      	movs	r1, #128	@ 0x80
 80010f2:	0289      	lsls	r1, r1, #10
 80010f4:	430a      	orrs	r2, r1
 80010f6:	615a      	str	r2, [r3, #20]
 80010f8:	4b24      	ldr	r3, [pc, #144]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010fa:	695a      	ldr	r2, [r3, #20]
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	029b      	lsls	r3, r3, #10
 8001100:	4013      	ands	r3, r2
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_11 | RG_STROBE_Pin, GPIO_PIN_RESET);
 8001106:	2398      	movs	r3, #152	@ 0x98
 8001108:	01db      	lsls	r3, r3, #7
 800110a:	4821      	ldr	r0, [pc, #132]	@ (8001190 <MX_GPIO_Init+0xf4>)
 800110c:	2200      	movs	r2, #0
 800110e:	0019      	movs	r1, r3
 8001110:	f000 fc3e 	bl	8001990 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001114:	2380      	movs	r3, #128	@ 0x80
 8001116:	015b      	lsls	r3, r3, #5
 8001118:	481d      	ldr	r0, [pc, #116]	@ (8001190 <MX_GPIO_Init+0xf4>)
 800111a:	2201      	movs	r2, #1
 800111c:	0019      	movs	r1, r3
 800111e:	f000 fc37 	bl	8001990 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);
 8001122:	23e0      	movs	r3, #224	@ 0xe0
 8001124:	00d9      	lsls	r1, r3, #3
 8001126:	2390      	movs	r3, #144	@ 0x90
 8001128:	05db      	lsls	r3, r3, #23
 800112a:	2200      	movs	r2, #0
 800112c:	0018      	movs	r0, r3
 800112e:	f000 fc2f 	bl	8001990 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB10 PB11 PB12 RG_STROBE_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | RG_STROBE_Pin;
 8001132:	193b      	adds	r3, r7, r4
 8001134:	22b8      	movs	r2, #184	@ 0xb8
 8001136:	01d2      	lsls	r2, r2, #7
 8001138:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	193b      	adds	r3, r7, r4
 800113c:	2201      	movs	r2, #1
 800113e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	193b      	adds	r3, r7, r4
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	193b      	adds	r3, r7, r4
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	193b      	adds	r3, r7, r4
 800114e:	4a10      	ldr	r2, [pc, #64]	@ (8001190 <MX_GPIO_Init+0xf4>)
 8001150:	0019      	movs	r1, r3
 8001152:	0010      	movs	r0, r2
 8001154:	f000 faa4 	bl	80016a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8001158:	0021      	movs	r1, r4
 800115a:	187b      	adds	r3, r7, r1
 800115c:	22e0      	movs	r2, #224	@ 0xe0
 800115e:	00d2      	lsls	r2, r2, #3
 8001160:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	187b      	adds	r3, r7, r1
 8001164:	2201      	movs	r2, #1
 8001166:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	187b      	adds	r3, r7, r1
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	187a      	adds	r2, r7, r1
 8001176:	2390      	movs	r3, #144	@ 0x90
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	0011      	movs	r1, r2
 800117c:	0018      	movs	r0, r3
 800117e:	f000 fa8f 	bl	80016a0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b009      	add	sp, #36	@ 0x24
 8001188:	bd90      	pop	{r4, r7, pc}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	40021000 	.word	0x40021000
 8001190:	48000400 	.word	0x48000400

08001194 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800119c:	46c0      	nop			@ (mov r8, r8)
 800119e:	e7fd      	b.n	800119c <Error_Handler+0x8>

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_MspInit+0x44>)
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <HAL_MspInit+0x44>)
 80011ac:	2101      	movs	r1, #1
 80011ae:	430a      	orrs	r2, r1
 80011b0:	619a      	str	r2, [r3, #24]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <HAL_MspInit+0x44>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	2201      	movs	r2, #1
 80011b8:	4013      	ands	r3, r2
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <HAL_MspInit+0x44>)
 80011c0:	69da      	ldr	r2, [r3, #28]
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <HAL_MspInit+0x44>)
 80011c4:	2180      	movs	r1, #128	@ 0x80
 80011c6:	0549      	lsls	r1, r1, #21
 80011c8:	430a      	orrs	r2, r1
 80011ca:	61da      	str	r2, [r3, #28]
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <HAL_MspInit+0x44>)
 80011ce:	69da      	ldr	r2, [r3, #28]
 80011d0:	2380      	movs	r3, #128	@ 0x80
 80011d2:	055b      	lsls	r3, r3, #21
 80011d4:	4013      	ands	r3, r2
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b08b      	sub	sp, #44	@ 0x2c
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	2414      	movs	r4, #20
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	0018      	movs	r0, r3
 80011f6:	2314      	movs	r3, #20
 80011f8:	001a      	movs	r2, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	f002 faa6 	bl	800374c <memset>
  if(hi2c->Instance==I2C1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a1c      	ldr	r2, [pc, #112]	@ (8001278 <HAL_I2C_MspInit+0x90>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d132      	bne.n	8001270 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <HAL_I2C_MspInit+0x94>)
 800120c:	695a      	ldr	r2, [r3, #20]
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_I2C_MspInit+0x94>)
 8001210:	2180      	movs	r1, #128	@ 0x80
 8001212:	02c9      	lsls	r1, r1, #11
 8001214:	430a      	orrs	r2, r1
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <HAL_I2C_MspInit+0x94>)
 800121a:	695a      	ldr	r2, [r3, #20]
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	02db      	lsls	r3, r3, #11
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001226:	193b      	adds	r3, r7, r4
 8001228:	22c0      	movs	r2, #192	@ 0xc0
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122e:	0021      	movs	r1, r4
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2212      	movs	r2, #18
 8001234:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	187b      	adds	r3, r7, r1
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2203      	movs	r2, #3
 8001240:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2201      	movs	r2, #1
 8001246:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	187b      	adds	r3, r7, r1
 800124a:	4a0d      	ldr	r2, [pc, #52]	@ (8001280 <HAL_I2C_MspInit+0x98>)
 800124c:	0019      	movs	r1, r3
 800124e:	0010      	movs	r0, r2
 8001250:	f000 fa26 	bl	80016a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <HAL_I2C_MspInit+0x94>)
 8001256:	69da      	ldr	r2, [r3, #28]
 8001258:	4b08      	ldr	r3, [pc, #32]	@ (800127c <HAL_I2C_MspInit+0x94>)
 800125a:	2180      	movs	r1, #128	@ 0x80
 800125c:	0389      	lsls	r1, r1, #14
 800125e:	430a      	orrs	r2, r1
 8001260:	61da      	str	r2, [r3, #28]
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_I2C_MspInit+0x94>)
 8001264:	69da      	ldr	r2, [r3, #28]
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	039b      	lsls	r3, r3, #14
 800126a:	4013      	ands	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b00b      	add	sp, #44	@ 0x2c
 8001276:	bd90      	pop	{r4, r7, pc}
 8001278:	40005400 	.word	0x40005400
 800127c:	40021000 	.word	0x40021000
 8001280:	48000400 	.word	0x48000400

08001284 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b08b      	sub	sp, #44	@ 0x2c
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	2414      	movs	r4, #20
 800128e:	193b      	adds	r3, r7, r4
 8001290:	0018      	movs	r0, r3
 8001292:	2314      	movs	r3, #20
 8001294:	001a      	movs	r2, r3
 8001296:	2100      	movs	r1, #0
 8001298:	f002 fa58 	bl	800374c <memset>
  if(hspi->Instance==SPI2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001314 <HAL_SPI_MspInit+0x90>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d132      	bne.n	800130c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <HAL_SPI_MspInit+0x94>)
 80012a8:	69da      	ldr	r2, [r3, #28]
 80012aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <HAL_SPI_MspInit+0x94>)
 80012ac:	2180      	movs	r1, #128	@ 0x80
 80012ae:	01c9      	lsls	r1, r1, #7
 80012b0:	430a      	orrs	r2, r1
 80012b2:	61da      	str	r2, [r3, #28]
 80012b4:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <HAL_SPI_MspInit+0x94>)
 80012b6:	69da      	ldr	r2, [r3, #28]
 80012b8:	2380      	movs	r3, #128	@ 0x80
 80012ba:	01db      	lsls	r3, r3, #7
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_SPI_MspInit+0x94>)
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <HAL_SPI_MspInit+0x94>)
 80012c8:	2180      	movs	r1, #128	@ 0x80
 80012ca:	02c9      	lsls	r1, r1, #11
 80012cc:	430a      	orrs	r2, r1
 80012ce:	615a      	str	r2, [r3, #20]
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <HAL_SPI_MspInit+0x94>)
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	02db      	lsls	r3, r3, #11
 80012d8:	4013      	ands	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80012de:	193b      	adds	r3, r7, r4
 80012e0:	22a0      	movs	r2, #160	@ 0xa0
 80012e2:	0212      	lsls	r2, r2, #8
 80012e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	0021      	movs	r1, r4
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	2202      	movs	r2, #2
 80012ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	2203      	movs	r2, #3
 80012f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	187b      	adds	r3, r7, r1
 8001302:	4a06      	ldr	r2, [pc, #24]	@ (800131c <HAL_SPI_MspInit+0x98>)
 8001304:	0019      	movs	r1, r3
 8001306:	0010      	movs	r0, r2
 8001308:	f000 f9ca 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800130c:	46c0      	nop			@ (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	b00b      	add	sp, #44	@ 0x2c
 8001312:	bd90      	pop	{r4, r7, pc}
 8001314:	40003800 	.word	0x40003800
 8001318:	40021000 	.word	0x40021000
 800131c:	48000400 	.word	0x48000400

08001320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0e      	ldr	r2, [pc, #56]	@ (8001368 <HAL_TIM_Base_MspInit+0x48>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d115      	bne.n	800135e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <HAL_TIM_Base_MspInit+0x4c>)
 8001334:	699a      	ldr	r2, [r3, #24]
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_TIM_Base_MspInit+0x4c>)
 8001338:	2180      	movs	r1, #128	@ 0x80
 800133a:	0109      	lsls	r1, r1, #4
 800133c:	430a      	orrs	r2, r1
 800133e:	619a      	str	r2, [r3, #24]
 8001340:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_TIM_Base_MspInit+0x4c>)
 8001342:	699a      	ldr	r2, [r3, #24]
 8001344:	2380      	movs	r3, #128	@ 0x80
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	200d      	movs	r0, #13
 8001354:	f000 f972 	bl	800163c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001358:	200d      	movs	r0, #13
 800135a:	f000 f984 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	40012c00 	.word	0x40012c00
 800136c:	40021000 	.word	0x40021000

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	46c0      	nop			@ (mov r8, r8)
 8001376:	e7fd      	b.n	8001374 <NMI_Handler+0x4>

08001378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	46c0      	nop			@ (mov r8, r8)
 800137e:	e7fd      	b.n	800137c <HardFault_Handler+0x4>

08001380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001384:	46c0      	nop			@ (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 f888 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013a8:	4b03      	ldr	r3, [pc, #12]	@ (80013b8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f001 fe3c 	bl	8003028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80013b0:	46c0      	nop			@ (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	200000e0 	.word	0x200000e0

080013bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80013c0:	46c0      	nop			@ (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013c8:	480d      	ldr	r0, [pc, #52]	@ (8001400 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013cc:	f7ff fff6 	bl	80013bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	@ (8001404 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	@ (8001408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <LoopForever+0xe>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001414 <LoopForever+0x16>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013f6:	f002 f9b1 	bl	800375c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013fa:	f7ff fce3 	bl	8000dc4 <main>

080013fe <LoopForever>:

LoopForever:
    b LoopForever
 80013fe:	e7fe      	b.n	80013fe <LoopForever>
  ldr   r0, =_estack
 8001400:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800140c:	080038b0 	.word	0x080038b0
  ldr r2, =_sbss
 8001410:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001414:	2000014c 	.word	0x2000014c

08001418 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC1_COMP_IRQHandler>
	...

0800141c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <HAL_Init+0x24>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_Init+0x24>)
 8001426:	2110      	movs	r1, #16
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 f809 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001432:	f7ff feb5 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	0018      	movs	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	40022000 	.word	0x40022000

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <HAL_InitTick+0x5c>)
 800144e:	681c      	ldr	r4, [r3, #0]
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <HAL_InitTick+0x60>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	0019      	movs	r1, r3
 8001456:	23fa      	movs	r3, #250	@ 0xfa
 8001458:	0098      	lsls	r0, r3, #2
 800145a:	f7fe fe55 	bl	8000108 <__udivsi3>
 800145e:	0003      	movs	r3, r0
 8001460:	0019      	movs	r1, r3
 8001462:	0020      	movs	r0, r4
 8001464:	f7fe fe50 	bl	8000108 <__udivsi3>
 8001468:	0003      	movs	r3, r0
 800146a:	0018      	movs	r0, r3
 800146c:	f000 f90b 	bl	8001686 <HAL_SYSTICK_Config>
 8001470:	1e03      	subs	r3, r0, #0
 8001472:	d001      	beq.n	8001478 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e00f      	b.n	8001498 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d80b      	bhi.n	8001496 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	2301      	movs	r3, #1
 8001482:	425b      	negs	r3, r3
 8001484:	2200      	movs	r2, #0
 8001486:	0018      	movs	r0, r3
 8001488:	f000 f8d8 	bl	800163c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_InitTick+0x64>)
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b003      	add	sp, #12
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_IncTick+0x1c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	001a      	movs	r2, r3
 80014b6:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_IncTick+0x20>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	18d2      	adds	r2, r2, r3
 80014bc:	4b03      	ldr	r3, [pc, #12]	@ (80014cc <HAL_IncTick+0x20>)
 80014be:	601a      	str	r2, [r3, #0]
}
 80014c0:	46c0      	nop			@ (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000148 	.word	0x20000148

080014d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b02      	ldr	r3, [pc, #8]	@ (80014e0 <HAL_GetTick+0x10>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	0018      	movs	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			@ (mov r8, r8)
 80014e0:	20000148 	.word	0x20000148

080014e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	0002      	movs	r2, r0
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	1dfb      	adds	r3, r7, #7
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80014f6:	d809      	bhi.n	800150c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f8:	1dfb      	adds	r3, r7, #7
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	001a      	movs	r2, r3
 80014fe:	231f      	movs	r3, #31
 8001500:	401a      	ands	r2, r3
 8001502:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <__NVIC_EnableIRQ+0x30>)
 8001504:	2101      	movs	r1, #1
 8001506:	4091      	lsls	r1, r2
 8001508:	000a      	movs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
  }
}
 800150c:	46c0      	nop			@ (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b002      	add	sp, #8
 8001512:	bd80      	pop	{r7, pc}
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	0002      	movs	r2, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b7f      	cmp	r3, #127	@ 0x7f
 800152c:	d828      	bhi.n	8001580 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800152e:	4a2f      	ldr	r2, [pc, #188]	@ (80015ec <__NVIC_SetPriority+0xd4>)
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b25b      	sxtb	r3, r3
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	33c0      	adds	r3, #192	@ 0xc0
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	589b      	ldr	r3, [r3, r2]
 800153e:	1dfa      	adds	r2, r7, #7
 8001540:	7812      	ldrb	r2, [r2, #0]
 8001542:	0011      	movs	r1, r2
 8001544:	2203      	movs	r2, #3
 8001546:	400a      	ands	r2, r1
 8001548:	00d2      	lsls	r2, r2, #3
 800154a:	21ff      	movs	r1, #255	@ 0xff
 800154c:	4091      	lsls	r1, r2
 800154e:	000a      	movs	r2, r1
 8001550:	43d2      	mvns	r2, r2
 8001552:	401a      	ands	r2, r3
 8001554:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	019b      	lsls	r3, r3, #6
 800155a:	22ff      	movs	r2, #255	@ 0xff
 800155c:	401a      	ands	r2, r3
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	0018      	movs	r0, r3
 8001564:	2303      	movs	r3, #3
 8001566:	4003      	ands	r3, r0
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800156c:	481f      	ldr	r0, [pc, #124]	@ (80015ec <__NVIC_SetPriority+0xd4>)
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b25b      	sxtb	r3, r3
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	430a      	orrs	r2, r1
 8001578:	33c0      	adds	r3, #192	@ 0xc0
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800157e:	e031      	b.n	80015e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001580:	4a1b      	ldr	r2, [pc, #108]	@ (80015f0 <__NVIC_SetPriority+0xd8>)
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	0019      	movs	r1, r3
 8001588:	230f      	movs	r3, #15
 800158a:	400b      	ands	r3, r1
 800158c:	3b08      	subs	r3, #8
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3306      	adds	r3, #6
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	18d3      	adds	r3, r2, r3
 8001596:	3304      	adds	r3, #4
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	1dfa      	adds	r2, r7, #7
 800159c:	7812      	ldrb	r2, [r2, #0]
 800159e:	0011      	movs	r1, r2
 80015a0:	2203      	movs	r2, #3
 80015a2:	400a      	ands	r2, r1
 80015a4:	00d2      	lsls	r2, r2, #3
 80015a6:	21ff      	movs	r1, #255	@ 0xff
 80015a8:	4091      	lsls	r1, r2
 80015aa:	000a      	movs	r2, r1
 80015ac:	43d2      	mvns	r2, r2
 80015ae:	401a      	ands	r2, r3
 80015b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	019b      	lsls	r3, r3, #6
 80015b6:	22ff      	movs	r2, #255	@ 0xff
 80015b8:	401a      	ands	r2, r3
 80015ba:	1dfb      	adds	r3, r7, #7
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	0018      	movs	r0, r3
 80015c0:	2303      	movs	r3, #3
 80015c2:	4003      	ands	r3, r0
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c8:	4809      	ldr	r0, [pc, #36]	@ (80015f0 <__NVIC_SetPriority+0xd8>)
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	001c      	movs	r4, r3
 80015d0:	230f      	movs	r3, #15
 80015d2:	4023      	ands	r3, r4
 80015d4:	3b08      	subs	r3, #8
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	430a      	orrs	r2, r1
 80015da:	3306      	adds	r3, #6
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	18c3      	adds	r3, r0, r3
 80015e0:	3304      	adds	r3, #4
 80015e2:	601a      	str	r2, [r3, #0]
}
 80015e4:	46c0      	nop			@ (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b003      	add	sp, #12
 80015ea:	bd90      	pop	{r4, r7, pc}
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	1e5a      	subs	r2, r3, #1
 8001600:	2380      	movs	r3, #128	@ 0x80
 8001602:	045b      	lsls	r3, r3, #17
 8001604:	429a      	cmp	r2, r3
 8001606:	d301      	bcc.n	800160c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001608:	2301      	movs	r3, #1
 800160a:	e010      	b.n	800162e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160c:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <SysTick_Config+0x44>)
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	3a01      	subs	r2, #1
 8001612:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001614:	2301      	movs	r3, #1
 8001616:	425b      	negs	r3, r3
 8001618:	2103      	movs	r1, #3
 800161a:	0018      	movs	r0, r3
 800161c:	f7ff ff7c 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <SysTick_Config+0x44>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <SysTick_Config+0x44>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b002      	add	sp, #8
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	210f      	movs	r1, #15
 8001648:	187b      	adds	r3, r7, r1
 800164a:	1c02      	adds	r2, r0, #0
 800164c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	187b      	adds	r3, r7, r1
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b25b      	sxtb	r3, r3
 8001656:	0011      	movs	r1, r2
 8001658:	0018      	movs	r0, r3
 800165a:	f7ff ff5d 	bl	8001518 <__NVIC_SetPriority>
}
 800165e:	46c0      	nop			@ (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b004      	add	sp, #16
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	0002      	movs	r2, r0
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b25b      	sxtb	r3, r3
 8001678:	0018      	movs	r0, r3
 800167a:	f7ff ff33 	bl	80014e4 <__NVIC_EnableIRQ>
}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b002      	add	sp, #8
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff ffaf 	bl	80015f4 <SysTick_Config>
 8001696:	0003      	movs	r3, r0
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ae:	e155      	b.n	800195c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4091      	lsls	r1, r2
 80016ba:	000a      	movs	r2, r1
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d100      	bne.n	80016c8 <HAL_GPIO_Init+0x28>
 80016c6:	e146      	b.n	8001956 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2203      	movs	r2, #3
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d005      	beq.n	80016e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2203      	movs	r2, #3
 80016da:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d130      	bne.n	8001742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	409a      	lsls	r2, r3
 80016ee:	0013      	movs	r3, r2
 80016f0:	43da      	mvns	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	409a      	lsls	r2, r3
 8001702:	0013      	movs	r3, r2
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001716:	2201      	movs	r2, #1
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	43da      	mvns	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	2201      	movs	r2, #1
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2203      	movs	r2, #3
 8001748:	4013      	ands	r3, r2
 800174a:	2b03      	cmp	r3, #3
 800174c:	d017      	beq.n	800177e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	409a      	lsls	r2, r3
 800175c:	0013      	movs	r3, r2
 800175e:	43da      	mvns	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2203      	movs	r2, #3
 8001784:	4013      	ands	r3, r2
 8001786:	2b02      	cmp	r3, #2
 8001788:	d123      	bne.n	80017d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	58d3      	ldr	r3, [r2, r3]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2207      	movs	r2, #7
 800179c:	4013      	ands	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2107      	movs	r1, #7
 80017b6:	400b      	ands	r3, r1
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	0092      	lsls	r2, r2, #2
 80017ce:	6939      	ldr	r1, [r7, #16]
 80017d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	409a      	lsls	r2, r3
 80017e0:	0013      	movs	r3, r2
 80017e2:	43da      	mvns	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2203      	movs	r2, #3
 80017f0:	401a      	ands	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	23c0      	movs	r3, #192	@ 0xc0
 800180c:	029b      	lsls	r3, r3, #10
 800180e:	4013      	ands	r3, r2
 8001810:	d100      	bne.n	8001814 <HAL_GPIO_Init+0x174>
 8001812:	e0a0      	b.n	8001956 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001814:	4b57      	ldr	r3, [pc, #348]	@ (8001974 <HAL_GPIO_Init+0x2d4>)
 8001816:	699a      	ldr	r2, [r3, #24]
 8001818:	4b56      	ldr	r3, [pc, #344]	@ (8001974 <HAL_GPIO_Init+0x2d4>)
 800181a:	2101      	movs	r1, #1
 800181c:	430a      	orrs	r2, r1
 800181e:	619a      	str	r2, [r3, #24]
 8001820:	4b54      	ldr	r3, [pc, #336]	@ (8001974 <HAL_GPIO_Init+0x2d4>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2201      	movs	r2, #1
 8001826:	4013      	ands	r3, r2
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800182c:	4a52      	ldr	r2, [pc, #328]	@ (8001978 <HAL_GPIO_Init+0x2d8>)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	589b      	ldr	r3, [r3, r2]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2203      	movs	r2, #3
 800183e:	4013      	ands	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	43da      	mvns	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	2390      	movs	r3, #144	@ 0x90
 8001854:	05db      	lsls	r3, r3, #23
 8001856:	429a      	cmp	r2, r3
 8001858:	d019      	beq.n	800188e <HAL_GPIO_Init+0x1ee>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a47      	ldr	r2, [pc, #284]	@ (800197c <HAL_GPIO_Init+0x2dc>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0x1ea>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a46      	ldr	r2, [pc, #280]	@ (8001980 <HAL_GPIO_Init+0x2e0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00d      	beq.n	8001886 <HAL_GPIO_Init+0x1e6>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a45      	ldr	r2, [pc, #276]	@ (8001984 <HAL_GPIO_Init+0x2e4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d007      	beq.n	8001882 <HAL_GPIO_Init+0x1e2>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a44      	ldr	r2, [pc, #272]	@ (8001988 <HAL_GPIO_Init+0x2e8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_GPIO_Init+0x1de>
 800187a:	2304      	movs	r3, #4
 800187c:	e008      	b.n	8001890 <HAL_GPIO_Init+0x1f0>
 800187e:	2305      	movs	r3, #5
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x1f0>
 8001882:	2303      	movs	r3, #3
 8001884:	e004      	b.n	8001890 <HAL_GPIO_Init+0x1f0>
 8001886:	2302      	movs	r3, #2
 8001888:	e002      	b.n	8001890 <HAL_GPIO_Init+0x1f0>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x1f0>
 800188e:	2300      	movs	r3, #0
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	2103      	movs	r1, #3
 8001894:	400a      	ands	r2, r1
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	4093      	lsls	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018a0:	4935      	ldr	r1, [pc, #212]	@ (8001978 <HAL_GPIO_Init+0x2d8>)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ae:	4b37      	ldr	r3, [pc, #220]	@ (800198c <HAL_GPIO_Init+0x2ec>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43da      	mvns	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	2380      	movs	r3, #128	@ 0x80
 80018c4:	035b      	lsls	r3, r3, #13
 80018c6:	4013      	ands	r3, r2
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018d2:	4b2e      	ldr	r3, [pc, #184]	@ (800198c <HAL_GPIO_Init+0x2ec>)
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018d8:	4b2c      	ldr	r3, [pc, #176]	@ (800198c <HAL_GPIO_Init+0x2ec>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43da      	mvns	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	2380      	movs	r3, #128	@ 0x80
 80018ee:	039b      	lsls	r3, r3, #14
 80018f0:	4013      	ands	r3, r2
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018fc:	4b23      	ldr	r3, [pc, #140]	@ (800198c <HAL_GPIO_Init+0x2ec>)
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001902:	4b22      	ldr	r3, [pc, #136]	@ (800198c <HAL_GPIO_Init+0x2ec>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	2380      	movs	r3, #128	@ 0x80
 8001918:	029b      	lsls	r3, r3, #10
 800191a:	4013      	ands	r3, r2
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001926:	4b19      	ldr	r3, [pc, #100]	@ (800198c <HAL_GPIO_Init+0x2ec>)
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800192c:	4b17      	ldr	r3, [pc, #92]	@ (800198c <HAL_GPIO_Init+0x2ec>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	43da      	mvns	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	2380      	movs	r3, #128	@ 0x80
 8001942:	025b      	lsls	r3, r3, #9
 8001944:	4013      	ands	r3, r2
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001950:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <HAL_GPIO_Init+0x2ec>)
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	40da      	lsrs	r2, r3
 8001964:	1e13      	subs	r3, r2, #0
 8001966:	d000      	beq.n	800196a <HAL_GPIO_Init+0x2ca>
 8001968:	e6a2      	b.n	80016b0 <HAL_GPIO_Init+0x10>
  } 
}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	46c0      	nop			@ (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b006      	add	sp, #24
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000
 800197c:	48000400 	.word	0x48000400
 8001980:	48000800 	.word	0x48000800
 8001984:	48000c00 	.word	0x48000c00
 8001988:	48001000 	.word	0x48001000
 800198c:	40010400 	.word	0x40010400

08001990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	0008      	movs	r0, r1
 800199a:	0011      	movs	r1, r2
 800199c:	1cbb      	adds	r3, r7, #2
 800199e:	1c02      	adds	r2, r0, #0
 80019a0:	801a      	strh	r2, [r3, #0]
 80019a2:	1c7b      	adds	r3, r7, #1
 80019a4:	1c0a      	adds	r2, r1, #0
 80019a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a8:	1c7b      	adds	r3, r7, #1
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019b0:	1cbb      	adds	r3, r7, #2
 80019b2:	881a      	ldrh	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b8:	e003      	b.n	80019c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ba:	1cbb      	adds	r3, r7, #2
 80019bc:	881a      	ldrh	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019c2:	46c0      	nop			@ (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b002      	add	sp, #8
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e082      	b.n	8001ae4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2241      	movs	r2, #65	@ 0x41
 80019e2:	5c9b      	ldrb	r3, [r3, r2]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d107      	bne.n	80019fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2240      	movs	r2, #64	@ 0x40
 80019ee:	2100      	movs	r1, #0
 80019f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff fbf7 	bl	80011e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2241      	movs	r2, #65	@ 0x41
 80019fe:	2124      	movs	r1, #36	@ 0x24
 8001a00:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	438a      	bics	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4934      	ldr	r1, [pc, #208]	@ (8001aec <HAL_I2C_Init+0x120>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4931      	ldr	r1, [pc, #196]	@ (8001af0 <HAL_I2C_Init+0x124>)
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d108      	bne.n	8001a4a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2180      	movs	r1, #128	@ 0x80
 8001a42:	0209      	lsls	r1, r1, #8
 8001a44:	430a      	orrs	r2, r1
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	e007      	b.n	8001a5a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2184      	movs	r1, #132	@ 0x84
 8001a54:	0209      	lsls	r1, r1, #8
 8001a56:	430a      	orrs	r2, r1
 8001a58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d104      	bne.n	8001a6c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2280      	movs	r2, #128	@ 0x80
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	491f      	ldr	r1, [pc, #124]	@ (8001af4 <HAL_I2C_Init+0x128>)
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	491a      	ldr	r1, [pc, #104]	@ (8001af0 <HAL_I2C_Init+0x124>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69d9      	ldr	r1, [r3, #28]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1a      	ldr	r2, [r3, #32]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2241      	movs	r2, #65	@ 0x41
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2242      	movs	r2, #66	@ 0x42
 8001ade:	2100      	movs	r1, #0
 8001ae0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	f0ffffff 	.word	0xf0ffffff
 8001af0:	ffff7fff 	.word	0xffff7fff
 8001af4:	02008000 	.word	0x02008000

08001af8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2241      	movs	r2, #65	@ 0x41
 8001b06:	5c9b      	ldrb	r3, [r3, r2]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d138      	bne.n	8001b80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2240      	movs	r2, #64	@ 0x40
 8001b12:	5c9b      	ldrb	r3, [r3, r2]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e032      	b.n	8001b82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2240      	movs	r2, #64	@ 0x40
 8001b20:	2101      	movs	r1, #1
 8001b22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2241      	movs	r2, #65	@ 0x41
 8001b28:	2124      	movs	r1, #36	@ 0x24
 8001b2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2101      	movs	r1, #1
 8001b38:	438a      	bics	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4911      	ldr	r1, [pc, #68]	@ (8001b8c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6819      	ldr	r1, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2101      	movs	r1, #1
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2241      	movs	r2, #65	@ 0x41
 8001b70:	2120      	movs	r1, #32
 8001b72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2240      	movs	r2, #64	@ 0x40
 8001b78:	2100      	movs	r1, #0
 8001b7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	e000      	b.n	8001b82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b80:	2302      	movs	r3, #2
  }
}
 8001b82:	0018      	movs	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b002      	add	sp, #8
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	ffffefff 	.word	0xffffefff

08001b90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2241      	movs	r2, #65	@ 0x41
 8001b9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	d139      	bne.n	8001c1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2240      	movs	r2, #64	@ 0x40
 8001baa:	5c9b      	ldrb	r3, [r3, r2]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e033      	b.n	8001c1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2240      	movs	r2, #64	@ 0x40
 8001bb8:	2101      	movs	r1, #1
 8001bba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2241      	movs	r2, #65	@ 0x41
 8001bc0:	2124      	movs	r1, #36	@ 0x24
 8001bc2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2101      	movs	r1, #1
 8001bd0:	438a      	bics	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4a11      	ldr	r2, [pc, #68]	@ (8001c24 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	430a      	orrs	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2241      	movs	r2, #65	@ 0x41
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2240      	movs	r2, #64	@ 0x40
 8001c12:	2100      	movs	r1, #0
 8001c14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c1a:	2302      	movs	r3, #2
  }
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b004      	add	sp, #16
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	fffff0ff 	.word	0xfffff0ff

08001c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f000 fb76 	bl	8002328 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2201      	movs	r2, #1
 8001c42:	4013      	ands	r3, r2
 8001c44:	d100      	bne.n	8001c48 <HAL_RCC_OscConfig+0x20>
 8001c46:	e08e      	b.n	8001d66 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c48:	4bc5      	ldr	r3, [pc, #788]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d00e      	beq.n	8001c72 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c54:	4bc2      	ldr	r3, [pc, #776]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	220c      	movs	r2, #12
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d117      	bne.n	8001c90 <HAL_RCC_OscConfig+0x68>
 8001c60:	4bbf      	ldr	r3, [pc, #764]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	23c0      	movs	r3, #192	@ 0xc0
 8001c66:	025b      	lsls	r3, r3, #9
 8001c68:	401a      	ands	r2, r3
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	025b      	lsls	r3, r3, #9
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d10e      	bne.n	8001c90 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c72:	4bbb      	ldr	r3, [pc, #748]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	2380      	movs	r3, #128	@ 0x80
 8001c78:	029b      	lsls	r3, r3, #10
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d100      	bne.n	8001c80 <HAL_RCC_OscConfig+0x58>
 8001c7e:	e071      	b.n	8001d64 <HAL_RCC_OscConfig+0x13c>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d000      	beq.n	8001c8a <HAL_RCC_OscConfig+0x62>
 8001c88:	e06c      	b.n	8001d64 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f000 fb4c 	bl	8002328 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x80>
 8001c98:	4bb1      	ldr	r3, [pc, #708]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4bb0      	ldr	r3, [pc, #704]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001c9e:	2180      	movs	r1, #128	@ 0x80
 8001ca0:	0249      	lsls	r1, r1, #9
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e02f      	b.n	8001d08 <HAL_RCC_OscConfig+0xe0>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10c      	bne.n	8001cca <HAL_RCC_OscConfig+0xa2>
 8001cb0:	4bab      	ldr	r3, [pc, #684]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4baa      	ldr	r3, [pc, #680]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	49ab      	ldr	r1, [pc, #684]	@ (8001f64 <HAL_RCC_OscConfig+0x33c>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	4ba8      	ldr	r3, [pc, #672]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4ba7      	ldr	r3, [pc, #668]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001cc2:	49a9      	ldr	r1, [pc, #676]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e01e      	b.n	8001d08 <HAL_RCC_OscConfig+0xe0>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b05      	cmp	r3, #5
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xc8>
 8001cd2:	4ba3      	ldr	r3, [pc, #652]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4ba2      	ldr	r3, [pc, #648]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001cd8:	2180      	movs	r1, #128	@ 0x80
 8001cda:	02c9      	lsls	r1, r1, #11
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	4b9f      	ldr	r3, [pc, #636]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b9e      	ldr	r3, [pc, #632]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	2180      	movs	r1, #128	@ 0x80
 8001ce8:	0249      	lsls	r1, r1, #9
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_OscConfig+0xe0>
 8001cf0:	4b9b      	ldr	r3, [pc, #620]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b9a      	ldr	r3, [pc, #616]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001cf6:	499b      	ldr	r1, [pc, #620]	@ (8001f64 <HAL_RCC_OscConfig+0x33c>)
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	4b98      	ldr	r3, [pc, #608]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b97      	ldr	r3, [pc, #604]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001d02:	4999      	ldr	r1, [pc, #612]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d014      	beq.n	8001d3a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fbde 	bl	80014d0 <HAL_GetTick>
 8001d14:	0003      	movs	r3, r0
 8001d16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1a:	f7ff fbd9 	bl	80014d0 <HAL_GetTick>
 8001d1e:	0002      	movs	r2, r0
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b64      	cmp	r3, #100	@ 0x64
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e2fd      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2c:	4b8c      	ldr	r3, [pc, #560]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2380      	movs	r3, #128	@ 0x80
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	4013      	ands	r3, r2
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0xf2>
 8001d38:	e015      	b.n	8001d66 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fbc9 	bl	80014d0 <HAL_GetTick>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fbc4 	bl	80014d0 <HAL_GetTick>
 8001d48:	0002      	movs	r2, r0
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	@ 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e2e8      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	4b82      	ldr	r3, [pc, #520]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	2380      	movs	r3, #128	@ 0x80
 8001d5c:	029b      	lsls	r3, r3, #10
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x11c>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d100      	bne.n	8001d72 <HAL_RCC_OscConfig+0x14a>
 8001d70:	e06c      	b.n	8001e4c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d72:	4b7b      	ldr	r3, [pc, #492]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	220c      	movs	r2, #12
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d00e      	beq.n	8001d9a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d7c:	4b78      	ldr	r3, [pc, #480]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	220c      	movs	r2, #12
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d11f      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1a0>
 8001d88:	4b75      	ldr	r3, [pc, #468]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	23c0      	movs	r3, #192	@ 0xc0
 8001d8e:	025b      	lsls	r3, r3, #9
 8001d90:	401a      	ands	r2, r3
 8001d92:	2380      	movs	r3, #128	@ 0x80
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d116      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	4b71      	ldr	r3, [pc, #452]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4013      	ands	r3, r2
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_OscConfig+0x188>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e2bb      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b6b      	ldr	r3, [pc, #428]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	22f8      	movs	r2, #248	@ 0xf8
 8001db6:	4393      	bics	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	00da      	lsls	r2, r3, #3
 8001dc0:	4b67      	ldr	r3, [pc, #412]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	e041      	b.n	8001e4c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d024      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd0:	4b63      	ldr	r3, [pc, #396]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b62      	ldr	r3, [pc, #392]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fb78 	bl	80014d0 <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de6:	f7ff fb73 	bl	80014d0 <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e297      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	4b59      	ldr	r3, [pc, #356]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d0f1      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e02:	4b57      	ldr	r3, [pc, #348]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	22f8      	movs	r2, #248	@ 0xf8
 8001e08:	4393      	bics	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	00da      	lsls	r2, r3, #3
 8001e12:	4b53      	ldr	r3, [pc, #332]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e018      	b.n	8001e4c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1a:	4b51      	ldr	r3, [pc, #324]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4b50      	ldr	r3, [pc, #320]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001e20:	2101      	movs	r1, #1
 8001e22:	438a      	bics	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff fb53 	bl	80014d0 <HAL_GetTick>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e30:	f7ff fb4e 	bl	80014d0 <HAL_GetTick>
 8001e34:	0002      	movs	r2, r0
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e272      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2202      	movs	r2, #2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d1f1      	bne.n	8001e30 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2208      	movs	r2, #8
 8001e52:	4013      	ands	r3, r2
 8001e54:	d036      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d019      	beq.n	8001e92 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5e:	4b40      	ldr	r3, [pc, #256]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001e60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e62:	4b3f      	ldr	r3, [pc, #252]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001e64:	2101      	movs	r1, #1
 8001e66:	430a      	orrs	r2, r1
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fb31 	bl	80014d0 <HAL_GetTick>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff fb2c 	bl	80014d0 <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e250      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	4b36      	ldr	r3, [pc, #216]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d0f1      	beq.n	8001e74 <HAL_RCC_OscConfig+0x24c>
 8001e90:	e018      	b.n	8001ec4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e92:	4b33      	ldr	r3, [pc, #204]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e96:	4b32      	ldr	r3, [pc, #200]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	438a      	bics	r2, r1
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff fb17 	bl	80014d0 <HAL_GetTick>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fb12 	bl	80014d0 <HAL_GetTick>
 8001eac:	0002      	movs	r2, r0
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e236      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eba:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d1f1      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d100      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2a8>
 8001ece:	e0b5      	b.n	800203c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed0:	201f      	movs	r0, #31
 8001ed2:	183b      	adds	r3, r7, r0
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed8:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001eda:	69da      	ldr	r2, [r3, #28]
 8001edc:	2380      	movs	r3, #128	@ 0x80
 8001ede:	055b      	lsls	r3, r3, #21
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d110      	bne.n	8001f06 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001ee6:	69da      	ldr	r2, [r3, #28]
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	0549      	lsls	r1, r1, #21
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	61da      	str	r2, [r3, #28]
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001ef4:	69da      	ldr	r2, [r3, #28]
 8001ef6:	2380      	movs	r3, #128	@ 0x80
 8001ef8:	055b      	lsls	r3, r3, #21
 8001efa:	4013      	ands	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f00:	183b      	adds	r3, r7, r0
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f06:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <HAL_RCC_OscConfig+0x344>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d11a      	bne.n	8001f48 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f12:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <HAL_RCC_OscConfig+0x344>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <HAL_RCC_OscConfig+0x344>)
 8001f18:	2180      	movs	r1, #128	@ 0x80
 8001f1a:	0049      	lsls	r1, r1, #1
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f20:	f7ff fad6 	bl	80014d0 <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2a:	f7ff fad1 	bl	80014d0 <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b64      	cmp	r3, #100	@ 0x64
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e1f5      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_RCC_OscConfig+0x344>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4013      	ands	r3, r2
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d10f      	bne.n	8001f70 <HAL_RCC_OscConfig+0x348>
 8001f50:	4b03      	ldr	r3, [pc, #12]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	4b02      	ldr	r3, [pc, #8]	@ (8001f60 <HAL_RCC_OscConfig+0x338>)
 8001f56:	2101      	movs	r1, #1
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	621a      	str	r2, [r3, #32]
 8001f5c:	e036      	b.n	8001fcc <HAL_RCC_OscConfig+0x3a4>
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	40021000 	.word	0x40021000
 8001f64:	fffeffff 	.word	0xfffeffff
 8001f68:	fffbffff 	.word	0xfffbffff
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10c      	bne.n	8001f92 <HAL_RCC_OscConfig+0x36a>
 8001f78:	4bca      	ldr	r3, [pc, #808]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	4bc9      	ldr	r3, [pc, #804]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8001f7e:	2101      	movs	r1, #1
 8001f80:	438a      	bics	r2, r1
 8001f82:	621a      	str	r2, [r3, #32]
 8001f84:	4bc7      	ldr	r3, [pc, #796]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8001f86:	6a1a      	ldr	r2, [r3, #32]
 8001f88:	4bc6      	ldr	r3, [pc, #792]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	438a      	bics	r2, r1
 8001f8e:	621a      	str	r2, [r3, #32]
 8001f90:	e01c      	b.n	8001fcc <HAL_RCC_OscConfig+0x3a4>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b05      	cmp	r3, #5
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x38c>
 8001f9a:	4bc2      	ldr	r3, [pc, #776]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8001f9c:	6a1a      	ldr	r2, [r3, #32]
 8001f9e:	4bc1      	ldr	r3, [pc, #772]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8001fa0:	2104      	movs	r1, #4
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	621a      	str	r2, [r3, #32]
 8001fa6:	4bbf      	ldr	r3, [pc, #764]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8001fa8:	6a1a      	ldr	r2, [r3, #32]
 8001faa:	4bbe      	ldr	r3, [pc, #760]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8001fac:	2101      	movs	r1, #1
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	621a      	str	r2, [r3, #32]
 8001fb2:	e00b      	b.n	8001fcc <HAL_RCC_OscConfig+0x3a4>
 8001fb4:	4bbb      	ldr	r3, [pc, #748]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	4bba      	ldr	r3, [pc, #744]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8001fba:	2101      	movs	r1, #1
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	621a      	str	r2, [r3, #32]
 8001fc0:	4bb8      	ldr	r3, [pc, #736]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	4bb7      	ldr	r3, [pc, #732]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	438a      	bics	r2, r1
 8001fca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d014      	beq.n	8001ffe <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd4:	f7ff fa7c 	bl	80014d0 <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fdc:	e009      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7ff fa77 	bl	80014d0 <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	4aaf      	ldr	r2, [pc, #700]	@ (80022a8 <HAL_RCC_OscConfig+0x680>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e19a      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff2:	4bac      	ldr	r3, [pc, #688]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x3b6>
 8001ffc:	e013      	b.n	8002026 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff fa67 	bl	80014d0 <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002006:	e009      	b.n	800201c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002008:	f7ff fa62 	bl	80014d0 <HAL_GetTick>
 800200c:	0002      	movs	r2, r0
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	4aa5      	ldr	r2, [pc, #660]	@ (80022a8 <HAL_RCC_OscConfig+0x680>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e185      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201c:	4ba1      	ldr	r3, [pc, #644]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	2202      	movs	r2, #2
 8002022:	4013      	ands	r3, r2
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002026:	231f      	movs	r3, #31
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d105      	bne.n	800203c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002030:	4b9c      	ldr	r3, [pc, #624]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	4b9b      	ldr	r3, [pc, #620]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002036:	499d      	ldr	r1, [pc, #628]	@ (80022ac <HAL_RCC_OscConfig+0x684>)
 8002038:	400a      	ands	r2, r1
 800203a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2210      	movs	r2, #16
 8002042:	4013      	ands	r3, r2
 8002044:	d063      	beq.n	800210e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d12a      	bne.n	80020a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800204e:	4b95      	ldr	r3, [pc, #596]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002052:	4b94      	ldr	r3, [pc, #592]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002054:	2104      	movs	r1, #4
 8002056:	430a      	orrs	r2, r1
 8002058:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800205a:	4b92      	ldr	r3, [pc, #584]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 800205c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800205e:	4b91      	ldr	r3, [pc, #580]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002060:	2101      	movs	r1, #1
 8002062:	430a      	orrs	r2, r1
 8002064:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7ff fa33 	bl	80014d0 <HAL_GetTick>
 800206a:	0003      	movs	r3, r0
 800206c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002070:	f7ff fa2e 	bl	80014d0 <HAL_GetTick>
 8002074:	0002      	movs	r2, r0
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e152      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002082:	4b88      	ldr	r3, [pc, #544]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002086:	2202      	movs	r2, #2
 8002088:	4013      	ands	r3, r2
 800208a:	d0f1      	beq.n	8002070 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800208c:	4b85      	ldr	r3, [pc, #532]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 800208e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002090:	22f8      	movs	r2, #248	@ 0xf8
 8002092:	4393      	bics	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	00da      	lsls	r2, r3, #3
 800209c:	4b81      	ldr	r3, [pc, #516]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80020a2:	e034      	b.n	800210e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	3305      	adds	r3, #5
 80020aa:	d111      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020ac:	4b7d      	ldr	r3, [pc, #500]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 80020ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020b0:	4b7c      	ldr	r3, [pc, #496]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 80020b2:	2104      	movs	r1, #4
 80020b4:	438a      	bics	r2, r1
 80020b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020b8:	4b7a      	ldr	r3, [pc, #488]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 80020ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020bc:	22f8      	movs	r2, #248	@ 0xf8
 80020be:	4393      	bics	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	00da      	lsls	r2, r3, #3
 80020c8:	4b76      	ldr	r3, [pc, #472]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 80020ca:	430a      	orrs	r2, r1
 80020cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80020ce:	e01e      	b.n	800210e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020d0:	4b74      	ldr	r3, [pc, #464]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020d4:	4b73      	ldr	r3, [pc, #460]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 80020d6:	2104      	movs	r1, #4
 80020d8:	430a      	orrs	r2, r1
 80020da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020dc:	4b71      	ldr	r3, [pc, #452]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 80020de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020e0:	4b70      	ldr	r3, [pc, #448]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 80020e2:	2101      	movs	r1, #1
 80020e4:	438a      	bics	r2, r1
 80020e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e8:	f7ff f9f2 	bl	80014d0 <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020f2:	f7ff f9ed 	bl	80014d0 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e111      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002104:	4b67      	ldr	r3, [pc, #412]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002108:	2202      	movs	r2, #2
 800210a:	4013      	ands	r3, r2
 800210c:	d1f1      	bne.n	80020f2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2220      	movs	r2, #32
 8002114:	4013      	ands	r3, r2
 8002116:	d05c      	beq.n	80021d2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002118:	4b62      	ldr	r3, [pc, #392]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	220c      	movs	r2, #12
 800211e:	4013      	ands	r3, r2
 8002120:	2b0c      	cmp	r3, #12
 8002122:	d00e      	beq.n	8002142 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002124:	4b5f      	ldr	r3, [pc, #380]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	220c      	movs	r2, #12
 800212a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800212c:	2b08      	cmp	r3, #8
 800212e:	d114      	bne.n	800215a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002130:	4b5c      	ldr	r3, [pc, #368]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	23c0      	movs	r3, #192	@ 0xc0
 8002136:	025b      	lsls	r3, r3, #9
 8002138:	401a      	ands	r2, r3
 800213a:	23c0      	movs	r3, #192	@ 0xc0
 800213c:	025b      	lsls	r3, r3, #9
 800213e:	429a      	cmp	r2, r3
 8002140:	d10b      	bne.n	800215a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002142:	4b58      	ldr	r3, [pc, #352]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002144:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	029b      	lsls	r3, r3, #10
 800214a:	4013      	ands	r3, r2
 800214c:	d040      	beq.n	80021d0 <HAL_RCC_OscConfig+0x5a8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d03c      	beq.n	80021d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0e6      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01b      	beq.n	800219a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002162:	4b50      	ldr	r3, [pc, #320]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002164:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002166:	4b4f      	ldr	r3, [pc, #316]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002168:	2180      	movs	r1, #128	@ 0x80
 800216a:	0249      	lsls	r1, r1, #9
 800216c:	430a      	orrs	r2, r1
 800216e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff f9ae 	bl	80014d0 <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800217a:	f7ff f9a9 	bl	80014d0 <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0cd      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800218c:	4b45      	ldr	r3, [pc, #276]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 800218e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002190:	2380      	movs	r3, #128	@ 0x80
 8002192:	029b      	lsls	r3, r3, #10
 8002194:	4013      	ands	r3, r2
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x552>
 8002198:	e01b      	b.n	80021d2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800219a:	4b42      	ldr	r3, [pc, #264]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 800219c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800219e:	4b41      	ldr	r3, [pc, #260]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 80021a0:	4943      	ldr	r1, [pc, #268]	@ (80022b0 <HAL_RCC_OscConfig+0x688>)
 80021a2:	400a      	ands	r2, r1
 80021a4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7ff f993 	bl	80014d0 <HAL_GetTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b0:	f7ff f98e 	bl	80014d0 <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0b2      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021c2:	4b38      	ldr	r3, [pc, #224]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 80021c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021c6:	2380      	movs	r3, #128	@ 0x80
 80021c8:	029b      	lsls	r3, r3, #10
 80021ca:	4013      	ands	r3, r2
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x588>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021d0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d100      	bne.n	80021dc <HAL_RCC_OscConfig+0x5b4>
 80021da:	e0a4      	b.n	8002326 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021dc:	4b31      	ldr	r3, [pc, #196]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	220c      	movs	r2, #12
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d100      	bne.n	80021ea <HAL_RCC_OscConfig+0x5c2>
 80021e8:	e078      	b.n	80022dc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d14c      	bne.n	800228c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b2c      	ldr	r3, [pc, #176]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4b2b      	ldr	r3, [pc, #172]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 80021f8:	492e      	ldr	r1, [pc, #184]	@ (80022b4 <HAL_RCC_OscConfig+0x68c>)
 80021fa:	400a      	ands	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff f967 	bl	80014d0 <HAL_GetTick>
 8002202:	0003      	movs	r3, r0
 8002204:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7ff f962 	bl	80014d0 <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e086      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221a:	4b22      	ldr	r3, [pc, #136]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	@ 0x80
 8002220:	049b      	lsls	r3, r3, #18
 8002222:	4013      	ands	r3, r2
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002226:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	220f      	movs	r2, #15
 800222c:	4393      	bics	r3, r2
 800222e:	0019      	movs	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002234:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002236:	430a      	orrs	r2, r1
 8002238:	62da      	str	r2, [r3, #44]	@ 0x2c
 800223a:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a1e      	ldr	r2, [pc, #120]	@ (80022b8 <HAL_RCC_OscConfig+0x690>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224c:	431a      	orrs	r2, r3
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002250:	430a      	orrs	r2, r1
 8002252:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002254:	4b13      	ldr	r3, [pc, #76]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 800225a:	2180      	movs	r1, #128	@ 0x80
 800225c:	0449      	lsls	r1, r1, #17
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7ff f935 	bl	80014d0 <HAL_GetTick>
 8002266:	0003      	movs	r3, r0
 8002268:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226c:	f7ff f930 	bl	80014d0 <HAL_GetTick>
 8002270:	0002      	movs	r2, r0
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e054      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800227e:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	2380      	movs	r3, #128	@ 0x80
 8002284:	049b      	lsls	r3, r3, #18
 8002286:	4013      	ands	r3, r2
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x644>
 800228a:	e04c      	b.n	8002326 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <HAL_RCC_OscConfig+0x67c>)
 8002292:	4908      	ldr	r1, [pc, #32]	@ (80022b4 <HAL_RCC_OscConfig+0x68c>)
 8002294:	400a      	ands	r2, r1
 8002296:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff f91a 	bl	80014d0 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a0:	e015      	b.n	80022ce <HAL_RCC_OscConfig+0x6a6>
 80022a2:	46c0      	nop			@ (mov r8, r8)
 80022a4:	40021000 	.word	0x40021000
 80022a8:	00001388 	.word	0x00001388
 80022ac:	efffffff 	.word	0xefffffff
 80022b0:	fffeffff 	.word	0xfffeffff
 80022b4:	feffffff 	.word	0xfeffffff
 80022b8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022bc:	f7ff f908 	bl	80014d0 <HAL_GetTick>
 80022c0:	0002      	movs	r2, r0
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e02c      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ce:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <HAL_RCC_OscConfig+0x708>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	2380      	movs	r3, #128	@ 0x80
 80022d4:	049b      	lsls	r3, r3, #18
 80022d6:	4013      	ands	r3, r2
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x694>
 80022da:	e024      	b.n	8002326 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e01f      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <HAL_RCC_OscConfig+0x708>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80022ee:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <HAL_RCC_OscConfig+0x708>)
 80022f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	23c0      	movs	r3, #192	@ 0xc0
 80022f8:	025b      	lsls	r3, r3, #9
 80022fa:	401a      	ands	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002300:	429a      	cmp	r2, r3
 8002302:	d10e      	bne.n	8002322 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	220f      	movs	r2, #15
 8002308:	401a      	ands	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d107      	bne.n	8002322 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	23f0      	movs	r3, #240	@ 0xf0
 8002316:	039b      	lsls	r3, r3, #14
 8002318:	401a      	ands	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d001      	beq.n	8002326 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b008      	add	sp, #32
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000

08002334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0bf      	b.n	80024c8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b61      	ldr	r3, [pc, #388]	@ (80024d0 <HAL_RCC_ClockConfig+0x19c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2201      	movs	r2, #1
 800234e:	4013      	ands	r3, r2
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d911      	bls.n	800237a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b5e      	ldr	r3, [pc, #376]	@ (80024d0 <HAL_RCC_ClockConfig+0x19c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2201      	movs	r2, #1
 800235c:	4393      	bics	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	4b5b      	ldr	r3, [pc, #364]	@ (80024d0 <HAL_RCC_ClockConfig+0x19c>)
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002368:	4b59      	ldr	r3, [pc, #356]	@ (80024d0 <HAL_RCC_ClockConfig+0x19c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2201      	movs	r2, #1
 800236e:	4013      	ands	r3, r2
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d001      	beq.n	800237a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0a6      	b.n	80024c8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2202      	movs	r2, #2
 8002380:	4013      	ands	r3, r2
 8002382:	d015      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2204      	movs	r2, #4
 800238a:	4013      	ands	r3, r2
 800238c:	d006      	beq.n	800239c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800238e:	4b51      	ldr	r3, [pc, #324]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	4b50      	ldr	r3, [pc, #320]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002394:	21e0      	movs	r1, #224	@ 0xe0
 8002396:	00c9      	lsls	r1, r1, #3
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4b4d      	ldr	r3, [pc, #308]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	22f0      	movs	r2, #240	@ 0xf0
 80023a2:	4393      	bics	r3, r2
 80023a4:	0019      	movs	r1, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	4b4a      	ldr	r3, [pc, #296]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 80023ac:	430a      	orrs	r2, r1
 80023ae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2201      	movs	r2, #1
 80023b6:	4013      	ands	r3, r2
 80023b8:	d04c      	beq.n	8002454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b44      	ldr	r3, [pc, #272]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	2380      	movs	r3, #128	@ 0x80
 80023c8:	029b      	lsls	r3, r3, #10
 80023ca:	4013      	ands	r3, r2
 80023cc:	d120      	bne.n	8002410 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e07a      	b.n	80024c8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023da:	4b3e      	ldr	r3, [pc, #248]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	049b      	lsls	r3, r3, #18
 80023e2:	4013      	ands	r3, r2
 80023e4:	d114      	bne.n	8002410 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e06e      	b.n	80024c8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023f2:	4b38      	ldr	r3, [pc, #224]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 80023f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023f6:	2380      	movs	r3, #128	@ 0x80
 80023f8:	029b      	lsls	r3, r3, #10
 80023fa:	4013      	ands	r3, r2
 80023fc:	d108      	bne.n	8002410 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e062      	b.n	80024c8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	4b34      	ldr	r3, [pc, #208]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2202      	movs	r2, #2
 8002408:	4013      	ands	r3, r2
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e05b      	b.n	80024c8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002410:	4b30      	ldr	r3, [pc, #192]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2203      	movs	r2, #3
 8002416:	4393      	bics	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4b2d      	ldr	r3, [pc, #180]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002424:	f7ff f854 	bl	80014d0 <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242c:	e009      	b.n	8002442 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242e:	f7ff f84f 	bl	80014d0 <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	4a27      	ldr	r2, [pc, #156]	@ (80024d8 <HAL_RCC_ClockConfig+0x1a4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e042      	b.n	80024c8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b24      	ldr	r3, [pc, #144]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	220c      	movs	r2, #12
 8002448:	401a      	ands	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d1ec      	bne.n	800242e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002454:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <HAL_RCC_ClockConfig+0x19c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2201      	movs	r2, #1
 800245a:	4013      	ands	r3, r2
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d211      	bcs.n	8002486 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <HAL_RCC_ClockConfig+0x19c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2201      	movs	r2, #1
 8002468:	4393      	bics	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	4b18      	ldr	r3, [pc, #96]	@ (80024d0 <HAL_RCC_ClockConfig+0x19c>)
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002474:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <HAL_RCC_ClockConfig+0x19c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2201      	movs	r2, #1
 800247a:	4013      	ands	r3, r2
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d001      	beq.n	8002486 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e020      	b.n	80024c8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2204      	movs	r2, #4
 800248c:	4013      	ands	r3, r2
 800248e:	d009      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002490:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4a11      	ldr	r2, [pc, #68]	@ (80024dc <HAL_RCC_ClockConfig+0x1a8>)
 8002496:	4013      	ands	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	4b0d      	ldr	r3, [pc, #52]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 80024a0:	430a      	orrs	r2, r1
 80024a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024a4:	f000 f820 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 80024a8:	0001      	movs	r1, r0
 80024aa:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <HAL_RCC_ClockConfig+0x1a0>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	091b      	lsrs	r3, r3, #4
 80024b0:	220f      	movs	r2, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <HAL_RCC_ClockConfig+0x1ac>)
 80024b6:	5cd3      	ldrb	r3, [r2, r3]
 80024b8:	000a      	movs	r2, r1
 80024ba:	40da      	lsrs	r2, r3
 80024bc:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <HAL_RCC_ClockConfig+0x1b0>)
 80024be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024c0:	2003      	movs	r0, #3
 80024c2:	f7fe ffbf 	bl	8001444 <HAL_InitTick>
  
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b004      	add	sp, #16
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40022000 	.word	0x40022000
 80024d4:	40021000 	.word	0x40021000
 80024d8:	00001388 	.word	0x00001388
 80024dc:	fffff8ff 	.word	0xfffff8ff
 80024e0:	08003878 	.word	0x08003878
 80024e4:	20000000 	.word	0x20000000

080024e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002502:	4b2d      	ldr	r3, [pc, #180]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	220c      	movs	r2, #12
 800250c:	4013      	ands	r3, r2
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d046      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0xb8>
 8002512:	d848      	bhi.n	80025a6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002514:	2b04      	cmp	r3, #4
 8002516:	d002      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0x36>
 8002518:	2b08      	cmp	r3, #8
 800251a:	d003      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x3c>
 800251c:	e043      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800251e:	4b27      	ldr	r3, [pc, #156]	@ (80025bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002520:	613b      	str	r3, [r7, #16]
      break;
 8002522:	e043      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	0c9b      	lsrs	r3, r3, #18
 8002528:	220f      	movs	r2, #15
 800252a:	4013      	ands	r3, r2
 800252c:	4a24      	ldr	r2, [pc, #144]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800252e:	5cd3      	ldrb	r3, [r2, r3]
 8002530:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002532:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002536:	220f      	movs	r2, #15
 8002538:	4013      	ands	r3, r2
 800253a:	4a22      	ldr	r2, [pc, #136]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800253c:	5cd3      	ldrb	r3, [r2, r3]
 800253e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	23c0      	movs	r3, #192	@ 0xc0
 8002544:	025b      	lsls	r3, r3, #9
 8002546:	401a      	ands	r2, r3
 8002548:	2380      	movs	r3, #128	@ 0x80
 800254a:	025b      	lsls	r3, r3, #9
 800254c:	429a      	cmp	r2, r3
 800254e:	d109      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	481a      	ldr	r0, [pc, #104]	@ (80025bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002554:	f7fd fdd8 	bl	8000108 <__udivsi3>
 8002558:	0003      	movs	r3, r0
 800255a:	001a      	movs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4353      	muls	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e01a      	b.n	800259a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	23c0      	movs	r3, #192	@ 0xc0
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	401a      	ands	r2, r3
 800256c:	23c0      	movs	r3, #192	@ 0xc0
 800256e:	025b      	lsls	r3, r3, #9
 8002570:	429a      	cmp	r2, r3
 8002572:	d109      	bne.n	8002588 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	4814      	ldr	r0, [pc, #80]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002578:	f7fd fdc6 	bl	8000108 <__udivsi3>
 800257c:	0003      	movs	r3, r0
 800257e:	001a      	movs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4353      	muls	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e008      	b.n	800259a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	480c      	ldr	r0, [pc, #48]	@ (80025bc <HAL_RCC_GetSysClockFreq+0xd4>)
 800258c:	f7fd fdbc 	bl	8000108 <__udivsi3>
 8002590:	0003      	movs	r3, r0
 8002592:	001a      	movs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4353      	muls	r3, r2
 8002598:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	613b      	str	r3, [r7, #16]
      break;
 800259e:	e005      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80025a0:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80025a2:	613b      	str	r3, [r7, #16]
      break;
 80025a4:	e002      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a6:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_RCC_GetSysClockFreq+0xd4>)
 80025a8:	613b      	str	r3, [r7, #16]
      break;
 80025aa:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025ac:	693b      	ldr	r3, [r7, #16]
}
 80025ae:	0018      	movs	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b006      	add	sp, #24
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	40021000 	.word	0x40021000
 80025bc:	007a1200 	.word	0x007a1200
 80025c0:	08003888 	.word	0x08003888
 80025c4:	08003898 	.word	0x08003898
 80025c8:	02dc6c00 	.word	0x02dc6c00

080025cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	@ 0x80
 80025e2:	025b      	lsls	r3, r3, #9
 80025e4:	4013      	ands	r3, r2
 80025e6:	d100      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80025e8:	e08e      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80025ea:	2017      	movs	r0, #23
 80025ec:	183b      	adds	r3, r7, r0
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f2:	4b6e      	ldr	r3, [pc, #440]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	2380      	movs	r3, #128	@ 0x80
 80025f8:	055b      	lsls	r3, r3, #21
 80025fa:	4013      	ands	r3, r2
 80025fc:	d110      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	4b6b      	ldr	r3, [pc, #428]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	4b6a      	ldr	r3, [pc, #424]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002604:	2180      	movs	r1, #128	@ 0x80
 8002606:	0549      	lsls	r1, r1, #21
 8002608:	430a      	orrs	r2, r1
 800260a:	61da      	str	r2, [r3, #28]
 800260c:	4b67      	ldr	r3, [pc, #412]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	2380      	movs	r3, #128	@ 0x80
 8002612:	055b      	lsls	r3, r3, #21
 8002614:	4013      	ands	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261a:	183b      	adds	r3, r7, r0
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	4b63      	ldr	r3, [pc, #396]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4013      	ands	r3, r2
 800262a:	d11a      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262c:	4b60      	ldr	r3, [pc, #384]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b5f      	ldr	r3, [pc, #380]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002632:	2180      	movs	r1, #128	@ 0x80
 8002634:	0049      	lsls	r1, r1, #1
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263a:	f7fe ff49 	bl	80014d0 <HAL_GetTick>
 800263e:	0003      	movs	r3, r0
 8002640:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002642:	e008      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7fe ff44 	bl	80014d0 <HAL_GetTick>
 8002648:	0002      	movs	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0a6      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002656:	4b56      	ldr	r3, [pc, #344]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4013      	ands	r3, r2
 8002660:	d0f0      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002662:	4b52      	ldr	r3, [pc, #328]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002664:	6a1a      	ldr	r2, [r3, #32]
 8002666:	23c0      	movs	r3, #192	@ 0xc0
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4013      	ands	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d034      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	23c0      	movs	r3, #192	@ 0xc0
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4013      	ands	r3, r2
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	429a      	cmp	r2, r3
 8002682:	d02c      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002684:	4b49      	ldr	r3, [pc, #292]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a4a      	ldr	r2, [pc, #296]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800268a:	4013      	ands	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800268e:	4b47      	ldr	r3, [pc, #284]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002690:	6a1a      	ldr	r2, [r3, #32]
 8002692:	4b46      	ldr	r3, [pc, #280]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002694:	2180      	movs	r1, #128	@ 0x80
 8002696:	0249      	lsls	r1, r1, #9
 8002698:	430a      	orrs	r2, r1
 800269a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800269c:	4b43      	ldr	r3, [pc, #268]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800269e:	6a1a      	ldr	r2, [r3, #32]
 80026a0:	4b42      	ldr	r3, [pc, #264]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a2:	4945      	ldr	r1, [pc, #276]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026a8:	4b40      	ldr	r3, [pc, #256]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	4013      	ands	r3, r2
 80026b4:	d013      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b6:	f7fe ff0b 	bl	80014d0 <HAL_GetTick>
 80026ba:	0003      	movs	r3, r0
 80026bc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	e009      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fe ff06 	bl	80014d0 <HAL_GetTick>
 80026c4:	0002      	movs	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	4a3c      	ldr	r2, [pc, #240]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e067      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	4b35      	ldr	r3, [pc, #212]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	2202      	movs	r2, #2
 80026da:	4013      	ands	r3, r2
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026de:	4b33      	ldr	r3, [pc, #204]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4a34      	ldr	r2, [pc, #208]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	0019      	movs	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	4b2f      	ldr	r3, [pc, #188]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026ee:	430a      	orrs	r2, r1
 80026f0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026f2:	2317      	movs	r3, #23
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d105      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fc:	4b2b      	ldr	r3, [pc, #172]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	4b2a      	ldr	r3, [pc, #168]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002702:	492f      	ldr	r1, [pc, #188]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002704:	400a      	ands	r2, r1
 8002706:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2201      	movs	r2, #1
 800270e:	4013      	ands	r3, r2
 8002710:	d009      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002712:	4b26      	ldr	r3, [pc, #152]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	2203      	movs	r2, #3
 8002718:	4393      	bics	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	4b22      	ldr	r3, [pc, #136]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002722:	430a      	orrs	r2, r1
 8002724:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	d009      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002730:	4b1e      	ldr	r3, [pc, #120]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	4a23      	ldr	r2, [pc, #140]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002740:	430a      	orrs	r2, r1
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2220      	movs	r2, #32
 800274a:	4013      	ands	r3, r2
 800274c:	d009      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800274e:	4b17      	ldr	r3, [pc, #92]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	2210      	movs	r2, #16
 8002754:	4393      	bics	r3, r2
 8002756:	0019      	movs	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	4b13      	ldr	r3, [pc, #76]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800275e:	430a      	orrs	r2, r1
 8002760:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	2380      	movs	r3, #128	@ 0x80
 8002768:	029b      	lsls	r3, r3, #10
 800276a:	4013      	ands	r3, r2
 800276c:	d009      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800276e:	4b0f      	ldr	r3, [pc, #60]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	2280      	movs	r2, #128	@ 0x80
 8002774:	4393      	bics	r3, r2
 8002776:	0019      	movs	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699a      	ldr	r2, [r3, #24]
 800277c:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800277e:	430a      	orrs	r2, r1
 8002780:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4013      	ands	r3, r2
 800278c:	d009      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800278e:	4b07      	ldr	r3, [pc, #28]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	2240      	movs	r2, #64	@ 0x40
 8002794:	4393      	bics	r3, r2
 8002796:	0019      	movs	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	4b03      	ldr	r3, [pc, #12]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800279e:	430a      	orrs	r2, r1
 80027a0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b006      	add	sp, #24
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40007000 	.word	0x40007000
 80027b4:	fffffcff 	.word	0xfffffcff
 80027b8:	fffeffff 	.word	0xfffeffff
 80027bc:	00001388 	.word	0x00001388
 80027c0:	efffffff 	.word	0xefffffff
 80027c4:	fffcffff 	.word	0xfffcffff

080027c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0a8      	b.n	800292c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	2382      	movs	r3, #130	@ 0x82
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d009      	beq.n	8002802 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	61da      	str	r2, [r3, #28]
 80027f4:	e005      	b.n	8002802 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	225d      	movs	r2, #93	@ 0x5d
 800280c:	5c9b      	ldrb	r3, [r3, r2]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d107      	bne.n	8002824 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	225c      	movs	r2, #92	@ 0x5c
 8002818:	2100      	movs	r1, #0
 800281a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	0018      	movs	r0, r3
 8002820:	f7fe fd30 	bl	8001284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	225d      	movs	r2, #93	@ 0x5d
 8002828:	2102      	movs	r1, #2
 800282a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2140      	movs	r1, #64	@ 0x40
 8002838:	438a      	bics	r2, r1
 800283a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	23e0      	movs	r3, #224	@ 0xe0
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	429a      	cmp	r2, r3
 8002846:	d902      	bls.n	800284e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e002      	b.n	8002854 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800284e:	2380      	movs	r3, #128	@ 0x80
 8002850:	015b      	lsls	r3, r3, #5
 8002852:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	23f0      	movs	r3, #240	@ 0xf0
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	429a      	cmp	r2, r3
 800285e:	d008      	beq.n	8002872 <HAL_SPI_Init+0xaa>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	23e0      	movs	r3, #224	@ 0xe0
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	429a      	cmp	r2, r3
 800286a:	d002      	beq.n	8002872 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	2382      	movs	r3, #130	@ 0x82
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	401a      	ands	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6899      	ldr	r1, [r3, #8]
 8002880:	2384      	movs	r3, #132	@ 0x84
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	400b      	ands	r3, r1
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2102      	movs	r1, #2
 800288e:	400b      	ands	r3, r1
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2101      	movs	r1, #1
 8002898:	400b      	ands	r3, r1
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6999      	ldr	r1, [r3, #24]
 80028a0:	2380      	movs	r3, #128	@ 0x80
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	400b      	ands	r3, r1
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	2138      	movs	r1, #56	@ 0x38
 80028ae:	400b      	ands	r3, r1
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	2180      	movs	r1, #128	@ 0x80
 80028b8:	400b      	ands	r3, r1
 80028ba:	431a      	orrs	r2, r3
 80028bc:	0011      	movs	r1, r2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	019b      	lsls	r3, r3, #6
 80028c6:	401a      	ands	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	2204      	movs	r2, #4
 80028d8:	401a      	ands	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	2110      	movs	r1, #16
 80028e0:	400b      	ands	r3, r1
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e8:	2108      	movs	r1, #8
 80028ea:	400b      	ands	r3, r1
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68d9      	ldr	r1, [r3, #12]
 80028f2:	23f0      	movs	r3, #240	@ 0xf0
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	400b      	ands	r3, r1
 80028f8:	431a      	orrs	r2, r3
 80028fa:	0011      	movs	r1, r2
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	2380      	movs	r3, #128	@ 0x80
 8002900:	015b      	lsls	r3, r3, #5
 8002902:	401a      	ands	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4907      	ldr	r1, [pc, #28]	@ (8002934 <HAL_SPI_Init+0x16c>)
 8002918:	400a      	ands	r2, r1
 800291a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	225d      	movs	r2, #93	@ 0x5d
 8002926:	2101      	movs	r1, #1
 8002928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b004      	add	sp, #16
 8002932:	bd80      	pop	{r7, pc}
 8002934:	fffff7ff 	.word	0xfffff7ff

08002938 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	1dbb      	adds	r3, r7, #6
 8002946:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002948:	231f      	movs	r3, #31
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	225c      	movs	r2, #92	@ 0x5c
 8002954:	5c9b      	ldrb	r3, [r3, r2]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_SPI_Transmit+0x26>
 800295a:	2302      	movs	r3, #2
 800295c:	e147      	b.n	8002bee <HAL_SPI_Transmit+0x2b6>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	225c      	movs	r2, #92	@ 0x5c
 8002962:	2101      	movs	r1, #1
 8002964:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002966:	f7fe fdb3 	bl	80014d0 <HAL_GetTick>
 800296a:	0003      	movs	r3, r0
 800296c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800296e:	2316      	movs	r3, #22
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	1dba      	adds	r2, r7, #6
 8002974:	8812      	ldrh	r2, [r2, #0]
 8002976:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	225d      	movs	r2, #93	@ 0x5d
 800297c:	5c9b      	ldrb	r3, [r3, r2]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d004      	beq.n	800298e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002984:	231f      	movs	r3, #31
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	2202      	movs	r2, #2
 800298a:	701a      	strb	r2, [r3, #0]
    goto error;
 800298c:	e128      	b.n	8002be0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_SPI_Transmit+0x64>
 8002994:	1dbb      	adds	r3, r7, #6
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d104      	bne.n	80029a6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800299c:	231f      	movs	r3, #31
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80029a4:	e11c      	b.n	8002be0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	225d      	movs	r2, #93	@ 0x5d
 80029aa:	2103      	movs	r1, #3
 80029ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1dba      	adds	r2, r7, #6
 80029be:	8812      	ldrh	r2, [r2, #0]
 80029c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1dba      	adds	r2, r7, #6
 80029c6:	8812      	ldrh	r2, [r2, #0]
 80029c8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2244      	movs	r2, #68	@ 0x44
 80029d4:	2100      	movs	r1, #0
 80029d6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2246      	movs	r2, #70	@ 0x46
 80029dc:	2100      	movs	r1, #0
 80029de:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d110      	bne.n	8002a1a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2140      	movs	r1, #64	@ 0x40
 8002a04:	438a      	bics	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2180      	movs	r1, #128	@ 0x80
 8002a14:	01c9      	lsls	r1, r1, #7
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2240      	movs	r2, #64	@ 0x40
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b40      	cmp	r3, #64	@ 0x40
 8002a26:	d007      	beq.n	8002a38 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2140      	movs	r1, #64	@ 0x40
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	23e0      	movs	r3, #224	@ 0xe0
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d952      	bls.n	8002aea <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <HAL_SPI_Transmit+0x11e>
 8002a4c:	2316      	movs	r3, #22
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d143      	bne.n	8002ade <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5a:	881a      	ldrh	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a66:	1c9a      	adds	r2, r3, #2
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a7a:	e030      	b.n	8002ade <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2202      	movs	r2, #2
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d112      	bne.n	8002ab0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9a:	1c9a      	adds	r2, r3, #2
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002aae:	e016      	b.n	8002ade <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ab0:	f7fe fd0e 	bl	80014d0 <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d802      	bhi.n	8002ac6 <HAL_SPI_Transmit+0x18e>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	d102      	bne.n	8002acc <HAL_SPI_Transmit+0x194>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d108      	bne.n	8002ade <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002acc:	231f      	movs	r3, #31
 8002ace:	18fb      	adds	r3, r7, r3
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	225d      	movs	r2, #93	@ 0x5d
 8002ad8:	2101      	movs	r1, #1
 8002ada:	5499      	strb	r1, [r3, r2]
          goto error;
 8002adc:	e080      	b.n	8002be0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1c9      	bne.n	8002a7c <HAL_SPI_Transmit+0x144>
 8002ae8:	e053      	b.n	8002b92 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <HAL_SPI_Transmit+0x1c4>
 8002af2:	2316      	movs	r3, #22
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d145      	bne.n	8002b88 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002b22:	e031      	b.n	8002b88 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d113      	bne.n	8002b5a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b58:	e016      	b.n	8002b88 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b5a:	f7fe fcb9 	bl	80014d0 <HAL_GetTick>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d802      	bhi.n	8002b70 <HAL_SPI_Transmit+0x238>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	d102      	bne.n	8002b76 <HAL_SPI_Transmit+0x23e>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d108      	bne.n	8002b88 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002b76:	231f      	movs	r3, #31
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	225d      	movs	r2, #93	@ 0x5d
 8002b82:	2101      	movs	r1, #1
 8002b84:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b86:	e02b      	b.n	8002be0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1c8      	bne.n	8002b24 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	6839      	ldr	r1, [r7, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 f95d 	bl	8002e58 <SPI_EndRxTxTransaction>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d002      	beq.n	8002ba8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d004      	beq.n	8002bd8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002bce:	231f      	movs	r3, #31
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e003      	b.n	8002be0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	225d      	movs	r2, #93	@ 0x5d
 8002bdc:	2101      	movs	r1, #1
 8002bde:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	225c      	movs	r2, #92	@ 0x5c
 8002be4:	2100      	movs	r1, #0
 8002be6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002be8:	231f      	movs	r3, #31
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	781b      	ldrb	r3, [r3, #0]
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b008      	add	sp, #32
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	1dfb      	adds	r3, r7, #7
 8002c06:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c08:	f7fe fc62 	bl	80014d0 <HAL_GetTick>
 8002c0c:	0002      	movs	r2, r0
 8002c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c18:	f7fe fc5a 	bl	80014d0 <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c20:	4b3a      	ldr	r3, [pc, #232]	@ (8002d0c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	015b      	lsls	r3, r3, #5
 8002c26:	0d1b      	lsrs	r3, r3, #20
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	4353      	muls	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c2e:	e058      	b.n	8002ce2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	3301      	adds	r3, #1
 8002c34:	d055      	beq.n	8002ce2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c36:	f7fe fc4b 	bl	80014d0 <HAL_GetTick>
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d902      	bls.n	8002c4c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d142      	bne.n	8002cd2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	21e0      	movs	r1, #224	@ 0xe0
 8002c58:	438a      	bics	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	2382      	movs	r3, #130	@ 0x82
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d113      	bne.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d005      	beq.n	8002c80 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d107      	bne.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2140      	movs	r1, #64	@ 0x40
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c94:	2380      	movs	r3, #128	@ 0x80
 8002c96:	019b      	lsls	r3, r3, #6
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d110      	bne.n	8002cbe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	491a      	ldr	r1, [pc, #104]	@ (8002d10 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002ca8:	400a      	ands	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2180      	movs	r1, #128	@ 0x80
 8002cb8:	0189      	lsls	r1, r1, #6
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	225d      	movs	r2, #93	@ 0x5d
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	225c      	movs	r2, #92	@ 0x5c
 8002cca:	2100      	movs	r1, #0
 8002ccc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e017      	b.n	8002d02 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	4013      	ands	r3, r2
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	425a      	negs	r2, r3
 8002cf2:	4153      	adcs	r3, r2
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	1dfb      	adds	r3, r7, #7
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d197      	bne.n	8002c30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	0018      	movs	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b008      	add	sp, #32
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	ffffdfff 	.word	0xffffdfff

08002d14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	@ 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d22:	2317      	movs	r3, #23
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d2a:	f7fe fbd1 	bl	80014d0 <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	18d3      	adds	r3, r2, r3
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002d3a:	f7fe fbc9 	bl	80014d0 <HAL_GetTick>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d4a:	4b41      	ldr	r3, [pc, #260]	@ (8002e50 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	0013      	movs	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	00da      	lsls	r2, r3, #3
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	0d1b      	lsrs	r3, r3, #20
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5c:	4353      	muls	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d60:	e068      	b.n	8002e34 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	23c0      	movs	r3, #192	@ 0xc0
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d10a      	bne.n	8002d82 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d107      	bne.n	8002d82 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	2117      	movs	r1, #23
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	3301      	adds	r3, #1
 8002d86:	d055      	beq.n	8002e34 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d88:	f7fe fba2 	bl	80014d0 <HAL_GetTick>
 8002d8c:	0002      	movs	r2, r0
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d902      	bls.n	8002d9e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d142      	bne.n	8002e24 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	21e0      	movs	r1, #224	@ 0xe0
 8002daa:	438a      	bics	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	2382      	movs	r3, #130	@ 0x82
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d113      	bne.n	8002de2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	2380      	movs	r3, #128	@ 0x80
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d005      	beq.n	8002dd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d107      	bne.n	8002de2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2140      	movs	r1, #64	@ 0x40
 8002dde:	438a      	bics	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002de6:	2380      	movs	r3, #128	@ 0x80
 8002de8:	019b      	lsls	r3, r3, #6
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d110      	bne.n	8002e10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4916      	ldr	r1, [pc, #88]	@ (8002e54 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2180      	movs	r1, #128	@ 0x80
 8002e0a:	0189      	lsls	r1, r1, #6
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	225d      	movs	r2, #93	@ 0x5d
 8002e14:	2101      	movs	r1, #1
 8002e16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	225c      	movs	r2, #92	@ 0x5c
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e010      	b.n	8002e46 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d18e      	bne.n	8002d62 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	0018      	movs	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b00a      	add	sp, #40	@ 0x28
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	20000000 	.word	0x20000000
 8002e54:	ffffdfff 	.word	0xffffdfff

08002e58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	23c0      	movs	r3, #192	@ 0xc0
 8002e68:	0159      	lsls	r1, r3, #5
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	0013      	movs	r3, r2
 8002e72:	2200      	movs	r2, #0
 8002e74:	f7ff ff4e 	bl	8002d14 <SPI_WaitFifoStateUntilTimeout>
 8002e78:	1e03      	subs	r3, r0, #0
 8002e7a:	d007      	beq.n	8002e8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e80:	2220      	movs	r2, #32
 8002e82:	431a      	orrs	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e027      	b.n	8002edc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	0013      	movs	r3, r2
 8002e96:	2200      	movs	r2, #0
 8002e98:	2180      	movs	r1, #128	@ 0x80
 8002e9a:	f7ff fead 	bl	8002bf8 <SPI_WaitFlagStateUntilTimeout>
 8002e9e:	1e03      	subs	r3, r0, #0
 8002ea0:	d007      	beq.n	8002eb2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e014      	b.n	8002edc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	23c0      	movs	r3, #192	@ 0xc0
 8002eb6:	00d9      	lsls	r1, r3, #3
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	0013      	movs	r3, r2
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f7ff ff27 	bl	8002d14 <SPI_WaitFifoStateUntilTimeout>
 8002ec6:	1e03      	subs	r3, r0, #0
 8002ec8:	d007      	beq.n	8002eda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ece:	2220      	movs	r2, #32
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e000      	b.n	8002edc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b004      	add	sp, #16
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e042      	b.n	8002f7c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	223d      	movs	r2, #61	@ 0x3d
 8002efa:	5c9b      	ldrb	r3, [r3, r2]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d107      	bne.n	8002f12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	223c      	movs	r2, #60	@ 0x3c
 8002f06:	2100      	movs	r1, #0
 8002f08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f7fe fa07 	bl	8001320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	223d      	movs	r2, #61	@ 0x3d
 8002f16:	2102      	movs	r1, #2
 8002f18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3304      	adds	r3, #4
 8002f22:	0019      	movs	r1, r3
 8002f24:	0010      	movs	r0, r2
 8002f26:	f000 fa89 	bl	800343c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2246      	movs	r2, #70	@ 0x46
 8002f2e:	2101      	movs	r1, #1
 8002f30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	223e      	movs	r2, #62	@ 0x3e
 8002f36:	2101      	movs	r1, #1
 8002f38:	5499      	strb	r1, [r3, r2]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	223f      	movs	r2, #63	@ 0x3f
 8002f3e:	2101      	movs	r1, #1
 8002f40:	5499      	strb	r1, [r3, r2]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2240      	movs	r2, #64	@ 0x40
 8002f46:	2101      	movs	r1, #1
 8002f48:	5499      	strb	r1, [r3, r2]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2241      	movs	r2, #65	@ 0x41
 8002f4e:	2101      	movs	r1, #1
 8002f50:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2242      	movs	r2, #66	@ 0x42
 8002f56:	2101      	movs	r1, #1
 8002f58:	5499      	strb	r1, [r3, r2]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2243      	movs	r2, #67	@ 0x43
 8002f5e:	2101      	movs	r1, #1
 8002f60:	5499      	strb	r1, [r3, r2]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2244      	movs	r2, #68	@ 0x44
 8002f66:	2101      	movs	r1, #1
 8002f68:	5499      	strb	r1, [r3, r2]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2245      	movs	r2, #69	@ 0x45
 8002f6e:	2101      	movs	r1, #1
 8002f70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	223d      	movs	r2, #61	@ 0x3d
 8002f76:	2101      	movs	r1, #1
 8002f78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	223d      	movs	r2, #61	@ 0x3d
 8002f90:	5c9b      	ldrb	r3, [r3, r2]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d001      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e03b      	b.n	8003014 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	223d      	movs	r2, #61	@ 0x3d
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2101      	movs	r1, #1
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a18      	ldr	r2, [pc, #96]	@ (800301c <HAL_TIM_Base_Start_IT+0x98>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00f      	beq.n	8002fde <HAL_TIM_Base_Start_IT+0x5a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	2380      	movs	r3, #128	@ 0x80
 8002fc4:	05db      	lsls	r3, r3, #23
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d009      	beq.n	8002fde <HAL_TIM_Base_Start_IT+0x5a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a14      	ldr	r2, [pc, #80]	@ (8003020 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_TIM_Base_Start_IT+0x5a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a12      	ldr	r2, [pc, #72]	@ (8003024 <HAL_TIM_Base_Start_IT+0xa0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d111      	bne.n	8003002 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d010      	beq.n	8003012 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003000:	e007      	b.n	8003012 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b004      	add	sp, #16
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40000400 	.word	0x40000400
 8003024:	40014000 	.word	0x40014000

08003028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2202      	movs	r2, #2
 8003038:	4013      	ands	r3, r2
 800303a:	2b02      	cmp	r3, #2
 800303c:	d124      	bne.n	8003088 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2202      	movs	r2, #2
 8003046:	4013      	ands	r3, r2
 8003048:	2b02      	cmp	r3, #2
 800304a:	d11d      	bne.n	8003088 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2203      	movs	r2, #3
 8003052:	4252      	negs	r2, r2
 8003054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2203      	movs	r2, #3
 8003064:	4013      	ands	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0018      	movs	r0, r3
 800306c:	f000 f9ce 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 8003070:	e007      	b.n	8003082 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0018      	movs	r0, r3
 8003076:	f000 f9c1 	bl	80033fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	0018      	movs	r0, r3
 800307e:	f000 f9cd 	bl	800341c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2204      	movs	r2, #4
 8003090:	4013      	ands	r3, r2
 8003092:	2b04      	cmp	r3, #4
 8003094:	d125      	bne.n	80030e2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2204      	movs	r2, #4
 800309e:	4013      	ands	r3, r2
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d11e      	bne.n	80030e2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2205      	movs	r2, #5
 80030aa:	4252      	negs	r2, r2
 80030ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	23c0      	movs	r3, #192	@ 0xc0
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4013      	ands	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f000 f9a1 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 80030ca:	e007      	b.n	80030dc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 f994 	bl	80033fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 f9a0 	bl	800341c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2208      	movs	r2, #8
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d124      	bne.n	800313a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2208      	movs	r2, #8
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d11d      	bne.n	800313a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2209      	movs	r2, #9
 8003104:	4252      	negs	r2, r2
 8003106:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2204      	movs	r2, #4
 800310c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	2203      	movs	r2, #3
 8003116:	4013      	ands	r3, r2
 8003118:	d004      	beq.n	8003124 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	0018      	movs	r0, r3
 800311e:	f000 f975 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 8003122:	e007      	b.n	8003134 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	0018      	movs	r0, r3
 8003128:	f000 f968 	bl	80033fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	0018      	movs	r0, r3
 8003130:	f000 f974 	bl	800341c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2210      	movs	r2, #16
 8003142:	4013      	ands	r3, r2
 8003144:	2b10      	cmp	r3, #16
 8003146:	d125      	bne.n	8003194 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2210      	movs	r2, #16
 8003150:	4013      	ands	r3, r2
 8003152:	2b10      	cmp	r3, #16
 8003154:	d11e      	bne.n	8003194 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2211      	movs	r2, #17
 800315c:	4252      	negs	r2, r2
 800315e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2208      	movs	r2, #8
 8003164:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	23c0      	movs	r3, #192	@ 0xc0
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4013      	ands	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	0018      	movs	r0, r3
 8003178:	f000 f948 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 800317c:	e007      	b.n	800318e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	0018      	movs	r0, r3
 8003182:	f000 f93b 	bl	80033fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0018      	movs	r0, r3
 800318a:	f000 f947 	bl	800341c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2201      	movs	r2, #1
 800319c:	4013      	ands	r3, r2
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10f      	bne.n	80031c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d108      	bne.n	80031c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2202      	movs	r2, #2
 80031b6:	4252      	negs	r2, r2
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	f7fd fded 	bl	8000d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2280      	movs	r2, #128	@ 0x80
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b80      	cmp	r3, #128	@ 0x80
 80031ce:	d10f      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2280      	movs	r2, #128	@ 0x80
 80031d8:	4013      	ands	r3, r2
 80031da:	2b80      	cmp	r3, #128	@ 0x80
 80031dc:	d108      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2281      	movs	r2, #129	@ 0x81
 80031e4:	4252      	negs	r2, r2
 80031e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 faa6 	bl	800373c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2240      	movs	r2, #64	@ 0x40
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b40      	cmp	r3, #64	@ 0x40
 80031fc:	d10f      	bne.n	800321e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2240      	movs	r2, #64	@ 0x40
 8003206:	4013      	ands	r3, r2
 8003208:	2b40      	cmp	r3, #64	@ 0x40
 800320a:	d108      	bne.n	800321e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2241      	movs	r2, #65	@ 0x41
 8003212:	4252      	negs	r2, r2
 8003214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f000 f907 	bl	800342c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2220      	movs	r2, #32
 8003226:	4013      	ands	r3, r2
 8003228:	2b20      	cmp	r3, #32
 800322a:	d10f      	bne.n	800324c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	4013      	ands	r3, r2
 8003236:	2b20      	cmp	r3, #32
 8003238:	d108      	bne.n	800324c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2221      	movs	r2, #33	@ 0x21
 8003240:	4252      	negs	r2, r2
 8003242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	0018      	movs	r0, r3
 8003248:	f000 fa70 	bl	800372c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800324c:	46c0      	nop			@ (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b002      	add	sp, #8
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800325e:	230f      	movs	r3, #15
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	223c      	movs	r2, #60	@ 0x3c
 800326a:	5c9b      	ldrb	r3, [r3, r2]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_TIM_ConfigClockSource+0x20>
 8003270:	2302      	movs	r3, #2
 8003272:	e0bc      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x19a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	223c      	movs	r2, #60	@ 0x3c
 8003278:	2101      	movs	r1, #1
 800327a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	223d      	movs	r2, #61	@ 0x3d
 8003280:	2102      	movs	r1, #2
 8003282:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2277      	movs	r2, #119	@ 0x77
 8003290:	4393      	bics	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4a58      	ldr	r2, [pc, #352]	@ (80033f8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003298:	4013      	ands	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2280      	movs	r2, #128	@ 0x80
 80032aa:	0192      	lsls	r2, r2, #6
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d040      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0xde>
 80032b0:	2280      	movs	r2, #128	@ 0x80
 80032b2:	0192      	lsls	r2, r2, #6
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d900      	bls.n	80032ba <HAL_TIM_ConfigClockSource+0x66>
 80032b8:	e088      	b.n	80033cc <HAL_TIM_ConfigClockSource+0x178>
 80032ba:	2280      	movs	r2, #128	@ 0x80
 80032bc:	0152      	lsls	r2, r2, #5
 80032be:	4293      	cmp	r3, r2
 80032c0:	d100      	bne.n	80032c4 <HAL_TIM_ConfigClockSource+0x70>
 80032c2:	e088      	b.n	80033d6 <HAL_TIM_ConfigClockSource+0x182>
 80032c4:	2280      	movs	r2, #128	@ 0x80
 80032c6:	0152      	lsls	r2, r2, #5
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d900      	bls.n	80032ce <HAL_TIM_ConfigClockSource+0x7a>
 80032cc:	e07e      	b.n	80033cc <HAL_TIM_ConfigClockSource+0x178>
 80032ce:	2b70      	cmp	r3, #112	@ 0x70
 80032d0:	d018      	beq.n	8003304 <HAL_TIM_ConfigClockSource+0xb0>
 80032d2:	d900      	bls.n	80032d6 <HAL_TIM_ConfigClockSource+0x82>
 80032d4:	e07a      	b.n	80033cc <HAL_TIM_ConfigClockSource+0x178>
 80032d6:	2b60      	cmp	r3, #96	@ 0x60
 80032d8:	d04f      	beq.n	800337a <HAL_TIM_ConfigClockSource+0x126>
 80032da:	d900      	bls.n	80032de <HAL_TIM_ConfigClockSource+0x8a>
 80032dc:	e076      	b.n	80033cc <HAL_TIM_ConfigClockSource+0x178>
 80032de:	2b50      	cmp	r3, #80	@ 0x50
 80032e0:	d03b      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x106>
 80032e2:	d900      	bls.n	80032e6 <HAL_TIM_ConfigClockSource+0x92>
 80032e4:	e072      	b.n	80033cc <HAL_TIM_ConfigClockSource+0x178>
 80032e6:	2b40      	cmp	r3, #64	@ 0x40
 80032e8:	d057      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x146>
 80032ea:	d900      	bls.n	80032ee <HAL_TIM_ConfigClockSource+0x9a>
 80032ec:	e06e      	b.n	80033cc <HAL_TIM_ConfigClockSource+0x178>
 80032ee:	2b30      	cmp	r3, #48	@ 0x30
 80032f0:	d063      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x166>
 80032f2:	d86b      	bhi.n	80033cc <HAL_TIM_ConfigClockSource+0x178>
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d060      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x166>
 80032f8:	d868      	bhi.n	80033cc <HAL_TIM_ConfigClockSource+0x178>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d05d      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x166>
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d05b      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x166>
 8003302:	e063      	b.n	80033cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003314:	f000 f98c 	bl	8003630 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2277      	movs	r2, #119	@ 0x77
 8003324:	4313      	orrs	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	609a      	str	r2, [r3, #8]
      break;
 8003330:	e052      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003342:	f000 f975 	bl	8003630 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2180      	movs	r1, #128	@ 0x80
 8003352:	01c9      	lsls	r1, r1, #7
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
      break;
 8003358:	e03e      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003366:	001a      	movs	r2, r3
 8003368:	f000 f8e8 	bl	800353c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2150      	movs	r1, #80	@ 0x50
 8003372:	0018      	movs	r0, r3
 8003374:	f000 f942 	bl	80035fc <TIM_ITRx_SetConfig>
      break;
 8003378:	e02e      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003386:	001a      	movs	r2, r3
 8003388:	f000 f906 	bl	8003598 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2160      	movs	r1, #96	@ 0x60
 8003392:	0018      	movs	r0, r3
 8003394:	f000 f932 	bl	80035fc <TIM_ITRx_SetConfig>
      break;
 8003398:	e01e      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a6:	001a      	movs	r2, r3
 80033a8:	f000 f8c8 	bl	800353c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 f922 	bl	80035fc <TIM_ITRx_SetConfig>
      break;
 80033b8:	e00e      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	0019      	movs	r1, r3
 80033c4:	0010      	movs	r0, r2
 80033c6:	f000 f919 	bl	80035fc <TIM_ITRx_SetConfig>
      break;
 80033ca:	e005      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80033cc:	230f      	movs	r3, #15
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
      break;
 80033d4:	e000      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80033d6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	223d      	movs	r2, #61	@ 0x3d
 80033dc:	2101      	movs	r1, #1
 80033de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	223c      	movs	r2, #60	@ 0x3c
 80033e4:	2100      	movs	r1, #0
 80033e6:	5499      	strb	r1, [r3, r2]

  return status;
 80033e8:	230f      	movs	r3, #15
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	781b      	ldrb	r3, [r3, #0]
}
 80033ee:	0018      	movs	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b004      	add	sp, #16
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	ffff00ff 	.word	0xffff00ff

080033fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b002      	add	sp, #8
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003414:	46c0      	nop			@ (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	b002      	add	sp, #8
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003424:	46c0      	nop			@ (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b002      	add	sp, #8
 800343a:	bd80      	pop	{r7, pc}

0800343c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a34      	ldr	r2, [pc, #208]	@ (8003520 <TIM_Base_SetConfig+0xe4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d008      	beq.n	8003466 <TIM_Base_SetConfig+0x2a>
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	2380      	movs	r3, #128	@ 0x80
 8003458:	05db      	lsls	r3, r3, #23
 800345a:	429a      	cmp	r2, r3
 800345c:	d003      	beq.n	8003466 <TIM_Base_SetConfig+0x2a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a30      	ldr	r2, [pc, #192]	@ (8003524 <TIM_Base_SetConfig+0xe8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d108      	bne.n	8003478 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2270      	movs	r2, #112	@ 0x70
 800346a:	4393      	bics	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a29      	ldr	r2, [pc, #164]	@ (8003520 <TIM_Base_SetConfig+0xe4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d018      	beq.n	80034b2 <TIM_Base_SetConfig+0x76>
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	2380      	movs	r3, #128	@ 0x80
 8003484:	05db      	lsls	r3, r3, #23
 8003486:	429a      	cmp	r2, r3
 8003488:	d013      	beq.n	80034b2 <TIM_Base_SetConfig+0x76>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a25      	ldr	r2, [pc, #148]	@ (8003524 <TIM_Base_SetConfig+0xe8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00f      	beq.n	80034b2 <TIM_Base_SetConfig+0x76>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a24      	ldr	r2, [pc, #144]	@ (8003528 <TIM_Base_SetConfig+0xec>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00b      	beq.n	80034b2 <TIM_Base_SetConfig+0x76>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a23      	ldr	r2, [pc, #140]	@ (800352c <TIM_Base_SetConfig+0xf0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <TIM_Base_SetConfig+0x76>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a22      	ldr	r2, [pc, #136]	@ (8003530 <TIM_Base_SetConfig+0xf4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d003      	beq.n	80034b2 <TIM_Base_SetConfig+0x76>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a21      	ldr	r2, [pc, #132]	@ (8003534 <TIM_Base_SetConfig+0xf8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d108      	bne.n	80034c4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4a20      	ldr	r2, [pc, #128]	@ (8003538 <TIM_Base_SetConfig+0xfc>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	4393      	bics	r3, r2
 80034ca:	001a      	movs	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003520 <TIM_Base_SetConfig+0xe4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00b      	beq.n	800350a <TIM_Base_SetConfig+0xce>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a0d      	ldr	r2, [pc, #52]	@ (800352c <TIM_Base_SetConfig+0xf0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d007      	beq.n	800350a <TIM_Base_SetConfig+0xce>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a0c      	ldr	r2, [pc, #48]	@ (8003530 <TIM_Base_SetConfig+0xf4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_Base_SetConfig+0xce>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a0b      	ldr	r2, [pc, #44]	@ (8003534 <TIM_Base_SetConfig+0xf8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d103      	bne.n	8003512 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	615a      	str	r2, [r3, #20]
}
 8003518:	46c0      	nop			@ (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b004      	add	sp, #16
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40012c00 	.word	0x40012c00
 8003524:	40000400 	.word	0x40000400
 8003528:	40002000 	.word	0x40002000
 800352c:	40014000 	.word	0x40014000
 8003530:	40014400 	.word	0x40014400
 8003534:	40014800 	.word	0x40014800
 8003538:	fffffcff 	.word	0xfffffcff

0800353c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	2201      	movs	r2, #1
 8003554:	4393      	bics	r3, r2
 8003556:	001a      	movs	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	22f0      	movs	r2, #240	@ 0xf0
 8003566:	4393      	bics	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	220a      	movs	r2, #10
 8003578:	4393      	bics	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	46c0      	nop			@ (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b006      	add	sp, #24
 8003596:	bd80      	pop	{r7, pc}

08003598 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	2210      	movs	r2, #16
 80035aa:	4393      	bics	r3, r2
 80035ac:	001a      	movs	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	4a0d      	ldr	r2, [pc, #52]	@ (80035f8 <TIM_TI2_ConfigInputStage+0x60>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	031b      	lsls	r3, r3, #12
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	22a0      	movs	r2, #160	@ 0xa0
 80035d4:	4393      	bics	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	621a      	str	r2, [r3, #32]
}
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b006      	add	sp, #24
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	ffff0fff 	.word	0xffff0fff

080035fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2270      	movs	r2, #112	@ 0x70
 8003610:	4393      	bics	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	2207      	movs	r2, #7
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	609a      	str	r2, [r3, #8]
}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b004      	add	sp, #16
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	4a09      	ldr	r2, [pc, #36]	@ (800366c <TIM_ETR_SetConfig+0x3c>)
 8003648:	4013      	ands	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	021a      	lsls	r2, r3, #8
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	431a      	orrs	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	609a      	str	r2, [r3, #8]
}
 8003664:	46c0      	nop			@ (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	b006      	add	sp, #24
 800366a:	bd80      	pop	{r7, pc}
 800366c:	ffff00ff 	.word	0xffff00ff

08003670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	223c      	movs	r2, #60	@ 0x3c
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003684:	2302      	movs	r3, #2
 8003686:	e047      	b.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	223c      	movs	r2, #60	@ 0x3c
 800368c:	2101      	movs	r1, #1
 800368e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	223d      	movs	r2, #61	@ 0x3d
 8003694:	2102      	movs	r1, #2
 8003696:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2270      	movs	r2, #112	@ 0x70
 80036ac:	4393      	bics	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a16      	ldr	r2, [pc, #88]	@ (8003720 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00f      	beq.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	2380      	movs	r3, #128	@ 0x80
 80036d2:	05db      	lsls	r3, r3, #23
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d009      	beq.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a11      	ldr	r2, [pc, #68]	@ (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a10      	ldr	r2, [pc, #64]	@ (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d10c      	bne.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2280      	movs	r2, #128	@ 0x80
 80036f0:	4393      	bics	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	223d      	movs	r2, #61	@ 0x3d
 800370a:	2101      	movs	r1, #1
 800370c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	223c      	movs	r2, #60	@ 0x3c
 8003712:	2100      	movs	r1, #0
 8003714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	b004      	add	sp, #16
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40000400 	.word	0x40000400
 8003728:	40014000 	.word	0x40014000

0800372c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003734:	46c0      	nop			@ (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	b002      	add	sp, #8
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003744:	46c0      	nop			@ (mov r8, r8)
 8003746:	46bd      	mov	sp, r7
 8003748:	b002      	add	sp, #8
 800374a:	bd80      	pop	{r7, pc}

0800374c <memset>:
 800374c:	0003      	movs	r3, r0
 800374e:	1882      	adds	r2, r0, r2
 8003750:	4293      	cmp	r3, r2
 8003752:	d100      	bne.n	8003756 <memset+0xa>
 8003754:	4770      	bx	lr
 8003756:	7019      	strb	r1, [r3, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	e7f9      	b.n	8003750 <memset+0x4>

0800375c <__libc_init_array>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	2600      	movs	r6, #0
 8003760:	4c0c      	ldr	r4, [pc, #48]	@ (8003794 <__libc_init_array+0x38>)
 8003762:	4d0d      	ldr	r5, [pc, #52]	@ (8003798 <__libc_init_array+0x3c>)
 8003764:	1b64      	subs	r4, r4, r5
 8003766:	10a4      	asrs	r4, r4, #2
 8003768:	42a6      	cmp	r6, r4
 800376a:	d109      	bne.n	8003780 <__libc_init_array+0x24>
 800376c:	2600      	movs	r6, #0
 800376e:	f000 f819 	bl	80037a4 <_init>
 8003772:	4c0a      	ldr	r4, [pc, #40]	@ (800379c <__libc_init_array+0x40>)
 8003774:	4d0a      	ldr	r5, [pc, #40]	@ (80037a0 <__libc_init_array+0x44>)
 8003776:	1b64      	subs	r4, r4, r5
 8003778:	10a4      	asrs	r4, r4, #2
 800377a:	42a6      	cmp	r6, r4
 800377c:	d105      	bne.n	800378a <__libc_init_array+0x2e>
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	00b3      	lsls	r3, r6, #2
 8003782:	58eb      	ldr	r3, [r5, r3]
 8003784:	4798      	blx	r3
 8003786:	3601      	adds	r6, #1
 8003788:	e7ee      	b.n	8003768 <__libc_init_array+0xc>
 800378a:	00b3      	lsls	r3, r6, #2
 800378c:	58eb      	ldr	r3, [r5, r3]
 800378e:	4798      	blx	r3
 8003790:	3601      	adds	r6, #1
 8003792:	e7f2      	b.n	800377a <__libc_init_array+0x1e>
 8003794:	080038a8 	.word	0x080038a8
 8003798:	080038a8 	.word	0x080038a8
 800379c:	080038ac 	.word	0x080038ac
 80037a0:	080038a8 	.word	0x080038a8

080037a4 <_init>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr

080037b0 <_fini>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr
