
batteryCharge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003c70  08003c70  00004c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca0  08003ca0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ca0  08003ca0  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ca0  08003ca0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca0  08003ca0  00004ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ca4  08003ca4  00004ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ca8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08003cb4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003cb4  0000514c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccd9  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0d  00000000  00000000  00011d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00013b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b38  00000000  00000000  00014960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190cb  00000000  00000000  00015498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110bd  00000000  00000000  0002e563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939cc  00000000  00000000  0003f620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2fec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034ac  00000000  00000000  000d3030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d64dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c58 	.word	0x08003c58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003c58 	.word	0x08003c58

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_dmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	46de      	mov	lr, fp
 8000226:	464e      	mov	r6, r9
 8000228:	4645      	mov	r5, r8
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	001f      	movs	r7, r3
 800022e:	030b      	lsls	r3, r1, #12
 8000230:	0b1b      	lsrs	r3, r3, #12
 8000232:	0016      	movs	r6, r2
 8000234:	469a      	mov	sl, r3
 8000236:	0fca      	lsrs	r2, r1, #31
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	0004      	movs	r4, r0
 800023c:	4693      	mov	fp, r2
 800023e:	b087      	sub	sp, #28
 8000240:	0d5b      	lsrs	r3, r3, #21
 8000242:	d100      	bne.n	8000246 <__aeabi_dmul+0x26>
 8000244:	e0d5      	b.n	80003f2 <__aeabi_dmul+0x1d2>
 8000246:	4abb      	ldr	r2, [pc, #748]	@ (8000534 <__aeabi_dmul+0x314>)
 8000248:	4293      	cmp	r3, r2
 800024a:	d100      	bne.n	800024e <__aeabi_dmul+0x2e>
 800024c:	e0f8      	b.n	8000440 <__aeabi_dmul+0x220>
 800024e:	4651      	mov	r1, sl
 8000250:	0f42      	lsrs	r2, r0, #29
 8000252:	00c9      	lsls	r1, r1, #3
 8000254:	430a      	orrs	r2, r1
 8000256:	2180      	movs	r1, #128	@ 0x80
 8000258:	0409      	lsls	r1, r1, #16
 800025a:	4311      	orrs	r1, r2
 800025c:	00c2      	lsls	r2, r0, #3
 800025e:	4691      	mov	r9, r2
 8000260:	4ab5      	ldr	r2, [pc, #724]	@ (8000538 <__aeabi_dmul+0x318>)
 8000262:	468a      	mov	sl, r1
 8000264:	189d      	adds	r5, r3, r2
 8000266:	2300      	movs	r3, #0
 8000268:	4698      	mov	r8, r3
 800026a:	9302      	str	r3, [sp, #8]
 800026c:	033c      	lsls	r4, r7, #12
 800026e:	007b      	lsls	r3, r7, #1
 8000270:	0ffa      	lsrs	r2, r7, #31
 8000272:	0030      	movs	r0, r6
 8000274:	0b24      	lsrs	r4, r4, #12
 8000276:	0d5b      	lsrs	r3, r3, #21
 8000278:	9200      	str	r2, [sp, #0]
 800027a:	d100      	bne.n	800027e <__aeabi_dmul+0x5e>
 800027c:	e096      	b.n	80003ac <__aeabi_dmul+0x18c>
 800027e:	4aad      	ldr	r2, [pc, #692]	@ (8000534 <__aeabi_dmul+0x314>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d031      	beq.n	80002e8 <__aeabi_dmul+0xc8>
 8000284:	0f72      	lsrs	r2, r6, #29
 8000286:	00e4      	lsls	r4, r4, #3
 8000288:	4322      	orrs	r2, r4
 800028a:	2480      	movs	r4, #128	@ 0x80
 800028c:	0424      	lsls	r4, r4, #16
 800028e:	4314      	orrs	r4, r2
 8000290:	4aa9      	ldr	r2, [pc, #676]	@ (8000538 <__aeabi_dmul+0x318>)
 8000292:	00f0      	lsls	r0, r6, #3
 8000294:	4694      	mov	ip, r2
 8000296:	4463      	add	r3, ip
 8000298:	195b      	adds	r3, r3, r5
 800029a:	1c5a      	adds	r2, r3, #1
 800029c:	9201      	str	r2, [sp, #4]
 800029e:	4642      	mov	r2, r8
 80002a0:	2600      	movs	r6, #0
 80002a2:	2a0a      	cmp	r2, #10
 80002a4:	dc42      	bgt.n	800032c <__aeabi_dmul+0x10c>
 80002a6:	465a      	mov	r2, fp
 80002a8:	9900      	ldr	r1, [sp, #0]
 80002aa:	404a      	eors	r2, r1
 80002ac:	4693      	mov	fp, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	2a02      	cmp	r2, #2
 80002b2:	dc32      	bgt.n	800031a <__aeabi_dmul+0xfa>
 80002b4:	3a01      	subs	r2, #1
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	d900      	bls.n	80002bc <__aeabi_dmul+0x9c>
 80002ba:	e149      	b.n	8000550 <__aeabi_dmul+0x330>
 80002bc:	2e02      	cmp	r6, #2
 80002be:	d100      	bne.n	80002c2 <__aeabi_dmul+0xa2>
 80002c0:	e0ca      	b.n	8000458 <__aeabi_dmul+0x238>
 80002c2:	2e01      	cmp	r6, #1
 80002c4:	d13d      	bne.n	8000342 <__aeabi_dmul+0x122>
 80002c6:	2300      	movs	r3, #0
 80002c8:	2400      	movs	r4, #0
 80002ca:	2200      	movs	r2, #0
 80002cc:	0010      	movs	r0, r2
 80002ce:	465a      	mov	r2, fp
 80002d0:	051b      	lsls	r3, r3, #20
 80002d2:	4323      	orrs	r3, r4
 80002d4:	07d2      	lsls	r2, r2, #31
 80002d6:	4313      	orrs	r3, r2
 80002d8:	0019      	movs	r1, r3
 80002da:	b007      	add	sp, #28
 80002dc:	bcf0      	pop	{r4, r5, r6, r7}
 80002de:	46bb      	mov	fp, r7
 80002e0:	46b2      	mov	sl, r6
 80002e2:	46a9      	mov	r9, r5
 80002e4:	46a0      	mov	r8, r4
 80002e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e8:	4b92      	ldr	r3, [pc, #584]	@ (8000534 <__aeabi_dmul+0x314>)
 80002ea:	4326      	orrs	r6, r4
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d100      	bne.n	80002f4 <__aeabi_dmul+0xd4>
 80002f2:	e0bb      	b.n	800046c <__aeabi_dmul+0x24c>
 80002f4:	2203      	movs	r2, #3
 80002f6:	4641      	mov	r1, r8
 80002f8:	4311      	orrs	r1, r2
 80002fa:	465a      	mov	r2, fp
 80002fc:	4688      	mov	r8, r1
 80002fe:	9900      	ldr	r1, [sp, #0]
 8000300:	404a      	eors	r2, r1
 8000302:	2180      	movs	r1, #128	@ 0x80
 8000304:	0109      	lsls	r1, r1, #4
 8000306:	468c      	mov	ip, r1
 8000308:	0029      	movs	r1, r5
 800030a:	4461      	add	r1, ip
 800030c:	9101      	str	r1, [sp, #4]
 800030e:	4641      	mov	r1, r8
 8000310:	290a      	cmp	r1, #10
 8000312:	dd00      	ble.n	8000316 <__aeabi_dmul+0xf6>
 8000314:	e233      	b.n	800077e <__aeabi_dmul+0x55e>
 8000316:	4693      	mov	fp, r2
 8000318:	2603      	movs	r6, #3
 800031a:	4642      	mov	r2, r8
 800031c:	2701      	movs	r7, #1
 800031e:	4097      	lsls	r7, r2
 8000320:	21a6      	movs	r1, #166	@ 0xa6
 8000322:	003a      	movs	r2, r7
 8000324:	00c9      	lsls	r1, r1, #3
 8000326:	400a      	ands	r2, r1
 8000328:	420f      	tst	r7, r1
 800032a:	d031      	beq.n	8000390 <__aeabi_dmul+0x170>
 800032c:	9e02      	ldr	r6, [sp, #8]
 800032e:	2e02      	cmp	r6, #2
 8000330:	d100      	bne.n	8000334 <__aeabi_dmul+0x114>
 8000332:	e235      	b.n	80007a0 <__aeabi_dmul+0x580>
 8000334:	2e03      	cmp	r6, #3
 8000336:	d100      	bne.n	800033a <__aeabi_dmul+0x11a>
 8000338:	e1d2      	b.n	80006e0 <__aeabi_dmul+0x4c0>
 800033a:	4654      	mov	r4, sl
 800033c:	4648      	mov	r0, r9
 800033e:	2e01      	cmp	r6, #1
 8000340:	d0c1      	beq.n	80002c6 <__aeabi_dmul+0xa6>
 8000342:	9a01      	ldr	r2, [sp, #4]
 8000344:	4b7d      	ldr	r3, [pc, #500]	@ (800053c <__aeabi_dmul+0x31c>)
 8000346:	4694      	mov	ip, r2
 8000348:	4463      	add	r3, ip
 800034a:	2b00      	cmp	r3, #0
 800034c:	dc00      	bgt.n	8000350 <__aeabi_dmul+0x130>
 800034e:	e0c0      	b.n	80004d2 <__aeabi_dmul+0x2b2>
 8000350:	0742      	lsls	r2, r0, #29
 8000352:	d009      	beq.n	8000368 <__aeabi_dmul+0x148>
 8000354:	220f      	movs	r2, #15
 8000356:	4002      	ands	r2, r0
 8000358:	2a04      	cmp	r2, #4
 800035a:	d005      	beq.n	8000368 <__aeabi_dmul+0x148>
 800035c:	1d02      	adds	r2, r0, #4
 800035e:	4282      	cmp	r2, r0
 8000360:	4180      	sbcs	r0, r0
 8000362:	4240      	negs	r0, r0
 8000364:	1824      	adds	r4, r4, r0
 8000366:	0010      	movs	r0, r2
 8000368:	01e2      	lsls	r2, r4, #7
 800036a:	d506      	bpl.n	800037a <__aeabi_dmul+0x15a>
 800036c:	4b74      	ldr	r3, [pc, #464]	@ (8000540 <__aeabi_dmul+0x320>)
 800036e:	9a01      	ldr	r2, [sp, #4]
 8000370:	401c      	ands	r4, r3
 8000372:	2380      	movs	r3, #128	@ 0x80
 8000374:	4694      	mov	ip, r2
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	4463      	add	r3, ip
 800037a:	4a72      	ldr	r2, [pc, #456]	@ (8000544 <__aeabi_dmul+0x324>)
 800037c:	4293      	cmp	r3, r2
 800037e:	dc6b      	bgt.n	8000458 <__aeabi_dmul+0x238>
 8000380:	0762      	lsls	r2, r4, #29
 8000382:	08c0      	lsrs	r0, r0, #3
 8000384:	0264      	lsls	r4, r4, #9
 8000386:	055b      	lsls	r3, r3, #21
 8000388:	4302      	orrs	r2, r0
 800038a:	0b24      	lsrs	r4, r4, #12
 800038c:	0d5b      	lsrs	r3, r3, #21
 800038e:	e79d      	b.n	80002cc <__aeabi_dmul+0xac>
 8000390:	2190      	movs	r1, #144	@ 0x90
 8000392:	0089      	lsls	r1, r1, #2
 8000394:	420f      	tst	r7, r1
 8000396:	d163      	bne.n	8000460 <__aeabi_dmul+0x240>
 8000398:	2288      	movs	r2, #136	@ 0x88
 800039a:	423a      	tst	r2, r7
 800039c:	d100      	bne.n	80003a0 <__aeabi_dmul+0x180>
 800039e:	e0d7      	b.n	8000550 <__aeabi_dmul+0x330>
 80003a0:	9b00      	ldr	r3, [sp, #0]
 80003a2:	46a2      	mov	sl, r4
 80003a4:	469b      	mov	fp, r3
 80003a6:	4681      	mov	r9, r0
 80003a8:	9602      	str	r6, [sp, #8]
 80003aa:	e7bf      	b.n	800032c <__aeabi_dmul+0x10c>
 80003ac:	0023      	movs	r3, r4
 80003ae:	4333      	orrs	r3, r6
 80003b0:	d100      	bne.n	80003b4 <__aeabi_dmul+0x194>
 80003b2:	e07f      	b.n	80004b4 <__aeabi_dmul+0x294>
 80003b4:	2c00      	cmp	r4, #0
 80003b6:	d100      	bne.n	80003ba <__aeabi_dmul+0x19a>
 80003b8:	e1ad      	b.n	8000716 <__aeabi_dmul+0x4f6>
 80003ba:	0020      	movs	r0, r4
 80003bc:	f000 faaa 	bl	8000914 <__clzsi2>
 80003c0:	0002      	movs	r2, r0
 80003c2:	0003      	movs	r3, r0
 80003c4:	3a0b      	subs	r2, #11
 80003c6:	201d      	movs	r0, #29
 80003c8:	0019      	movs	r1, r3
 80003ca:	1a82      	subs	r2, r0, r2
 80003cc:	0030      	movs	r0, r6
 80003ce:	3908      	subs	r1, #8
 80003d0:	40d0      	lsrs	r0, r2
 80003d2:	408c      	lsls	r4, r1
 80003d4:	4304      	orrs	r4, r0
 80003d6:	0030      	movs	r0, r6
 80003d8:	4088      	lsls	r0, r1
 80003da:	4a5b      	ldr	r2, [pc, #364]	@ (8000548 <__aeabi_dmul+0x328>)
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	4694      	mov	ip, r2
 80003e0:	4463      	add	r3, ip
 80003e2:	1c5a      	adds	r2, r3, #1
 80003e4:	9201      	str	r2, [sp, #4]
 80003e6:	4642      	mov	r2, r8
 80003e8:	2600      	movs	r6, #0
 80003ea:	2a0a      	cmp	r2, #10
 80003ec:	dc00      	bgt.n	80003f0 <__aeabi_dmul+0x1d0>
 80003ee:	e75a      	b.n	80002a6 <__aeabi_dmul+0x86>
 80003f0:	e79c      	b.n	800032c <__aeabi_dmul+0x10c>
 80003f2:	4653      	mov	r3, sl
 80003f4:	4303      	orrs	r3, r0
 80003f6:	4699      	mov	r9, r3
 80003f8:	d054      	beq.n	80004a4 <__aeabi_dmul+0x284>
 80003fa:	4653      	mov	r3, sl
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_dmul+0x1e2>
 8000400:	e177      	b.n	80006f2 <__aeabi_dmul+0x4d2>
 8000402:	4650      	mov	r0, sl
 8000404:	f000 fa86 	bl	8000914 <__clzsi2>
 8000408:	230b      	movs	r3, #11
 800040a:	425b      	negs	r3, r3
 800040c:	469c      	mov	ip, r3
 800040e:	0002      	movs	r2, r0
 8000410:	4484      	add	ip, r0
 8000412:	0011      	movs	r1, r2
 8000414:	4650      	mov	r0, sl
 8000416:	3908      	subs	r1, #8
 8000418:	4088      	lsls	r0, r1
 800041a:	231d      	movs	r3, #29
 800041c:	4680      	mov	r8, r0
 800041e:	4660      	mov	r0, ip
 8000420:	1a1b      	subs	r3, r3, r0
 8000422:	0020      	movs	r0, r4
 8000424:	40d8      	lsrs	r0, r3
 8000426:	0003      	movs	r3, r0
 8000428:	4640      	mov	r0, r8
 800042a:	4303      	orrs	r3, r0
 800042c:	469a      	mov	sl, r3
 800042e:	0023      	movs	r3, r4
 8000430:	408b      	lsls	r3, r1
 8000432:	4699      	mov	r9, r3
 8000434:	2300      	movs	r3, #0
 8000436:	4d44      	ldr	r5, [pc, #272]	@ (8000548 <__aeabi_dmul+0x328>)
 8000438:	4698      	mov	r8, r3
 800043a:	1aad      	subs	r5, r5, r2
 800043c:	9302      	str	r3, [sp, #8]
 800043e:	e715      	b.n	800026c <__aeabi_dmul+0x4c>
 8000440:	4652      	mov	r2, sl
 8000442:	4302      	orrs	r2, r0
 8000444:	4691      	mov	r9, r2
 8000446:	d126      	bne.n	8000496 <__aeabi_dmul+0x276>
 8000448:	2200      	movs	r2, #0
 800044a:	001d      	movs	r5, r3
 800044c:	2302      	movs	r3, #2
 800044e:	4692      	mov	sl, r2
 8000450:	3208      	adds	r2, #8
 8000452:	4690      	mov	r8, r2
 8000454:	9302      	str	r3, [sp, #8]
 8000456:	e709      	b.n	800026c <__aeabi_dmul+0x4c>
 8000458:	2400      	movs	r4, #0
 800045a:	2200      	movs	r2, #0
 800045c:	4b35      	ldr	r3, [pc, #212]	@ (8000534 <__aeabi_dmul+0x314>)
 800045e:	e735      	b.n	80002cc <__aeabi_dmul+0xac>
 8000460:	2300      	movs	r3, #0
 8000462:	2480      	movs	r4, #128	@ 0x80
 8000464:	469b      	mov	fp, r3
 8000466:	0324      	lsls	r4, r4, #12
 8000468:	4b32      	ldr	r3, [pc, #200]	@ (8000534 <__aeabi_dmul+0x314>)
 800046a:	e72f      	b.n	80002cc <__aeabi_dmul+0xac>
 800046c:	2202      	movs	r2, #2
 800046e:	4641      	mov	r1, r8
 8000470:	4311      	orrs	r1, r2
 8000472:	2280      	movs	r2, #128	@ 0x80
 8000474:	0112      	lsls	r2, r2, #4
 8000476:	4694      	mov	ip, r2
 8000478:	002a      	movs	r2, r5
 800047a:	4462      	add	r2, ip
 800047c:	4688      	mov	r8, r1
 800047e:	9201      	str	r2, [sp, #4]
 8000480:	290a      	cmp	r1, #10
 8000482:	dd00      	ble.n	8000486 <__aeabi_dmul+0x266>
 8000484:	e752      	b.n	800032c <__aeabi_dmul+0x10c>
 8000486:	465a      	mov	r2, fp
 8000488:	2000      	movs	r0, #0
 800048a:	9900      	ldr	r1, [sp, #0]
 800048c:	0004      	movs	r4, r0
 800048e:	404a      	eors	r2, r1
 8000490:	4693      	mov	fp, r2
 8000492:	2602      	movs	r6, #2
 8000494:	e70b      	b.n	80002ae <__aeabi_dmul+0x8e>
 8000496:	220c      	movs	r2, #12
 8000498:	001d      	movs	r5, r3
 800049a:	2303      	movs	r3, #3
 800049c:	4681      	mov	r9, r0
 800049e:	4690      	mov	r8, r2
 80004a0:	9302      	str	r3, [sp, #8]
 80004a2:	e6e3      	b.n	800026c <__aeabi_dmul+0x4c>
 80004a4:	2300      	movs	r3, #0
 80004a6:	469a      	mov	sl, r3
 80004a8:	3304      	adds	r3, #4
 80004aa:	4698      	mov	r8, r3
 80004ac:	3b03      	subs	r3, #3
 80004ae:	2500      	movs	r5, #0
 80004b0:	9302      	str	r3, [sp, #8]
 80004b2:	e6db      	b.n	800026c <__aeabi_dmul+0x4c>
 80004b4:	4642      	mov	r2, r8
 80004b6:	3301      	adds	r3, #1
 80004b8:	431a      	orrs	r2, r3
 80004ba:	002b      	movs	r3, r5
 80004bc:	4690      	mov	r8, r2
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	9201      	str	r2, [sp, #4]
 80004c2:	4642      	mov	r2, r8
 80004c4:	2400      	movs	r4, #0
 80004c6:	2000      	movs	r0, #0
 80004c8:	2601      	movs	r6, #1
 80004ca:	2a0a      	cmp	r2, #10
 80004cc:	dc00      	bgt.n	80004d0 <__aeabi_dmul+0x2b0>
 80004ce:	e6ea      	b.n	80002a6 <__aeabi_dmul+0x86>
 80004d0:	e72c      	b.n	800032c <__aeabi_dmul+0x10c>
 80004d2:	2201      	movs	r2, #1
 80004d4:	1ad2      	subs	r2, r2, r3
 80004d6:	2a38      	cmp	r2, #56	@ 0x38
 80004d8:	dd00      	ble.n	80004dc <__aeabi_dmul+0x2bc>
 80004da:	e6f4      	b.n	80002c6 <__aeabi_dmul+0xa6>
 80004dc:	2a1f      	cmp	r2, #31
 80004de:	dc00      	bgt.n	80004e2 <__aeabi_dmul+0x2c2>
 80004e0:	e12a      	b.n	8000738 <__aeabi_dmul+0x518>
 80004e2:	211f      	movs	r1, #31
 80004e4:	4249      	negs	r1, r1
 80004e6:	1acb      	subs	r3, r1, r3
 80004e8:	0021      	movs	r1, r4
 80004ea:	40d9      	lsrs	r1, r3
 80004ec:	000b      	movs	r3, r1
 80004ee:	2a20      	cmp	r2, #32
 80004f0:	d005      	beq.n	80004fe <__aeabi_dmul+0x2de>
 80004f2:	4a16      	ldr	r2, [pc, #88]	@ (800054c <__aeabi_dmul+0x32c>)
 80004f4:	9d01      	ldr	r5, [sp, #4]
 80004f6:	4694      	mov	ip, r2
 80004f8:	4465      	add	r5, ip
 80004fa:	40ac      	lsls	r4, r5
 80004fc:	4320      	orrs	r0, r4
 80004fe:	1e42      	subs	r2, r0, #1
 8000500:	4190      	sbcs	r0, r2
 8000502:	4318      	orrs	r0, r3
 8000504:	2307      	movs	r3, #7
 8000506:	0019      	movs	r1, r3
 8000508:	2400      	movs	r4, #0
 800050a:	4001      	ands	r1, r0
 800050c:	4203      	tst	r3, r0
 800050e:	d00c      	beq.n	800052a <__aeabi_dmul+0x30a>
 8000510:	230f      	movs	r3, #15
 8000512:	4003      	ands	r3, r0
 8000514:	2b04      	cmp	r3, #4
 8000516:	d100      	bne.n	800051a <__aeabi_dmul+0x2fa>
 8000518:	e140      	b.n	800079c <__aeabi_dmul+0x57c>
 800051a:	1d03      	adds	r3, r0, #4
 800051c:	4283      	cmp	r3, r0
 800051e:	41a4      	sbcs	r4, r4
 8000520:	0018      	movs	r0, r3
 8000522:	4264      	negs	r4, r4
 8000524:	0761      	lsls	r1, r4, #29
 8000526:	0264      	lsls	r4, r4, #9
 8000528:	0b24      	lsrs	r4, r4, #12
 800052a:	08c2      	lsrs	r2, r0, #3
 800052c:	2300      	movs	r3, #0
 800052e:	430a      	orrs	r2, r1
 8000530:	e6cc      	b.n	80002cc <__aeabi_dmul+0xac>
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	000007ff 	.word	0x000007ff
 8000538:	fffffc01 	.word	0xfffffc01
 800053c:	000003ff 	.word	0x000003ff
 8000540:	feffffff 	.word	0xfeffffff
 8000544:	000007fe 	.word	0x000007fe
 8000548:	fffffc0d 	.word	0xfffffc0d
 800054c:	0000043e 	.word	0x0000043e
 8000550:	4649      	mov	r1, r9
 8000552:	464a      	mov	r2, r9
 8000554:	0409      	lsls	r1, r1, #16
 8000556:	0c09      	lsrs	r1, r1, #16
 8000558:	000d      	movs	r5, r1
 800055a:	0c16      	lsrs	r6, r2, #16
 800055c:	0c02      	lsrs	r2, r0, #16
 800055e:	0400      	lsls	r0, r0, #16
 8000560:	0c00      	lsrs	r0, r0, #16
 8000562:	4345      	muls	r5, r0
 8000564:	46ac      	mov	ip, r5
 8000566:	0005      	movs	r5, r0
 8000568:	4375      	muls	r5, r6
 800056a:	46a8      	mov	r8, r5
 800056c:	0015      	movs	r5, r2
 800056e:	000f      	movs	r7, r1
 8000570:	4375      	muls	r5, r6
 8000572:	9200      	str	r2, [sp, #0]
 8000574:	9502      	str	r5, [sp, #8]
 8000576:	002a      	movs	r2, r5
 8000578:	9d00      	ldr	r5, [sp, #0]
 800057a:	436f      	muls	r7, r5
 800057c:	4665      	mov	r5, ip
 800057e:	0c2d      	lsrs	r5, r5, #16
 8000580:	46a9      	mov	r9, r5
 8000582:	4447      	add	r7, r8
 8000584:	444f      	add	r7, r9
 8000586:	45b8      	cmp	r8, r7
 8000588:	d905      	bls.n	8000596 <__aeabi_dmul+0x376>
 800058a:	0015      	movs	r5, r2
 800058c:	2280      	movs	r2, #128	@ 0x80
 800058e:	0252      	lsls	r2, r2, #9
 8000590:	4690      	mov	r8, r2
 8000592:	4445      	add	r5, r8
 8000594:	9502      	str	r5, [sp, #8]
 8000596:	0c3d      	lsrs	r5, r7, #16
 8000598:	9503      	str	r5, [sp, #12]
 800059a:	4665      	mov	r5, ip
 800059c:	042d      	lsls	r5, r5, #16
 800059e:	043f      	lsls	r7, r7, #16
 80005a0:	0c2d      	lsrs	r5, r5, #16
 80005a2:	46ac      	mov	ip, r5
 80005a4:	003d      	movs	r5, r7
 80005a6:	4465      	add	r5, ip
 80005a8:	9504      	str	r5, [sp, #16]
 80005aa:	0c25      	lsrs	r5, r4, #16
 80005ac:	0424      	lsls	r4, r4, #16
 80005ae:	0c24      	lsrs	r4, r4, #16
 80005b0:	46ac      	mov	ip, r5
 80005b2:	0025      	movs	r5, r4
 80005b4:	4375      	muls	r5, r6
 80005b6:	46a8      	mov	r8, r5
 80005b8:	4665      	mov	r5, ip
 80005ba:	000f      	movs	r7, r1
 80005bc:	4369      	muls	r1, r5
 80005be:	4441      	add	r1, r8
 80005c0:	4689      	mov	r9, r1
 80005c2:	4367      	muls	r7, r4
 80005c4:	0c39      	lsrs	r1, r7, #16
 80005c6:	4449      	add	r1, r9
 80005c8:	436e      	muls	r6, r5
 80005ca:	4588      	cmp	r8, r1
 80005cc:	d903      	bls.n	80005d6 <__aeabi_dmul+0x3b6>
 80005ce:	2280      	movs	r2, #128	@ 0x80
 80005d0:	0252      	lsls	r2, r2, #9
 80005d2:	4690      	mov	r8, r2
 80005d4:	4446      	add	r6, r8
 80005d6:	0c0d      	lsrs	r5, r1, #16
 80005d8:	46a8      	mov	r8, r5
 80005da:	0035      	movs	r5, r6
 80005dc:	4445      	add	r5, r8
 80005de:	9505      	str	r5, [sp, #20]
 80005e0:	9d03      	ldr	r5, [sp, #12]
 80005e2:	043f      	lsls	r7, r7, #16
 80005e4:	46a8      	mov	r8, r5
 80005e6:	0c3f      	lsrs	r7, r7, #16
 80005e8:	0409      	lsls	r1, r1, #16
 80005ea:	19c9      	adds	r1, r1, r7
 80005ec:	4488      	add	r8, r1
 80005ee:	4645      	mov	r5, r8
 80005f0:	9503      	str	r5, [sp, #12]
 80005f2:	4655      	mov	r5, sl
 80005f4:	042e      	lsls	r6, r5, #16
 80005f6:	0c36      	lsrs	r6, r6, #16
 80005f8:	0c2f      	lsrs	r7, r5, #16
 80005fa:	0035      	movs	r5, r6
 80005fc:	4345      	muls	r5, r0
 80005fe:	4378      	muls	r0, r7
 8000600:	4681      	mov	r9, r0
 8000602:	0038      	movs	r0, r7
 8000604:	46a8      	mov	r8, r5
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	46aa      	mov	sl, r5
 800060a:	9a00      	ldr	r2, [sp, #0]
 800060c:	4350      	muls	r0, r2
 800060e:	4372      	muls	r2, r6
 8000610:	444a      	add	r2, r9
 8000612:	4452      	add	r2, sl
 8000614:	4591      	cmp	r9, r2
 8000616:	d903      	bls.n	8000620 <__aeabi_dmul+0x400>
 8000618:	2580      	movs	r5, #128	@ 0x80
 800061a:	026d      	lsls	r5, r5, #9
 800061c:	46a9      	mov	r9, r5
 800061e:	4448      	add	r0, r9
 8000620:	0c15      	lsrs	r5, r2, #16
 8000622:	46a9      	mov	r9, r5
 8000624:	4645      	mov	r5, r8
 8000626:	042d      	lsls	r5, r5, #16
 8000628:	0c2d      	lsrs	r5, r5, #16
 800062a:	46a8      	mov	r8, r5
 800062c:	4665      	mov	r5, ip
 800062e:	437d      	muls	r5, r7
 8000630:	0412      	lsls	r2, r2, #16
 8000632:	4448      	add	r0, r9
 8000634:	4490      	add	r8, r2
 8000636:	46a9      	mov	r9, r5
 8000638:	0032      	movs	r2, r6
 800063a:	4665      	mov	r5, ip
 800063c:	4362      	muls	r2, r4
 800063e:	436e      	muls	r6, r5
 8000640:	437c      	muls	r4, r7
 8000642:	0c17      	lsrs	r7, r2, #16
 8000644:	1936      	adds	r6, r6, r4
 8000646:	19bf      	adds	r7, r7, r6
 8000648:	42bc      	cmp	r4, r7
 800064a:	d903      	bls.n	8000654 <__aeabi_dmul+0x434>
 800064c:	2480      	movs	r4, #128	@ 0x80
 800064e:	0264      	lsls	r4, r4, #9
 8000650:	46a4      	mov	ip, r4
 8000652:	44e1      	add	r9, ip
 8000654:	9c02      	ldr	r4, [sp, #8]
 8000656:	9e03      	ldr	r6, [sp, #12]
 8000658:	46a4      	mov	ip, r4
 800065a:	9d05      	ldr	r5, [sp, #20]
 800065c:	4466      	add	r6, ip
 800065e:	428e      	cmp	r6, r1
 8000660:	4189      	sbcs	r1, r1
 8000662:	46ac      	mov	ip, r5
 8000664:	0412      	lsls	r2, r2, #16
 8000666:	043c      	lsls	r4, r7, #16
 8000668:	0c12      	lsrs	r2, r2, #16
 800066a:	18a2      	adds	r2, r4, r2
 800066c:	4462      	add	r2, ip
 800066e:	4249      	negs	r1, r1
 8000670:	1854      	adds	r4, r2, r1
 8000672:	4446      	add	r6, r8
 8000674:	46a4      	mov	ip, r4
 8000676:	4546      	cmp	r6, r8
 8000678:	41a4      	sbcs	r4, r4
 800067a:	4682      	mov	sl, r0
 800067c:	4264      	negs	r4, r4
 800067e:	46a0      	mov	r8, r4
 8000680:	42aa      	cmp	r2, r5
 8000682:	4192      	sbcs	r2, r2
 8000684:	458c      	cmp	ip, r1
 8000686:	4189      	sbcs	r1, r1
 8000688:	44e2      	add	sl, ip
 800068a:	44d0      	add	r8, sl
 800068c:	4249      	negs	r1, r1
 800068e:	4252      	negs	r2, r2
 8000690:	430a      	orrs	r2, r1
 8000692:	45a0      	cmp	r8, r4
 8000694:	41a4      	sbcs	r4, r4
 8000696:	4582      	cmp	sl, r0
 8000698:	4189      	sbcs	r1, r1
 800069a:	4264      	negs	r4, r4
 800069c:	4249      	negs	r1, r1
 800069e:	430c      	orrs	r4, r1
 80006a0:	4641      	mov	r1, r8
 80006a2:	0c3f      	lsrs	r7, r7, #16
 80006a4:	19d2      	adds	r2, r2, r7
 80006a6:	1912      	adds	r2, r2, r4
 80006a8:	0dcc      	lsrs	r4, r1, #23
 80006aa:	9904      	ldr	r1, [sp, #16]
 80006ac:	0270      	lsls	r0, r6, #9
 80006ae:	4308      	orrs	r0, r1
 80006b0:	1e41      	subs	r1, r0, #1
 80006b2:	4188      	sbcs	r0, r1
 80006b4:	4641      	mov	r1, r8
 80006b6:	444a      	add	r2, r9
 80006b8:	0df6      	lsrs	r6, r6, #23
 80006ba:	0252      	lsls	r2, r2, #9
 80006bc:	4330      	orrs	r0, r6
 80006be:	0249      	lsls	r1, r1, #9
 80006c0:	4314      	orrs	r4, r2
 80006c2:	4308      	orrs	r0, r1
 80006c4:	01d2      	lsls	r2, r2, #7
 80006c6:	d535      	bpl.n	8000734 <__aeabi_dmul+0x514>
 80006c8:	2201      	movs	r2, #1
 80006ca:	0843      	lsrs	r3, r0, #1
 80006cc:	4002      	ands	r2, r0
 80006ce:	4313      	orrs	r3, r2
 80006d0:	07e0      	lsls	r0, r4, #31
 80006d2:	4318      	orrs	r0, r3
 80006d4:	0864      	lsrs	r4, r4, #1
 80006d6:	e634      	b.n	8000342 <__aeabi_dmul+0x122>
 80006d8:	9b00      	ldr	r3, [sp, #0]
 80006da:	46a2      	mov	sl, r4
 80006dc:	469b      	mov	fp, r3
 80006de:	4681      	mov	r9, r0
 80006e0:	2480      	movs	r4, #128	@ 0x80
 80006e2:	4653      	mov	r3, sl
 80006e4:	0324      	lsls	r4, r4, #12
 80006e6:	431c      	orrs	r4, r3
 80006e8:	0324      	lsls	r4, r4, #12
 80006ea:	464a      	mov	r2, r9
 80006ec:	4b2e      	ldr	r3, [pc, #184]	@ (80007a8 <__aeabi_dmul+0x588>)
 80006ee:	0b24      	lsrs	r4, r4, #12
 80006f0:	e5ec      	b.n	80002cc <__aeabi_dmul+0xac>
 80006f2:	f000 f90f 	bl	8000914 <__clzsi2>
 80006f6:	2315      	movs	r3, #21
 80006f8:	469c      	mov	ip, r3
 80006fa:	4484      	add	ip, r0
 80006fc:	0002      	movs	r2, r0
 80006fe:	4663      	mov	r3, ip
 8000700:	3220      	adds	r2, #32
 8000702:	2b1c      	cmp	r3, #28
 8000704:	dc00      	bgt.n	8000708 <__aeabi_dmul+0x4e8>
 8000706:	e684      	b.n	8000412 <__aeabi_dmul+0x1f2>
 8000708:	2300      	movs	r3, #0
 800070a:	4699      	mov	r9, r3
 800070c:	0023      	movs	r3, r4
 800070e:	3808      	subs	r0, #8
 8000710:	4083      	lsls	r3, r0
 8000712:	469a      	mov	sl, r3
 8000714:	e68e      	b.n	8000434 <__aeabi_dmul+0x214>
 8000716:	f000 f8fd 	bl	8000914 <__clzsi2>
 800071a:	0002      	movs	r2, r0
 800071c:	0003      	movs	r3, r0
 800071e:	3215      	adds	r2, #21
 8000720:	3320      	adds	r3, #32
 8000722:	2a1c      	cmp	r2, #28
 8000724:	dc00      	bgt.n	8000728 <__aeabi_dmul+0x508>
 8000726:	e64e      	b.n	80003c6 <__aeabi_dmul+0x1a6>
 8000728:	0002      	movs	r2, r0
 800072a:	0034      	movs	r4, r6
 800072c:	3a08      	subs	r2, #8
 800072e:	2000      	movs	r0, #0
 8000730:	4094      	lsls	r4, r2
 8000732:	e652      	b.n	80003da <__aeabi_dmul+0x1ba>
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	e604      	b.n	8000342 <__aeabi_dmul+0x122>
 8000738:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <__aeabi_dmul+0x58c>)
 800073a:	0021      	movs	r1, r4
 800073c:	469c      	mov	ip, r3
 800073e:	0003      	movs	r3, r0
 8000740:	9d01      	ldr	r5, [sp, #4]
 8000742:	40d3      	lsrs	r3, r2
 8000744:	4465      	add	r5, ip
 8000746:	40a9      	lsls	r1, r5
 8000748:	4319      	orrs	r1, r3
 800074a:	0003      	movs	r3, r0
 800074c:	40ab      	lsls	r3, r5
 800074e:	1e58      	subs	r0, r3, #1
 8000750:	4183      	sbcs	r3, r0
 8000752:	4319      	orrs	r1, r3
 8000754:	0008      	movs	r0, r1
 8000756:	40d4      	lsrs	r4, r2
 8000758:	074b      	lsls	r3, r1, #29
 800075a:	d009      	beq.n	8000770 <__aeabi_dmul+0x550>
 800075c:	230f      	movs	r3, #15
 800075e:	400b      	ands	r3, r1
 8000760:	2b04      	cmp	r3, #4
 8000762:	d005      	beq.n	8000770 <__aeabi_dmul+0x550>
 8000764:	1d0b      	adds	r3, r1, #4
 8000766:	428b      	cmp	r3, r1
 8000768:	4180      	sbcs	r0, r0
 800076a:	4240      	negs	r0, r0
 800076c:	1824      	adds	r4, r4, r0
 800076e:	0018      	movs	r0, r3
 8000770:	0223      	lsls	r3, r4, #8
 8000772:	d400      	bmi.n	8000776 <__aeabi_dmul+0x556>
 8000774:	e6d6      	b.n	8000524 <__aeabi_dmul+0x304>
 8000776:	2301      	movs	r3, #1
 8000778:	2400      	movs	r4, #0
 800077a:	2200      	movs	r2, #0
 800077c:	e5a6      	b.n	80002cc <__aeabi_dmul+0xac>
 800077e:	290f      	cmp	r1, #15
 8000780:	d1aa      	bne.n	80006d8 <__aeabi_dmul+0x4b8>
 8000782:	2380      	movs	r3, #128	@ 0x80
 8000784:	4652      	mov	r2, sl
 8000786:	031b      	lsls	r3, r3, #12
 8000788:	421a      	tst	r2, r3
 800078a:	d0a9      	beq.n	80006e0 <__aeabi_dmul+0x4c0>
 800078c:	421c      	tst	r4, r3
 800078e:	d1a7      	bne.n	80006e0 <__aeabi_dmul+0x4c0>
 8000790:	431c      	orrs	r4, r3
 8000792:	9b00      	ldr	r3, [sp, #0]
 8000794:	0002      	movs	r2, r0
 8000796:	469b      	mov	fp, r3
 8000798:	4b03      	ldr	r3, [pc, #12]	@ (80007a8 <__aeabi_dmul+0x588>)
 800079a:	e597      	b.n	80002cc <__aeabi_dmul+0xac>
 800079c:	2400      	movs	r4, #0
 800079e:	e6c1      	b.n	8000524 <__aeabi_dmul+0x304>
 80007a0:	2400      	movs	r4, #0
 80007a2:	4b01      	ldr	r3, [pc, #4]	@ (80007a8 <__aeabi_dmul+0x588>)
 80007a4:	0022      	movs	r2, r4
 80007a6:	e591      	b.n	80002cc <__aeabi_dmul+0xac>
 80007a8:	000007ff 	.word	0x000007ff
 80007ac:	0000041e 	.word	0x0000041e

080007b0 <__aeabi_i2d>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d016      	beq.n	80007e4 <__aeabi_i2d+0x34>
 80007b6:	17c3      	asrs	r3, r0, #31
 80007b8:	18c5      	adds	r5, r0, r3
 80007ba:	405d      	eors	r5, r3
 80007bc:	0fc4      	lsrs	r4, r0, #31
 80007be:	0028      	movs	r0, r5
 80007c0:	f000 f8a8 	bl	8000914 <__clzsi2>
 80007c4:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <__aeabi_i2d+0x58>)
 80007c6:	1a1b      	subs	r3, r3, r0
 80007c8:	055b      	lsls	r3, r3, #21
 80007ca:	0d5b      	lsrs	r3, r3, #21
 80007cc:	280a      	cmp	r0, #10
 80007ce:	dc14      	bgt.n	80007fa <__aeabi_i2d+0x4a>
 80007d0:	0002      	movs	r2, r0
 80007d2:	002e      	movs	r6, r5
 80007d4:	3215      	adds	r2, #21
 80007d6:	4096      	lsls	r6, r2
 80007d8:	220b      	movs	r2, #11
 80007da:	1a12      	subs	r2, r2, r0
 80007dc:	40d5      	lsrs	r5, r2
 80007de:	032d      	lsls	r5, r5, #12
 80007e0:	0b2d      	lsrs	r5, r5, #12
 80007e2:	e003      	b.n	80007ec <__aeabi_i2d+0x3c>
 80007e4:	2400      	movs	r4, #0
 80007e6:	2300      	movs	r3, #0
 80007e8:	2500      	movs	r5, #0
 80007ea:	2600      	movs	r6, #0
 80007ec:	051b      	lsls	r3, r3, #20
 80007ee:	432b      	orrs	r3, r5
 80007f0:	07e4      	lsls	r4, r4, #31
 80007f2:	4323      	orrs	r3, r4
 80007f4:	0030      	movs	r0, r6
 80007f6:	0019      	movs	r1, r3
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	380b      	subs	r0, #11
 80007fc:	4085      	lsls	r5, r0
 80007fe:	032d      	lsls	r5, r5, #12
 8000800:	2600      	movs	r6, #0
 8000802:	0b2d      	lsrs	r5, r5, #12
 8000804:	e7f2      	b.n	80007ec <__aeabi_i2d+0x3c>
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	0000041e 	.word	0x0000041e

0800080c <__aeabi_d2f>:
 800080c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080e:	004b      	lsls	r3, r1, #1
 8000810:	030f      	lsls	r7, r1, #12
 8000812:	0d5b      	lsrs	r3, r3, #21
 8000814:	4c3b      	ldr	r4, [pc, #236]	@ (8000904 <__aeabi_d2f+0xf8>)
 8000816:	0f45      	lsrs	r5, r0, #29
 8000818:	b083      	sub	sp, #12
 800081a:	0a7f      	lsrs	r7, r7, #9
 800081c:	1c5e      	adds	r6, r3, #1
 800081e:	432f      	orrs	r7, r5
 8000820:	9000      	str	r0, [sp, #0]
 8000822:	9101      	str	r1, [sp, #4]
 8000824:	0fca      	lsrs	r2, r1, #31
 8000826:	00c5      	lsls	r5, r0, #3
 8000828:	4226      	tst	r6, r4
 800082a:	d00b      	beq.n	8000844 <__aeabi_d2f+0x38>
 800082c:	4936      	ldr	r1, [pc, #216]	@ (8000908 <__aeabi_d2f+0xfc>)
 800082e:	185c      	adds	r4, r3, r1
 8000830:	2cfe      	cmp	r4, #254	@ 0xfe
 8000832:	dd13      	ble.n	800085c <__aeabi_d2f+0x50>
 8000834:	20ff      	movs	r0, #255	@ 0xff
 8000836:	2300      	movs	r3, #0
 8000838:	05c0      	lsls	r0, r0, #23
 800083a:	4318      	orrs	r0, r3
 800083c:	07d2      	lsls	r2, r2, #31
 800083e:	4310      	orrs	r0, r2
 8000840:	b003      	add	sp, #12
 8000842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <__aeabi_d2f+0x42>
 8000848:	2000      	movs	r0, #0
 800084a:	2300      	movs	r3, #0
 800084c:	e7f4      	b.n	8000838 <__aeabi_d2f+0x2c>
 800084e:	433d      	orrs	r5, r7
 8000850:	d0f0      	beq.n	8000834 <__aeabi_d2f+0x28>
 8000852:	2380      	movs	r3, #128	@ 0x80
 8000854:	03db      	lsls	r3, r3, #15
 8000856:	20ff      	movs	r0, #255	@ 0xff
 8000858:	433b      	orrs	r3, r7
 800085a:	e7ed      	b.n	8000838 <__aeabi_d2f+0x2c>
 800085c:	2c00      	cmp	r4, #0
 800085e:	dd14      	ble.n	800088a <__aeabi_d2f+0x7e>
 8000860:	9b00      	ldr	r3, [sp, #0]
 8000862:	00ff      	lsls	r7, r7, #3
 8000864:	019b      	lsls	r3, r3, #6
 8000866:	1e58      	subs	r0, r3, #1
 8000868:	4183      	sbcs	r3, r0
 800086a:	0f69      	lsrs	r1, r5, #29
 800086c:	433b      	orrs	r3, r7
 800086e:	430b      	orrs	r3, r1
 8000870:	0759      	lsls	r1, r3, #29
 8000872:	d041      	beq.n	80008f8 <__aeabi_d2f+0xec>
 8000874:	210f      	movs	r1, #15
 8000876:	4019      	ands	r1, r3
 8000878:	2904      	cmp	r1, #4
 800087a:	d028      	beq.n	80008ce <__aeabi_d2f+0xc2>
 800087c:	3304      	adds	r3, #4
 800087e:	0159      	lsls	r1, r3, #5
 8000880:	d525      	bpl.n	80008ce <__aeabi_d2f+0xc2>
 8000882:	3401      	adds	r4, #1
 8000884:	2300      	movs	r3, #0
 8000886:	b2e0      	uxtb	r0, r4
 8000888:	e7d6      	b.n	8000838 <__aeabi_d2f+0x2c>
 800088a:	0021      	movs	r1, r4
 800088c:	3117      	adds	r1, #23
 800088e:	dbdb      	blt.n	8000848 <__aeabi_d2f+0x3c>
 8000890:	2180      	movs	r1, #128	@ 0x80
 8000892:	201e      	movs	r0, #30
 8000894:	0409      	lsls	r1, r1, #16
 8000896:	4339      	orrs	r1, r7
 8000898:	1b00      	subs	r0, r0, r4
 800089a:	281f      	cmp	r0, #31
 800089c:	dd1b      	ble.n	80008d6 <__aeabi_d2f+0xca>
 800089e:	2602      	movs	r6, #2
 80008a0:	4276      	negs	r6, r6
 80008a2:	1b34      	subs	r4, r6, r4
 80008a4:	000e      	movs	r6, r1
 80008a6:	40e6      	lsrs	r6, r4
 80008a8:	0034      	movs	r4, r6
 80008aa:	2820      	cmp	r0, #32
 80008ac:	d004      	beq.n	80008b8 <__aeabi_d2f+0xac>
 80008ae:	4817      	ldr	r0, [pc, #92]	@ (800090c <__aeabi_d2f+0x100>)
 80008b0:	4684      	mov	ip, r0
 80008b2:	4463      	add	r3, ip
 80008b4:	4099      	lsls	r1, r3
 80008b6:	430d      	orrs	r5, r1
 80008b8:	002b      	movs	r3, r5
 80008ba:	1e59      	subs	r1, r3, #1
 80008bc:	418b      	sbcs	r3, r1
 80008be:	4323      	orrs	r3, r4
 80008c0:	0759      	lsls	r1, r3, #29
 80008c2:	d015      	beq.n	80008f0 <__aeabi_d2f+0xe4>
 80008c4:	210f      	movs	r1, #15
 80008c6:	2400      	movs	r4, #0
 80008c8:	4019      	ands	r1, r3
 80008ca:	2904      	cmp	r1, #4
 80008cc:	d117      	bne.n	80008fe <__aeabi_d2f+0xf2>
 80008ce:	019b      	lsls	r3, r3, #6
 80008d0:	0a5b      	lsrs	r3, r3, #9
 80008d2:	b2e0      	uxtb	r0, r4
 80008d4:	e7b0      	b.n	8000838 <__aeabi_d2f+0x2c>
 80008d6:	4c0e      	ldr	r4, [pc, #56]	@ (8000910 <__aeabi_d2f+0x104>)
 80008d8:	191c      	adds	r4, r3, r4
 80008da:	002b      	movs	r3, r5
 80008dc:	40a5      	lsls	r5, r4
 80008de:	40c3      	lsrs	r3, r0
 80008e0:	40a1      	lsls	r1, r4
 80008e2:	1e68      	subs	r0, r5, #1
 80008e4:	4185      	sbcs	r5, r0
 80008e6:	4329      	orrs	r1, r5
 80008e8:	430b      	orrs	r3, r1
 80008ea:	2400      	movs	r4, #0
 80008ec:	0759      	lsls	r1, r3, #29
 80008ee:	d1c1      	bne.n	8000874 <__aeabi_d2f+0x68>
 80008f0:	019b      	lsls	r3, r3, #6
 80008f2:	2000      	movs	r0, #0
 80008f4:	0a5b      	lsrs	r3, r3, #9
 80008f6:	e79f      	b.n	8000838 <__aeabi_d2f+0x2c>
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	b2e0      	uxtb	r0, r4
 80008fc:	e79c      	b.n	8000838 <__aeabi_d2f+0x2c>
 80008fe:	3304      	adds	r3, #4
 8000900:	e7e5      	b.n	80008ce <__aeabi_d2f+0xc2>
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	000007fe 	.word	0x000007fe
 8000908:	fffffc80 	.word	0xfffffc80
 800090c:	fffffca2 	.word	0xfffffca2
 8000910:	fffffc82 	.word	0xfffffc82

08000914 <__clzsi2>:
 8000914:	211c      	movs	r1, #28
 8000916:	2301      	movs	r3, #1
 8000918:	041b      	lsls	r3, r3, #16
 800091a:	4298      	cmp	r0, r3
 800091c:	d301      	bcc.n	8000922 <__clzsi2+0xe>
 800091e:	0c00      	lsrs	r0, r0, #16
 8000920:	3910      	subs	r1, #16
 8000922:	0a1b      	lsrs	r3, r3, #8
 8000924:	4298      	cmp	r0, r3
 8000926:	d301      	bcc.n	800092c <__clzsi2+0x18>
 8000928:	0a00      	lsrs	r0, r0, #8
 800092a:	3908      	subs	r1, #8
 800092c:	091b      	lsrs	r3, r3, #4
 800092e:	4298      	cmp	r0, r3
 8000930:	d301      	bcc.n	8000936 <__clzsi2+0x22>
 8000932:	0900      	lsrs	r0, r0, #4
 8000934:	3904      	subs	r1, #4
 8000936:	a202      	add	r2, pc, #8	@ (adr r2, 8000940 <__clzsi2+0x2c>)
 8000938:	5c10      	ldrb	r0, [r2, r0]
 800093a:	1840      	adds	r0, r0, r1
 800093c:	4770      	bx	lr
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	02020304 	.word	0x02020304
 8000944:	01010101 	.word	0x01010101
	...

08000950 <RGs_Attr_Init>:
	uint8_t all_RGs_custom[RGS_NUMBER];
} RGs_Attr;

RGs_Attr RGs;

static void RGs_Attr_Init() {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
	RGs.RG_off = 0b11111111;
 8000956:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <RGs_Attr_Init+0x88>)
 8000958:	22ff      	movs	r2, #255	@ 0xff
 800095a:	701a      	strb	r2, [r3, #0]
	RGs.RG_on = 0b00000000;
 800095c:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <RGs_Attr_Init+0x88>)
 800095e:	2200      	movs	r2, #0
 8000960:	705a      	strb	r2, [r3, #1]
	RGs.mixled_off = 0b10001110;
 8000962:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <RGs_Attr_Init+0x88>)
 8000964:	228e      	movs	r2, #142	@ 0x8e
 8000966:	709a      	strb	r2, [r3, #2]
	RGs.mixled_on = 0b01110000;
 8000968:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <RGs_Attr_Init+0x88>)
 800096a:	2270      	movs	r2, #112	@ 0x70
 800096c:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < RGS_NUMBER; ++i) {
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	e01c      	b.n	80009b0 <RGs_Attr_Init+0x60>
		RGs.all_RGs_on[i] = RGs.RG_on;
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4a17      	ldr	r2, [pc, #92]	@ (80009d8 <RGs_Attr_Init+0x88>)
 800097c:	7851      	ldrb	r1, [r2, #1]
 800097e:	4a16      	ldr	r2, [pc, #88]	@ (80009d8 <RGs_Attr_Init+0x88>)
 8000980:	18d3      	adds	r3, r2, r3
 8000982:	1c0a      	adds	r2, r1, #0
 8000984:	711a      	strb	r2, [r3, #4]
		RGs.all_RGs_custom[i] = RGs.all_RGs_off[i] = RGs.RG_off;
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <RGs_Attr_Init+0x88>)
 800098c:	7811      	ldrb	r1, [r2, #0]
 800098e:	4a12      	ldr	r2, [pc, #72]	@ (80009d8 <RGs_Attr_Init+0x88>)
 8000990:	18d2      	adds	r2, r2, r3
 8000992:	7351      	strb	r1, [r2, #13]
 8000994:	1dfa      	adds	r2, r7, #7
 8000996:	7812      	ldrb	r2, [r2, #0]
 8000998:	490f      	ldr	r1, [pc, #60]	@ (80009d8 <RGs_Attr_Init+0x88>)
 800099a:	18cb      	adds	r3, r1, r3
 800099c:	7b59      	ldrb	r1, [r3, #13]
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <RGs_Attr_Init+0x88>)
 80009a0:	189b      	adds	r3, r3, r2
 80009a2:	1c0a      	adds	r2, r1, #0
 80009a4:	759a      	strb	r2, [r3, #22]
	for (uint8_t i = 0; i < RGS_NUMBER; ++i) {
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	1dfa      	adds	r2, r7, #7
 80009aa:	7812      	ldrb	r2, [r2, #0]
 80009ac:	3201      	adds	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b08      	cmp	r3, #8
 80009b6:	d9de      	bls.n	8000976 <RGs_Attr_Init+0x26>
	}

	RGs.all_RGs_on[4] = RGs.mixled_on;
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <RGs_Attr_Init+0x88>)
 80009ba:	78da      	ldrb	r2, [r3, #3]
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <RGs_Attr_Init+0x88>)
 80009be:	721a      	strb	r2, [r3, #8]
	RGs.all_RGs_custom[4] = RGs.all_RGs_off[4] = RGs.mixled_off;
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <RGs_Attr_Init+0x88>)
 80009c2:	789a      	ldrb	r2, [r3, #2]
 80009c4:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <RGs_Attr_Init+0x88>)
 80009c6:	745a      	strb	r2, [r3, #17]
 80009c8:	4b03      	ldr	r3, [pc, #12]	@ (80009d8 <RGs_Attr_Init+0x88>)
 80009ca:	7c5a      	ldrb	r2, [r3, #17]
 80009cc:	4b02      	ldr	r3, [pc, #8]	@ (80009d8 <RGs_Attr_Init+0x88>)
 80009ce:	769a      	strb	r2, [r3, #26]
}
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b002      	add	sp, #8
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000128 	.word	0x20000128

080009dc <update_indication>:
	} else {
		// 7 6 8
	}

}
void update_indication(bool indication, bool voltage) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	0002      	movs	r2, r0
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	1dbb      	adds	r3, r7, #6
 80009ea:	1c0a      	adds	r2, r1, #0
 80009ec:	701a      	strb	r2, [r3, #0]
	if (indication) {
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d006      	beq.n	8000a04 <update_indication+0x28>
//		uint16_t high_byte=regData[1];
//		high_byte<<=8;
//		uint16_t value=(high_byte& 0xff00)|regData[0];
//		float voltage_value=value*2.44;
//		number_to_indicator(voltage_value, voltage);
		HAL_SPI_Transmit(&hspi2, (uint8_t*) RGs.all_RGs_custom, RGS_NUMBER, 5000);  //SN74HC595N
 80009f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <update_indication+0x58>)
 80009f8:	490f      	ldr	r1, [pc, #60]	@ (8000a38 <update_indication+0x5c>)
 80009fa:	4810      	ldr	r0, [pc, #64]	@ (8000a3c <update_indication+0x60>)
 80009fc:	2209      	movs	r2, #9
 80009fe:	f002 f9f5 	bl	8002dec <HAL_SPI_Transmit>
 8000a02:	e005      	b.n	8000a10 <update_indication+0x34>
	} else {
		HAL_SPI_Transmit(&hspi2, (uint8_t*) RGs.all_RGs_off, RGS_NUMBER, 5000);  //SN74HC595N
 8000a04:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <update_indication+0x58>)
 8000a06:	490e      	ldr	r1, [pc, #56]	@ (8000a40 <update_indication+0x64>)
 8000a08:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <update_indication+0x60>)
 8000a0a:	2209      	movs	r2, #9
 8000a0c:	f002 f9ee 	bl	8002dec <HAL_SPI_Transmit>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000a10:	2380      	movs	r3, #128	@ 0x80
 8000a12:	01db      	lsls	r3, r3, #7
 8000a14:	480b      	ldr	r0, [pc, #44]	@ (8000a44 <update_indication+0x68>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	0019      	movs	r1, r3
 8000a1a:	f000 fe51 	bl	80016c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a1e:	2380      	movs	r3, #128	@ 0x80
 8000a20:	01db      	lsls	r3, r3, #7
 8000a22:	4808      	ldr	r0, [pc, #32]	@ (8000a44 <update_indication+0x68>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	0019      	movs	r1, r3
 8000a28:	f000 fe4a 	bl	80016c0 <HAL_GPIO_WritePin>
}
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	00001388 	.word	0x00001388
 8000a38:	2000013e 	.word	0x2000013e
 8000a3c:	2000007c 	.word	0x2000007c
 8000a40:	20000135 	.word	0x20000135
 8000a44:	48000400 	.word	0x48000400

08000a48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) //check if the interrupt comes from TIM1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d103      	bne.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		update_indication(false, true); //добавить переменные индикации и измеряемой переменной
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff ffbd 	bl	80009dc <update_indication>
	}
}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b002      	add	sp, #8
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	40012c00 	.word	0x40012c00

08000a70 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b089      	sub	sp, #36	@ 0x24
 8000a74:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a76:	f000 fb69 	bl	800114c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a7a:	f000 f875 	bl	8000b68 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a7e:	f000 f9a5 	bl	8000dcc <MX_GPIO_Init>
	MX_I2C1_Init();
 8000a82:	f000 f8cb 	bl	8000c1c <MX_I2C1_Init>
	MX_SPI2_Init();
 8000a86:	f000 f909 	bl	8000c9c <MX_SPI2_Init>
	MX_TIM1_Init();
 8000a8a:	f000 f945 	bl	8000d18 <MX_TIM1_Init>
//	HAL_I2C_Master_Receive(&hi2c1, I2C_ADDRESS<<1, (uint8_t *)regData, 2, I2C_TIMEOUT);
//	uint16_t high_byte=regData[0];
//	high_byte<<=8;
//	uint16_t value=(high_byte& 0xFF0)|regData[1];
//	float voltage_value=value*2.44;
	uint8_t test_data[2]={0,0};
 8000a8e:	003b      	movs	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef stat;
	stat=HAL_I2C_Mem_Read(&hi2c1,(uint16_t) I2C_ADDRESS<<1, 0x08, I2C_MEMADD_SIZE_8BIT, test_data, 2, 10);
 8000a94:	230f      	movs	r3, #15
 8000a96:	18fc      	adds	r4, r7, r3
 8000a98:	482b      	ldr	r0, [pc, #172]	@ (8000b48 <main+0xd8>)
 8000a9a:	230a      	movs	r3, #10
 8000a9c:	9302      	str	r3, [sp, #8]
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	2208      	movs	r2, #8
 8000aaa:	21e0      	movs	r1, #224	@ 0xe0
 8000aac:	f000 febc 	bl	8001828 <HAL_I2C_Mem_Read>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	7023      	strb	r3, [r4, #0]
	uint16_t high_byte = test_data[1];
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	785a      	ldrb	r2, [r3, #1]
 8000ab8:	210c      	movs	r1, #12
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	801a      	strh	r2, [r3, #0]
	high_byte <<= 8;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	187a      	adds	r2, r7, r1
 8000ac2:	8812      	ldrh	r2, [r2, #0]
 8000ac4:	0212      	lsls	r2, r2, #8
 8000ac6:	801a      	strh	r2, [r3, #0]
	uint16_t value = (high_byte & 0xFF00) | test_data[0];
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2200      	movs	r2, #0
 8000acc:	5e9b      	ldrsh	r3, [r3, r2]
 8000ace:	22ff      	movs	r2, #255	@ 0xff
 8000ad0:	4393      	bics	r3, r2
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	210a      	movs	r1, #10
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	801a      	strh	r2, [r3, #0]
	float voltage_value = value * 2.44;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff fe61 	bl	80007b0 <__aeabi_i2d>
 8000aee:	4a17      	ldr	r2, [pc, #92]	@ (8000b4c <main+0xdc>)
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <main+0xe0>)
 8000af2:	f7ff fb95 	bl	8000220 <__aeabi_dmul>
 8000af6:	0002      	movs	r2, r0
 8000af8:	000b      	movs	r3, r1
 8000afa:	0010      	movs	r0, r2
 8000afc:	0019      	movs	r1, r3
 8000afe:	f7ff fe85 	bl	800080c <__aeabi_d2f>
 8000b02:	1c03      	adds	r3, r0, #0
 8000b04:	607b      	str	r3, [r7, #4]
	RGs_Attr_Init();
 8000b06:	f7ff ff23 	bl	8000950 <RGs_Attr_Init>
	//cs_reset();
	//HAL_SPI_Transmit(&hspi1, &spi2_data, 1, 5000);//
	HAL_SPI_Transmit(&hspi2, (uint8_t*) RGs.all_RGs_off, RGS_NUMBER, 5000);  //SN74HC595N
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <main+0xe4>)
 8000b0c:	4912      	ldr	r1, [pc, #72]	@ (8000b58 <main+0xe8>)
 8000b0e:	4813      	ldr	r0, [pc, #76]	@ (8000b5c <main+0xec>)
 8000b10:	2209      	movs	r2, #9
 8000b12:	f002 f96b 	bl	8002dec <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000b16:	2380      	movs	r3, #128	@ 0x80
 8000b18:	01db      	lsls	r3, r3, #7
 8000b1a:	4811      	ldr	r0, [pc, #68]	@ (8000b60 <main+0xf0>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	0019      	movs	r1, r3
 8000b20:	f000 fdce 	bl	80016c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b24:	2380      	movs	r3, #128	@ 0x80
 8000b26:	01db      	lsls	r3, r3, #7
 8000b28:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <main+0xf0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	f000 fdc7 	bl	80016c0 <HAL_GPIO_WritePin>
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);  //подождать 4 секунды для STC3100
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <main+0xf4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2202      	movs	r2, #2
 8000b38:	4252      	negs	r2, r2
 8000b3a:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim1);
 8000b3c:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <main+0xf4>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f002 fc7a 	bl	8003438 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	e7fd      	b.n	8000b44 <main+0xd4>
 8000b48:	20000028 	.word	0x20000028
 8000b4c:	b851eb85 	.word	0xb851eb85
 8000b50:	4003851e 	.word	0x4003851e
 8000b54:	00001388 	.word	0x00001388
 8000b58:	20000135 	.word	0x20000135
 8000b5c:	2000007c 	.word	0x2000007c
 8000b60:	48000400 	.word	0x48000400
 8000b64:	200000e0 	.word	0x200000e0

08000b68 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b099      	sub	sp, #100	@ 0x64
 8000b6c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b6e:	242c      	movs	r4, #44	@ 0x2c
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	0018      	movs	r0, r3
 8000b74:	2334      	movs	r3, #52	@ 0x34
 8000b76:	001a      	movs	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f003 f841 	bl	8003c00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b7e:	231c      	movs	r3, #28
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	0018      	movs	r0, r3
 8000b84:	2310      	movs	r3, #16
 8000b86:	001a      	movs	r2, r3
 8000b88:	2100      	movs	r1, #0
 8000b8a:	f003 f839 	bl	8003c00 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000b8e:	003b      	movs	r3, r7
 8000b90:	0018      	movs	r0, r3
 8000b92:	231c      	movs	r3, #28
 8000b94:	001a      	movs	r2, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	f003 f832 	bl	8003c00 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48;
 8000b9c:	0021      	movs	r1, r4
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2222      	movs	r2, #34	@ 0x22
 8000ba2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2201      	movs	r2, #1
 8000bae:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2210      	movs	r2, #16
 8000bb4:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f001 fa8c 	bl	80020dc <HAL_RCC_OscConfig>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x64>
		Error_Handler();
 8000bc8:	f000 f97c 	bl	8000ec4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000bcc:	211c      	movs	r1, #28
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2101      	movs	r1, #1
 8000bea:	0018      	movs	r0, r3
 8000bec:	f001 fdfc 	bl	80027e8 <HAL_RCC_ClockConfig>
 8000bf0:	1e03      	subs	r3, r0, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0x90>
		Error_Handler();
 8000bf4:	f000 f966 	bl	8000ec4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bf8:	003b      	movs	r3, r7
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	601a      	str	r2, [r3, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000bfe:	003b      	movs	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000c04:	003b      	movs	r3, r7
 8000c06:	0018      	movs	r0, r3
 8000c08:	f001 ff3a 	bl	8002a80 <HAL_RCCEx_PeriphCLKConfig>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0xac>
		Error_Handler();
 8000c10:	f000 f958 	bl	8000ec4 <Error_Handler>
	}
}
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b019      	add	sp, #100	@ 0x64
 8000c1a:	bd90      	pop	{r4, r7, pc}

08000c1c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c22:	4a1c      	ldr	r2, [pc, #112]	@ (8000c94 <MX_I2C1_Init+0x78>)
 8000c24:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c28:	4a1b      	ldr	r2, [pc, #108]	@ (8000c98 <MX_I2C1_Init+0x7c>)
 8000c2a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c32:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 fd4f 	bl	80016fc <HAL_I2C_Init>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000c62:	f000 f92f 	bl	8000ec4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000c66:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f001 f99e 	bl	8001fac <HAL_I2CEx_ConfigAnalogFilter>
 8000c70:	1e03      	subs	r3, r0, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C1_Init+0x5c>
		Error_Handler();
 8000c74:	f000 f926 	bl	8000ec4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 f9e1 	bl	8002044 <HAL_I2CEx_ConfigDigitalFilter>
 8000c82:	1e03      	subs	r3, r0, #0
 8000c84:	d001      	beq.n	8000c8a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000c86:	f000 f91d 	bl	8000ec4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000028 	.word	0x20000028
 8000c94:	40005400 	.word	0x40005400
 8000c98:	2000090e 	.word	0x2000090e

08000c9c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d14 <MX_SPI2_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000ca8:	2282      	movs	r2, #130	@ 0x82
 8000caa:	0052      	lsls	r2, r2, #1
 8000cac:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000cb6:	22e0      	movs	r2, #224	@ 0xe0
 8000cb8:	00d2      	lsls	r2, r2, #3
 8000cba:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000cca:	2280      	movs	r2, #128	@ 0x80
 8000ccc:	0092      	lsls	r2, r2, #2
 8000cce:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000cea:	2207      	movs	r2, #7
 8000cec:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000cfa:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <MX_SPI2_Init+0x74>)
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f001 ffbd 	bl	8002c7c <HAL_SPI_Init>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d001      	beq.n	8000d0a <MX_SPI2_Init+0x6e>
		Error_Handler();
 8000d06:	f000 f8dd 	bl	8000ec4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000007c 	.word	0x2000007c
 8000d14:	40003800 	.word	0x40003800

08000d18 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d1e:	2308      	movs	r3, #8
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	0018      	movs	r0, r3
 8000d24:	2310      	movs	r3, #16
 8000d26:	001a      	movs	r2, r3
 8000d28:	2100      	movs	r1, #0
 8000d2a:	f002 ff69 	bl	8003c00 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d2e:	003b      	movs	r3, r7
 8000d30:	0018      	movs	r0, r3
 8000d32:	2308      	movs	r3, #8
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f002 ff62 	bl	8003c00 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dbc <MX_TIM1_Init+0xa4>)
 8000d3e:	4a20      	ldr	r2, [pc, #128]	@ (8000dc0 <MX_TIM1_Init+0xa8>)
 8000d40:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 3839;
 8000d42:	4b1e      	ldr	r3, [pc, #120]	@ (8000dbc <MX_TIM1_Init+0xa4>)
 8000d44:	4a1f      	ldr	r2, [pc, #124]	@ (8000dc4 <MX_TIM1_Init+0xac>)
 8000d46:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d48:	4b1c      	ldr	r3, [pc, #112]	@ (8000dbc <MX_TIM1_Init+0xa4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 49999;
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <MX_TIM1_Init+0xa4>)
 8000d50:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc8 <MX_TIM1_Init+0xb0>)
 8000d52:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d54:	4b19      	ldr	r3, [pc, #100]	@ (8000dbc <MX_TIM1_Init+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000d5a:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <MX_TIM1_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <MX_TIM1_Init+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_TIM1_Init+0xa4>)
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f002 fb15 	bl	8003398 <HAL_TIM_Base_Init>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM1_Init+0x5e>
		Error_Handler();
 8000d72:	f000 f8a7 	bl	8000ec4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d76:	2108      	movs	r1, #8
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2280      	movs	r2, #128	@ 0x80
 8000d7c:	0152      	lsls	r2, r2, #5
 8000d7e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000d80:	187a      	adds	r2, r7, r1
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_TIM1_Init+0xa4>)
 8000d84:	0011      	movs	r1, r2
 8000d86:	0018      	movs	r0, r3
 8000d88:	f002 fcbe 	bl	8003708 <HAL_TIM_ConfigClockSource>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8000d90:	f000 f898 	bl	8000ec4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d94:	003b      	movs	r3, r7
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000da0:	003a      	movs	r2, r7
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_TIM1_Init+0xa4>)
 8000da4:	0011      	movs	r1, r2
 8000da6:	0018      	movs	r0, r3
 8000da8:	f002 febc 	bl	8003b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	1e03      	subs	r3, r0, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0x9c>
		Error_Handler();
 8000db0:	f000 f888 	bl	8000ec4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b006      	add	sp, #24
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200000e0 	.word	0x200000e0
 8000dc0:	40012c00 	.word	0x40012c00
 8000dc4:	00000eff 	.word	0x00000eff
 8000dc8:	0000c34f 	.word	0x0000c34f

08000dcc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b089      	sub	sp, #36	@ 0x24
 8000dd0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000dd2:	240c      	movs	r4, #12
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2314      	movs	r3, #20
 8000dda:	001a      	movs	r2, r3
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f002 ff0f 	bl	8003c00 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000de2:	4b36      	ldr	r3, [pc, #216]	@ (8000ebc <MX_GPIO_Init+0xf0>)
 8000de4:	695a      	ldr	r2, [r3, #20]
 8000de6:	4b35      	ldr	r3, [pc, #212]	@ (8000ebc <MX_GPIO_Init+0xf0>)
 8000de8:	2180      	movs	r1, #128	@ 0x80
 8000dea:	03c9      	lsls	r1, r1, #15
 8000dec:	430a      	orrs	r2, r1
 8000dee:	615a      	str	r2, [r3, #20]
 8000df0:	4b32      	ldr	r3, [pc, #200]	@ (8000ebc <MX_GPIO_Init+0xf0>)
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	2380      	movs	r3, #128	@ 0x80
 8000df6:	03db      	lsls	r3, r3, #15
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8000ebc <MX_GPIO_Init+0xf0>)
 8000e00:	695a      	ldr	r2, [r3, #20]
 8000e02:	4b2e      	ldr	r3, [pc, #184]	@ (8000ebc <MX_GPIO_Init+0xf0>)
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	02c9      	lsls	r1, r1, #11
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ebc <MX_GPIO_Init+0xf0>)
 8000e0e:	695a      	ldr	r2, [r3, #20]
 8000e10:	2380      	movs	r3, #128	@ 0x80
 8000e12:	02db      	lsls	r3, r3, #11
 8000e14:	4013      	ands	r3, r2
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <MX_GPIO_Init+0xf0>)
 8000e1c:	695a      	ldr	r2, [r3, #20]
 8000e1e:	4b27      	ldr	r3, [pc, #156]	@ (8000ebc <MX_GPIO_Init+0xf0>)
 8000e20:	2180      	movs	r1, #128	@ 0x80
 8000e22:	0289      	lsls	r1, r1, #10
 8000e24:	430a      	orrs	r2, r1
 8000e26:	615a      	str	r2, [r3, #20]
 8000e28:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <MX_GPIO_Init+0xf0>)
 8000e2a:	695a      	ldr	r2, [r3, #20]
 8000e2c:	2380      	movs	r3, #128	@ 0x80
 8000e2e:	029b      	lsls	r3, r3, #10
 8000e30:	4013      	ands	r3, r2
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_11 | RG_STROBE_Pin, GPIO_PIN_RESET);
 8000e36:	2398      	movs	r3, #152	@ 0x98
 8000e38:	01db      	lsls	r3, r3, #7
 8000e3a:	4821      	ldr	r0, [pc, #132]	@ (8000ec0 <MX_GPIO_Init+0xf4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	0019      	movs	r1, r3
 8000e40:	f000 fc3e 	bl	80016c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000e44:	2380      	movs	r3, #128	@ 0x80
 8000e46:	015b      	lsls	r3, r3, #5
 8000e48:	481d      	ldr	r0, [pc, #116]	@ (8000ec0 <MX_GPIO_Init+0xf4>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	f000 fc37 	bl	80016c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);
 8000e52:	23e0      	movs	r3, #224	@ 0xe0
 8000e54:	00d9      	lsls	r1, r3, #3
 8000e56:	2390      	movs	r3, #144	@ 0x90
 8000e58:	05db      	lsls	r3, r3, #23
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f000 fc2f 	bl	80016c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB10 PB11 PB12 RG_STROBE_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | RG_STROBE_Pin;
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	22b8      	movs	r2, #184	@ 0xb8
 8000e66:	01d2      	lsls	r2, r2, #7
 8000e68:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ec0 <MX_GPIO_Init+0xf4>)
 8000e80:	0019      	movs	r1, r3
 8000e82:	0010      	movs	r0, r2
 8000e84:	f000 faa4 	bl	80013d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8000e88:	0021      	movs	r1, r4
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	22e0      	movs	r2, #224	@ 0xe0
 8000e8e:	00d2      	lsls	r2, r2, #3
 8000e90:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2201      	movs	r2, #1
 8000e96:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	187a      	adds	r2, r7, r1
 8000ea6:	2390      	movs	r3, #144	@ 0x90
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 fa8f 	bl	80013d0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b009      	add	sp, #36	@ 0x24
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	e7fd      	b.n	8000ecc <Error_Handler+0x8>

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <HAL_MspInit+0x44>)
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <HAL_MspInit+0x44>)
 8000edc:	2101      	movs	r1, #1
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	619a      	str	r2, [r3, #24]
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <HAL_MspInit+0x44>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4013      	ands	r3, r2
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <HAL_MspInit+0x44>)
 8000ef0:	69da      	ldr	r2, [r3, #28]
 8000ef2:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <HAL_MspInit+0x44>)
 8000ef4:	2180      	movs	r1, #128	@ 0x80
 8000ef6:	0549      	lsls	r1, r1, #21
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	61da      	str	r2, [r3, #28]
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <HAL_MspInit+0x44>)
 8000efe:	69da      	ldr	r2, [r3, #28]
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	055b      	lsls	r3, r3, #21
 8000f04:	4013      	ands	r3, r2
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	40021000 	.word	0x40021000

08000f18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b08b      	sub	sp, #44	@ 0x2c
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	2414      	movs	r4, #20
 8000f22:	193b      	adds	r3, r7, r4
 8000f24:	0018      	movs	r0, r3
 8000f26:	2314      	movs	r3, #20
 8000f28:	001a      	movs	r2, r3
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	f002 fe68 	bl	8003c00 <memset>
  if(hi2c->Instance==I2C1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <HAL_I2C_MspInit+0x90>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d132      	bne.n	8000fa0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <HAL_I2C_MspInit+0x94>)
 8000f3c:	695a      	ldr	r2, [r3, #20]
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <HAL_I2C_MspInit+0x94>)
 8000f40:	2180      	movs	r1, #128	@ 0x80
 8000f42:	02c9      	lsls	r1, r1, #11
 8000f44:	430a      	orrs	r2, r1
 8000f46:	615a      	str	r2, [r3, #20]
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_I2C_MspInit+0x94>)
 8000f4a:	695a      	ldr	r2, [r3, #20]
 8000f4c:	2380      	movs	r3, #128	@ 0x80
 8000f4e:	02db      	lsls	r3, r3, #11
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f56:	193b      	adds	r3, r7, r4
 8000f58:	22c0      	movs	r2, #192	@ 0xc0
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5e:	0021      	movs	r1, r4
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2212      	movs	r2, #18
 8000f64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2201      	movs	r2, #1
 8000f76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb0 <HAL_I2C_MspInit+0x98>)
 8000f7c:	0019      	movs	r1, r3
 8000f7e:	0010      	movs	r0, r2
 8000f80:	f000 fa26 	bl	80013d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <HAL_I2C_MspInit+0x94>)
 8000f86:	69da      	ldr	r2, [r3, #28]
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_I2C_MspInit+0x94>)
 8000f8a:	2180      	movs	r1, #128	@ 0x80
 8000f8c:	0389      	lsls	r1, r1, #14
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	61da      	str	r2, [r3, #28]
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_I2C_MspInit+0x94>)
 8000f94:	69da      	ldr	r2, [r3, #28]
 8000f96:	2380      	movs	r3, #128	@ 0x80
 8000f98:	039b      	lsls	r3, r3, #14
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b00b      	add	sp, #44	@ 0x2c
 8000fa6:	bd90      	pop	{r4, r7, pc}
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	48000400 	.word	0x48000400

08000fb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b08b      	sub	sp, #44	@ 0x2c
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	2414      	movs	r4, #20
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	2314      	movs	r3, #20
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f002 fe1a 	bl	8003c00 <memset>
  if(hspi->Instance==SPI2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8001044 <HAL_SPI_MspInit+0x90>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d132      	bne.n	800103c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <HAL_SPI_MspInit+0x94>)
 8000fd8:	69da      	ldr	r2, [r3, #28]
 8000fda:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <HAL_SPI_MspInit+0x94>)
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	01c9      	lsls	r1, r1, #7
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	61da      	str	r2, [r3, #28]
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <HAL_SPI_MspInit+0x94>)
 8000fe6:	69da      	ldr	r2, [r3, #28]
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	01db      	lsls	r3, r3, #7
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <HAL_SPI_MspInit+0x94>)
 8000ff4:	695a      	ldr	r2, [r3, #20]
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <HAL_SPI_MspInit+0x94>)
 8000ff8:	2180      	movs	r1, #128	@ 0x80
 8000ffa:	02c9      	lsls	r1, r1, #11
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <HAL_SPI_MspInit+0x94>)
 8001002:	695a      	ldr	r2, [r3, #20]
 8001004:	2380      	movs	r3, #128	@ 0x80
 8001006:	02db      	lsls	r3, r3, #11
 8001008:	4013      	ands	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800100e:	193b      	adds	r3, r7, r4
 8001010:	22a0      	movs	r2, #160	@ 0xa0
 8001012:	0212      	lsls	r2, r2, #8
 8001014:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	0021      	movs	r1, r4
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2202      	movs	r2, #2
 800101c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001024:	187b      	adds	r3, r7, r1
 8001026:	2203      	movs	r2, #3
 8001028:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	187b      	adds	r3, r7, r1
 8001032:	4a06      	ldr	r2, [pc, #24]	@ (800104c <HAL_SPI_MspInit+0x98>)
 8001034:	0019      	movs	r1, r3
 8001036:	0010      	movs	r0, r2
 8001038:	f000 f9ca 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b00b      	add	sp, #44	@ 0x2c
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	40003800 	.word	0x40003800
 8001048:	40021000 	.word	0x40021000
 800104c:	48000400 	.word	0x48000400

08001050 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <HAL_TIM_Base_MspInit+0x48>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d115      	bne.n	800108e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <HAL_TIM_Base_MspInit+0x4c>)
 8001064:	699a      	ldr	r2, [r3, #24]
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <HAL_TIM_Base_MspInit+0x4c>)
 8001068:	2180      	movs	r1, #128	@ 0x80
 800106a:	0109      	lsls	r1, r1, #4
 800106c:	430a      	orrs	r2, r1
 800106e:	619a      	str	r2, [r3, #24]
 8001070:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <HAL_TIM_Base_MspInit+0x4c>)
 8001072:	699a      	ldr	r2, [r3, #24]
 8001074:	2380      	movs	r3, #128	@ 0x80
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	200d      	movs	r0, #13
 8001084:	f000 f972 	bl	800136c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001088:	200d      	movs	r0, #13
 800108a:	f000 f984 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b004      	add	sp, #16
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	40012c00 	.word	0x40012c00
 800109c:	40021000 	.word	0x40021000

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a4:	46c0      	nop			@ (mov r8, r8)
 80010a6:	e7fd      	b.n	80010a4 <NMI_Handler+0x4>

080010a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	e7fd      	b.n	80010ac <HardFault_Handler+0x4>

080010b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 f888 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010cc:	46c0      	nop			@ (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80010da:	0018      	movs	r0, r3
 80010dc:	f002 f9fe 	bl	80034dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	200000e0 	.word	0x200000e0

080010ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010f8:	480d      	ldr	r0, [pc, #52]	@ (8001130 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010fa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010fc:	f7ff fff6 	bl	80010ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001100:	480c      	ldr	r0, [pc, #48]	@ (8001134 <LoopForever+0x6>)
  ldr r1, =_edata
 8001102:	490d      	ldr	r1, [pc, #52]	@ (8001138 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <LoopForever+0xe>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001118:	4c0a      	ldr	r4, [pc, #40]	@ (8001144 <LoopForever+0x16>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001126:	f002 fd73 	bl	8003c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800112a:	f7ff fca1 	bl	8000a70 <main>

0800112e <LoopForever>:

LoopForever:
    b LoopForever
 800112e:	e7fe      	b.n	800112e <LoopForever>
  ldr   r0, =_estack
 8001130:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800113c:	08003ca8 	.word	0x08003ca8
  ldr r2, =_sbss
 8001140:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001144:	2000014c 	.word	0x2000014c

08001148 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC1_COMP_IRQHandler>
	...

0800114c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <HAL_Init+0x24>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_Init+0x24>)
 8001156:	2110      	movs	r1, #16
 8001158:	430a      	orrs	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 f809 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001162:	f7ff feb5 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	40022000 	.word	0x40022000

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <HAL_InitTick+0x5c>)
 800117e:	681c      	ldr	r4, [r3, #0]
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_InitTick+0x60>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	0019      	movs	r1, r3
 8001186:	23fa      	movs	r3, #250	@ 0xfa
 8001188:	0098      	lsls	r0, r3, #2
 800118a:	f7fe ffbd 	bl	8000108 <__udivsi3>
 800118e:	0003      	movs	r3, r0
 8001190:	0019      	movs	r1, r3
 8001192:	0020      	movs	r0, r4
 8001194:	f7fe ffb8 	bl	8000108 <__udivsi3>
 8001198:	0003      	movs	r3, r0
 800119a:	0018      	movs	r0, r3
 800119c:	f000 f90b 	bl	80013b6 <HAL_SYSTICK_Config>
 80011a0:	1e03      	subs	r3, r0, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e00f      	b.n	80011c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d80b      	bhi.n	80011c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	2301      	movs	r3, #1
 80011b2:	425b      	negs	r3, r3
 80011b4:	2200      	movs	r2, #0
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 f8d8 	bl	800136c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_InitTick+0x64>)
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b003      	add	sp, #12
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <HAL_IncTick+0x1c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	001a      	movs	r2, r3
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <HAL_IncTick+0x20>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	18d2      	adds	r2, r2, r3
 80011ec:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <HAL_IncTick+0x20>)
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	46c0      	nop			@ (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000148 	.word	0x20000148

08001200 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b02      	ldr	r3, [pc, #8]	@ (8001210 <HAL_GetTick+0x10>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	20000148 	.word	0x20000148

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	0002      	movs	r2, r0
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001220:	1dfb      	adds	r3, r7, #7
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b7f      	cmp	r3, #127	@ 0x7f
 8001226:	d809      	bhi.n	800123c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	001a      	movs	r2, r3
 800122e:	231f      	movs	r3, #31
 8001230:	401a      	ands	r2, r3
 8001232:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__NVIC_EnableIRQ+0x30>)
 8001234:	2101      	movs	r1, #1
 8001236:	4091      	lsls	r1, r2
 8001238:	000a      	movs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
  }
}
 800123c:	46c0      	nop			@ (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	0002      	movs	r2, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b7f      	cmp	r3, #127	@ 0x7f
 800125c:	d828      	bhi.n	80012b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125e:	4a2f      	ldr	r2, [pc, #188]	@ (800131c <__NVIC_SetPriority+0xd4>)
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b25b      	sxtb	r3, r3
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	33c0      	adds	r3, #192	@ 0xc0
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	589b      	ldr	r3, [r3, r2]
 800126e:	1dfa      	adds	r2, r7, #7
 8001270:	7812      	ldrb	r2, [r2, #0]
 8001272:	0011      	movs	r1, r2
 8001274:	2203      	movs	r2, #3
 8001276:	400a      	ands	r2, r1
 8001278:	00d2      	lsls	r2, r2, #3
 800127a:	21ff      	movs	r1, #255	@ 0xff
 800127c:	4091      	lsls	r1, r2
 800127e:	000a      	movs	r2, r1
 8001280:	43d2      	mvns	r2, r2
 8001282:	401a      	ands	r2, r3
 8001284:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	019b      	lsls	r3, r3, #6
 800128a:	22ff      	movs	r2, #255	@ 0xff
 800128c:	401a      	ands	r2, r3
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	0018      	movs	r0, r3
 8001294:	2303      	movs	r3, #3
 8001296:	4003      	ands	r3, r0
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129c:	481f      	ldr	r0, [pc, #124]	@ (800131c <__NVIC_SetPriority+0xd4>)
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	430a      	orrs	r2, r1
 80012a8:	33c0      	adds	r3, #192	@ 0xc0
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ae:	e031      	b.n	8001314 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001320 <__NVIC_SetPriority+0xd8>)
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	0019      	movs	r1, r3
 80012b8:	230f      	movs	r3, #15
 80012ba:	400b      	ands	r3, r1
 80012bc:	3b08      	subs	r3, #8
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3306      	adds	r3, #6
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	18d3      	adds	r3, r2, r3
 80012c6:	3304      	adds	r3, #4
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	1dfa      	adds	r2, r7, #7
 80012cc:	7812      	ldrb	r2, [r2, #0]
 80012ce:	0011      	movs	r1, r2
 80012d0:	2203      	movs	r2, #3
 80012d2:	400a      	ands	r2, r1
 80012d4:	00d2      	lsls	r2, r2, #3
 80012d6:	21ff      	movs	r1, #255	@ 0xff
 80012d8:	4091      	lsls	r1, r2
 80012da:	000a      	movs	r2, r1
 80012dc:	43d2      	mvns	r2, r2
 80012de:	401a      	ands	r2, r3
 80012e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	019b      	lsls	r3, r3, #6
 80012e6:	22ff      	movs	r2, #255	@ 0xff
 80012e8:	401a      	ands	r2, r3
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	0018      	movs	r0, r3
 80012f0:	2303      	movs	r3, #3
 80012f2:	4003      	ands	r3, r0
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f8:	4809      	ldr	r0, [pc, #36]	@ (8001320 <__NVIC_SetPriority+0xd8>)
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	001c      	movs	r4, r3
 8001300:	230f      	movs	r3, #15
 8001302:	4023      	ands	r3, r4
 8001304:	3b08      	subs	r3, #8
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	430a      	orrs	r2, r1
 800130a:	3306      	adds	r3, #6
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	18c3      	adds	r3, r0, r3
 8001310:	3304      	adds	r3, #4
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	46c0      	nop			@ (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b003      	add	sp, #12
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	1e5a      	subs	r2, r3, #1
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	045b      	lsls	r3, r3, #17
 8001334:	429a      	cmp	r2, r3
 8001336:	d301      	bcc.n	800133c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001338:	2301      	movs	r3, #1
 800133a:	e010      	b.n	800135e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133c:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <SysTick_Config+0x44>)
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	3a01      	subs	r2, #1
 8001342:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001344:	2301      	movs	r3, #1
 8001346:	425b      	negs	r3, r3
 8001348:	2103      	movs	r1, #3
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff ff7c 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <SysTick_Config+0x44>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <SysTick_Config+0x44>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	210f      	movs	r1, #15
 8001378:	187b      	adds	r3, r7, r1
 800137a:	1c02      	adds	r2, r0, #0
 800137c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	187b      	adds	r3, r7, r1
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b25b      	sxtb	r3, r3
 8001386:	0011      	movs	r1, r2
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <__NVIC_SetPriority>
}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	0002      	movs	r2, r0
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff ff33 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b002      	add	sp, #8
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff ffaf 	bl	8001324 <SysTick_Config>
 80013c6:	0003      	movs	r3, r0
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013de:	e155      	b.n	800168c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4091      	lsls	r1, r2
 80013ea:	000a      	movs	r2, r1
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d100      	bne.n	80013f8 <HAL_GPIO_Init+0x28>
 80013f6:	e146      	b.n	8001686 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	4013      	ands	r3, r2
 8001400:	2b01      	cmp	r3, #1
 8001402:	d005      	beq.n	8001410 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2203      	movs	r2, #3
 800140a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800140c:	2b02      	cmp	r3, #2
 800140e:	d130      	bne.n	8001472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	409a      	lsls	r2, r3
 800141e:	0013      	movs	r3, r2
 8001420:	43da      	mvns	r2, r3
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	409a      	lsls	r2, r3
 8001432:	0013      	movs	r3, r2
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001446:	2201      	movs	r2, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
 800144c:	0013      	movs	r3, r2
 800144e:	43da      	mvns	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	2201      	movs	r2, #1
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2203      	movs	r2, #3
 8001478:	4013      	ands	r3, r2
 800147a:	2b03      	cmp	r3, #3
 800147c:	d017      	beq.n	80014ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2203      	movs	r2, #3
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d123      	bne.n	8001502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3208      	adds	r2, #8
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	58d3      	ldr	r3, [r2, r3]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2207      	movs	r2, #7
 80014cc:	4013      	ands	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	220f      	movs	r2, #15
 80014d2:	409a      	lsls	r2, r3
 80014d4:	0013      	movs	r3, r2
 80014d6:	43da      	mvns	r2, r3
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2107      	movs	r1, #7
 80014e6:	400b      	ands	r3, r1
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	0092      	lsls	r2, r2, #2
 80014fe:	6939      	ldr	r1, [r7, #16]
 8001500:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	409a      	lsls	r2, r3
 8001510:	0013      	movs	r3, r2
 8001512:	43da      	mvns	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2203      	movs	r2, #3
 8001520:	401a      	ands	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	23c0      	movs	r3, #192	@ 0xc0
 800153c:	029b      	lsls	r3, r3, #10
 800153e:	4013      	ands	r3, r2
 8001540:	d100      	bne.n	8001544 <HAL_GPIO_Init+0x174>
 8001542:	e0a0      	b.n	8001686 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001544:	4b57      	ldr	r3, [pc, #348]	@ (80016a4 <HAL_GPIO_Init+0x2d4>)
 8001546:	699a      	ldr	r2, [r3, #24]
 8001548:	4b56      	ldr	r3, [pc, #344]	@ (80016a4 <HAL_GPIO_Init+0x2d4>)
 800154a:	2101      	movs	r1, #1
 800154c:	430a      	orrs	r2, r1
 800154e:	619a      	str	r2, [r3, #24]
 8001550:	4b54      	ldr	r3, [pc, #336]	@ (80016a4 <HAL_GPIO_Init+0x2d4>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2201      	movs	r2, #1
 8001556:	4013      	ands	r3, r2
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800155c:	4a52      	ldr	r2, [pc, #328]	@ (80016a8 <HAL_GPIO_Init+0x2d8>)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	589b      	ldr	r3, [r3, r2]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2203      	movs	r2, #3
 800156e:	4013      	ands	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	220f      	movs	r2, #15
 8001574:	409a      	lsls	r2, r3
 8001576:	0013      	movs	r3, r2
 8001578:	43da      	mvns	r2, r3
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	2390      	movs	r3, #144	@ 0x90
 8001584:	05db      	lsls	r3, r3, #23
 8001586:	429a      	cmp	r2, r3
 8001588:	d019      	beq.n	80015be <HAL_GPIO_Init+0x1ee>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a47      	ldr	r2, [pc, #284]	@ (80016ac <HAL_GPIO_Init+0x2dc>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d013      	beq.n	80015ba <HAL_GPIO_Init+0x1ea>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a46      	ldr	r2, [pc, #280]	@ (80016b0 <HAL_GPIO_Init+0x2e0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d00d      	beq.n	80015b6 <HAL_GPIO_Init+0x1e6>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a45      	ldr	r2, [pc, #276]	@ (80016b4 <HAL_GPIO_Init+0x2e4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d007      	beq.n	80015b2 <HAL_GPIO_Init+0x1e2>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a44      	ldr	r2, [pc, #272]	@ (80016b8 <HAL_GPIO_Init+0x2e8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_GPIO_Init+0x1de>
 80015aa:	2304      	movs	r3, #4
 80015ac:	e008      	b.n	80015c0 <HAL_GPIO_Init+0x1f0>
 80015ae:	2305      	movs	r3, #5
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x1f0>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x1f0>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x1f0>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x1f0>
 80015be:	2300      	movs	r3, #0
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	2103      	movs	r1, #3
 80015c4:	400a      	ands	r2, r1
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015d0:	4935      	ldr	r1, [pc, #212]	@ (80016a8 <HAL_GPIO_Init+0x2d8>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015de:	4b37      	ldr	r3, [pc, #220]	@ (80016bc <HAL_GPIO_Init+0x2ec>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43da      	mvns	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	035b      	lsls	r3, r3, #13
 80015f6:	4013      	ands	r3, r2
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001602:	4b2e      	ldr	r3, [pc, #184]	@ (80016bc <HAL_GPIO_Init+0x2ec>)
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001608:	4b2c      	ldr	r3, [pc, #176]	@ (80016bc <HAL_GPIO_Init+0x2ec>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	43da      	mvns	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	2380      	movs	r3, #128	@ 0x80
 800161e:	039b      	lsls	r3, r3, #14
 8001620:	4013      	ands	r3, r2
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800162c:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <HAL_GPIO_Init+0x2ec>)
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001632:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <HAL_GPIO_Init+0x2ec>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43da      	mvns	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	2380      	movs	r3, #128	@ 0x80
 8001648:	029b      	lsls	r3, r3, #10
 800164a:	4013      	ands	r3, r2
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_GPIO_Init+0x2ec>)
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <HAL_GPIO_Init+0x2ec>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43da      	mvns	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	2380      	movs	r3, #128	@ 0x80
 8001672:	025b      	lsls	r3, r3, #9
 8001674:	4013      	ands	r3, r2
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001680:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <HAL_GPIO_Init+0x2ec>)
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	40da      	lsrs	r2, r3
 8001694:	1e13      	subs	r3, r2, #0
 8001696:	d000      	beq.n	800169a <HAL_GPIO_Init+0x2ca>
 8001698:	e6a2      	b.n	80013e0 <HAL_GPIO_Init+0x10>
  } 
}
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	46c0      	nop			@ (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	b006      	add	sp, #24
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010000 	.word	0x40010000
 80016ac:	48000400 	.word	0x48000400
 80016b0:	48000800 	.word	0x48000800
 80016b4:	48000c00 	.word	0x48000c00
 80016b8:	48001000 	.word	0x48001000
 80016bc:	40010400 	.word	0x40010400

080016c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	0008      	movs	r0, r1
 80016ca:	0011      	movs	r1, r2
 80016cc:	1cbb      	adds	r3, r7, #2
 80016ce:	1c02      	adds	r2, r0, #0
 80016d0:	801a      	strh	r2, [r3, #0]
 80016d2:	1c7b      	adds	r3, r7, #1
 80016d4:	1c0a      	adds	r2, r1, #0
 80016d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d8:	1c7b      	adds	r3, r7, #1
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d004      	beq.n	80016ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016e0:	1cbb      	adds	r3, r7, #2
 80016e2:	881a      	ldrh	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e8:	e003      	b.n	80016f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ea:	1cbb      	adds	r3, r7, #2
 80016ec:	881a      	ldrh	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e082      	b.n	8001814 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2241      	movs	r2, #65	@ 0x41
 8001712:	5c9b      	ldrb	r3, [r3, r2]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d107      	bne.n	800172a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2240      	movs	r2, #64	@ 0x40
 800171e:	2100      	movs	r1, #0
 8001720:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff fbf7 	bl	8000f18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2241      	movs	r2, #65	@ 0x41
 800172e:	2124      	movs	r1, #36	@ 0x24
 8001730:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	438a      	bics	r2, r1
 8001740:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4934      	ldr	r1, [pc, #208]	@ (800181c <HAL_I2C_Init+0x120>)
 800174c:	400a      	ands	r2, r1
 800174e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4931      	ldr	r1, [pc, #196]	@ (8001820 <HAL_I2C_Init+0x124>)
 800175c:	400a      	ands	r2, r1
 800175e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d108      	bne.n	800177a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2180      	movs	r1, #128	@ 0x80
 8001772:	0209      	lsls	r1, r1, #8
 8001774:	430a      	orrs	r2, r1
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	e007      	b.n	800178a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2184      	movs	r1, #132	@ 0x84
 8001784:	0209      	lsls	r1, r1, #8
 8001786:	430a      	orrs	r2, r1
 8001788:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d104      	bne.n	800179c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2280      	movs	r2, #128	@ 0x80
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	491f      	ldr	r1, [pc, #124]	@ (8001824 <HAL_I2C_Init+0x128>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	491a      	ldr	r1, [pc, #104]	@ (8001820 <HAL_I2C_Init+0x124>)
 80017b8:	400a      	ands	r2, r1
 80017ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69d9      	ldr	r1, [r3, #28]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1a      	ldr	r2, [r3, #32]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2101      	movs	r1, #1
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2241      	movs	r2, #65	@ 0x41
 8001800:	2120      	movs	r1, #32
 8001802:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2242      	movs	r2, #66	@ 0x42
 800180e:	2100      	movs	r1, #0
 8001810:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}
 800181c:	f0ffffff 	.word	0xf0ffffff
 8001820:	ffff7fff 	.word	0xffff7fff
 8001824:	02008000 	.word	0x02008000

08001828 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b089      	sub	sp, #36	@ 0x24
 800182c:	af02      	add	r7, sp, #8
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	000c      	movs	r4, r1
 8001832:	0010      	movs	r0, r2
 8001834:	0019      	movs	r1, r3
 8001836:	230a      	movs	r3, #10
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	1c22      	adds	r2, r4, #0
 800183c:	801a      	strh	r2, [r3, #0]
 800183e:	2308      	movs	r3, #8
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	1c02      	adds	r2, r0, #0
 8001844:	801a      	strh	r2, [r3, #0]
 8001846:	1dbb      	adds	r3, r7, #6
 8001848:	1c0a      	adds	r2, r1, #0
 800184a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2241      	movs	r2, #65	@ 0x41
 8001850:	5c9b      	ldrb	r3, [r3, r2]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b20      	cmp	r3, #32
 8001856:	d000      	beq.n	800185a <HAL_I2C_Mem_Read+0x32>
 8001858:	e110      	b.n	8001a7c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800185a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	d004      	beq.n	800186a <HAL_I2C_Mem_Read+0x42>
 8001860:	232c      	movs	r3, #44	@ 0x2c
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d105      	bne.n	8001876 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2280      	movs	r2, #128	@ 0x80
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e103      	b.n	8001a7e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2240      	movs	r2, #64	@ 0x40
 800187a:	5c9b      	ldrb	r3, [r3, r2]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_I2C_Mem_Read+0x5c>
 8001880:	2302      	movs	r3, #2
 8001882:	e0fc      	b.n	8001a7e <HAL_I2C_Mem_Read+0x256>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2240      	movs	r2, #64	@ 0x40
 8001888:	2101      	movs	r1, #1
 800188a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800188c:	f7ff fcb8 	bl	8001200 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001894:	2380      	movs	r3, #128	@ 0x80
 8001896:	0219      	lsls	r1, r3, #8
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2319      	movs	r3, #25
 80018a0:	2201      	movs	r2, #1
 80018a2:	f000 f979 	bl	8001b98 <I2C_WaitOnFlagUntilTimeout>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0e7      	b.n	8001a7e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2241      	movs	r2, #65	@ 0x41
 80018b2:	2122      	movs	r1, #34	@ 0x22
 80018b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2242      	movs	r2, #66	@ 0x42
 80018ba:	2140      	movs	r1, #64	@ 0x40
 80018bc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	222c      	movs	r2, #44	@ 0x2c
 80018ce:	18ba      	adds	r2, r7, r2
 80018d0:	8812      	ldrh	r2, [r2, #0]
 80018d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018da:	1dbb      	adds	r3, r7, #6
 80018dc:	881c      	ldrh	r4, [r3, #0]
 80018de:	2308      	movs	r3, #8
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	230a      	movs	r3, #10
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	8819      	ldrh	r1, [r3, #0]
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	0023      	movs	r3, r4
 80018f6:	f000 f8cb 	bl	8001a90 <I2C_RequestMemoryRead>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d005      	beq.n	800190a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2240      	movs	r2, #64	@ 0x40
 8001902:	2100      	movs	r1, #0
 8001904:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0b9      	b.n	8001a7e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	2bff      	cmp	r3, #255	@ 0xff
 8001912:	d911      	bls.n	8001938 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	22ff      	movs	r2, #255	@ 0xff
 8001918:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191e:	b2da      	uxtb	r2, r3
 8001920:	2380      	movs	r3, #128	@ 0x80
 8001922:	045c      	lsls	r4, r3, #17
 8001924:	230a      	movs	r3, #10
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	8819      	ldrh	r1, [r3, #0]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	4b56      	ldr	r3, [pc, #344]	@ (8001a88 <HAL_I2C_Mem_Read+0x260>)
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	0023      	movs	r3, r4
 8001932:	f000 fb01 	bl	8001f38 <I2C_TransferConfig>
 8001936:	e012      	b.n	800195e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001946:	b2da      	uxtb	r2, r3
 8001948:	2380      	movs	r3, #128	@ 0x80
 800194a:	049c      	lsls	r4, r3, #18
 800194c:	230a      	movs	r3, #10
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	8819      	ldrh	r1, [r3, #0]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	4b4c      	ldr	r3, [pc, #304]	@ (8001a88 <HAL_I2C_Mem_Read+0x260>)
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	0023      	movs	r3, r4
 800195a:	f000 faed 	bl	8001f38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800195e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	0013      	movs	r3, r2
 8001968:	2200      	movs	r2, #0
 800196a:	2104      	movs	r1, #4
 800196c:	f000 f914 	bl	8001b98 <I2C_WaitOnFlagUntilTimeout>
 8001970:	1e03      	subs	r3, r0, #0
 8001972:	d001      	beq.n	8001978 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e082      	b.n	8001a7e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001994:	3b01      	subs	r3, #1
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d03a      	beq.n	8001a2a <HAL_I2C_Mem_Read+0x202>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d136      	bne.n	8001a2a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	0013      	movs	r3, r2
 80019c6:	2200      	movs	r2, #0
 80019c8:	2180      	movs	r1, #128	@ 0x80
 80019ca:	f000 f8e5 	bl	8001b98 <I2C_WaitOnFlagUntilTimeout>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e053      	b.n	8001a7e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019da:	b29b      	uxth	r3, r3
 80019dc:	2bff      	cmp	r3, #255	@ 0xff
 80019de:	d911      	bls.n	8001a04 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	22ff      	movs	r2, #255	@ 0xff
 80019e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	045c      	lsls	r4, r3, #17
 80019f0:	230a      	movs	r3, #10
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	8819      	ldrh	r1, [r3, #0]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	2300      	movs	r3, #0
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	0023      	movs	r3, r4
 80019fe:	f000 fa9b 	bl	8001f38 <I2C_TransferConfig>
 8001a02:	e012      	b.n	8001a2a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	049c      	lsls	r4, r3, #18
 8001a18:	230a      	movs	r3, #10
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	8819      	ldrh	r1, [r3, #0]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	2300      	movs	r3, #0
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	0023      	movs	r3, r4
 8001a26:	f000 fa87 	bl	8001f38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d194      	bne.n	800195e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f000 f940 	bl	8001cc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a40:	1e03      	subs	r3, r0, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e01a      	b.n	8001a7e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	490c      	ldr	r1, [pc, #48]	@ (8001a8c <HAL_I2C_Mem_Read+0x264>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2241      	movs	r2, #65	@ 0x41
 8001a64:	2120      	movs	r1, #32
 8001a66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2242      	movs	r2, #66	@ 0x42
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2240      	movs	r2, #64	@ 0x40
 8001a74:	2100      	movs	r1, #0
 8001a76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001a7c:	2302      	movs	r3, #2
  }
}
 8001a7e:	0018      	movs	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b007      	add	sp, #28
 8001a84:	bd90      	pop	{r4, r7, pc}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	80002400 	.word	0x80002400
 8001a8c:	fe00e800 	.word	0xfe00e800

08001a90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a90:	b5b0      	push	{r4, r5, r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	000c      	movs	r4, r1
 8001a9a:	0010      	movs	r0, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	250a      	movs	r5, #10
 8001aa0:	197b      	adds	r3, r7, r5
 8001aa2:	1c22      	adds	r2, r4, #0
 8001aa4:	801a      	strh	r2, [r3, #0]
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	1c02      	adds	r2, r0, #0
 8001aac:	801a      	strh	r2, [r3, #0]
 8001aae:	1dbb      	adds	r3, r7, #6
 8001ab0:	1c0a      	adds	r2, r1, #0
 8001ab2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ab4:	1dbb      	adds	r3, r7, #6
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	197b      	adds	r3, r7, r5
 8001abc:	8819      	ldrh	r1, [r3, #0]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <I2C_RequestMemoryRead+0xc0>)
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f000 fa37 	bl	8001f38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001acc:	6a39      	ldr	r1, [r7, #32]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 f8af 	bl	8001c34 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ad6:	1e03      	subs	r3, r0, #0
 8001ad8:	d001      	beq.n	8001ade <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e033      	b.n	8001b46 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ade:	1dbb      	adds	r3, r7, #6
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d107      	bne.n	8001af6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001af4:	e019      	b.n	8001b2a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001af6:	2308      	movs	r3, #8
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b0a:	6a39      	ldr	r1, [r7, #32]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 f890 	bl	8001c34 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b14:	1e03      	subs	r3, r0, #0
 8001b16:	d001      	beq.n	8001b1c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e014      	b.n	8001b46 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b2a:	6a3a      	ldr	r2, [r7, #32]
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	0013      	movs	r3, r2
 8001b34:	2200      	movs	r2, #0
 8001b36:	2140      	movs	r1, #64	@ 0x40
 8001b38:	f000 f82e 	bl	8001b98 <I2C_WaitOnFlagUntilTimeout>
 8001b3c:	1e03      	subs	r3, r0, #0
 8001b3e:	d001      	beq.n	8001b44 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b004      	add	sp, #16
 8001b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	80002000 	.word	0x80002000

08001b54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	2202      	movs	r2, #2
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d103      	bne.n	8001b72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d007      	beq.n	8001b90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699a      	ldr	r2, [r3, #24]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	619a      	str	r2, [r3, #24]
  }
}
 8001b90:	46c0      	nop			@ (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b002      	add	sp, #8
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	1dfb      	adds	r3, r7, #7
 8001ba6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ba8:	e030      	b.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	d02d      	beq.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb0:	f7ff fb26 	bl	8001200 <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d302      	bcc.n	8001bc6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d122      	bne.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	425a      	negs	r2, r3
 8001bd6:	4153      	adcs	r3, r2
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	001a      	movs	r2, r3
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d113      	bne.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be8:	2220      	movs	r2, #32
 8001bea:	431a      	orrs	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2241      	movs	r2, #65	@ 0x41
 8001bf4:	2120      	movs	r1, #32
 8001bf6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2242      	movs	r2, #66	@ 0x42
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2240      	movs	r2, #64	@ 0x40
 8001c04:	2100      	movs	r1, #0
 8001c06:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e00f      	b.n	8001c2c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	4013      	ands	r3, r2
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	425a      	negs	r2, r3
 8001c1c:	4153      	adcs	r3, r2
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	001a      	movs	r2, r3
 8001c22:	1dfb      	adds	r3, r7, #7
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d0bf      	beq.n	8001baa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b004      	add	sp, #16
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c40:	e032      	b.n	8001ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 f87d 	bl	8001d48 <I2C_IsErrorOccurred>
 8001c4e:	1e03      	subs	r3, r0, #0
 8001c50:	d001      	beq.n	8001c56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e030      	b.n	8001cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	d025      	beq.n	8001ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c5c:	f7ff fad0 	bl	8001200 <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d302      	bcc.n	8001c72 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d11a      	bne.n	8001ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d013      	beq.n	8001ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c84:	2220      	movs	r2, #32
 8001c86:	431a      	orrs	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2241      	movs	r2, #65	@ 0x41
 8001c90:	2120      	movs	r1, #32
 8001c92:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2242      	movs	r2, #66	@ 0x42
 8001c98:	2100      	movs	r1, #0
 8001c9a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2240      	movs	r2, #64	@ 0x40
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e007      	b.n	8001cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d1c5      	bne.n	8001c42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b004      	add	sp, #16
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ccc:	e02f      	b.n	8001d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 f837 	bl	8001d48 <I2C_IsErrorOccurred>
 8001cda:	1e03      	subs	r3, r0, #0
 8001cdc:	d001      	beq.n	8001ce2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e02d      	b.n	8001d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce2:	f7ff fa8d 	bl	8001200 <HAL_GetTick>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d302      	bcc.n	8001cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d11a      	bne.n	8001d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	d013      	beq.n	8001d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2241      	movs	r2, #65	@ 0x41
 8001d16:	2120      	movs	r1, #32
 8001d18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2242      	movs	r2, #66	@ 0x42
 8001d1e:	2100      	movs	r1, #0
 8001d20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2240      	movs	r2, #64	@ 0x40
 8001d26:	2100      	movs	r1, #0
 8001d28:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e007      	b.n	8001d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2220      	movs	r2, #32
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d1c8      	bne.n	8001cce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b004      	add	sp, #16
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d54:	2327      	movs	r3, #39	@ 0x27
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2210      	movs	r2, #16
 8001d70:	4013      	ands	r3, r2
 8001d72:	d100      	bne.n	8001d76 <I2C_IsErrorOccurred+0x2e>
 8001d74:	e079      	b.n	8001e6a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d7e:	e057      	b.n	8001e30 <I2C_IsErrorOccurred+0xe8>
 8001d80:	2227      	movs	r2, #39	@ 0x27
 8001d82:	18bb      	adds	r3, r7, r2
 8001d84:	18ba      	adds	r2, r7, r2
 8001d86:	7812      	ldrb	r2, [r2, #0]
 8001d88:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	d04f      	beq.n	8001e30 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d90:	f7ff fa36 	bl	8001200 <HAL_GetTick>
 8001d94:	0002      	movs	r2, r0
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d302      	bcc.n	8001da6 <I2C_IsErrorOccurred+0x5e>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d144      	bne.n	8001e30 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	2380      	movs	r3, #128	@ 0x80
 8001dae:	01db      	lsls	r3, r3, #7
 8001db0:	4013      	ands	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001db4:	2013      	movs	r0, #19
 8001db6:	183b      	adds	r3, r7, r0
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	2142      	movs	r1, #66	@ 0x42
 8001dbc:	5c52      	ldrb	r2, [r2, r1]
 8001dbe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699a      	ldr	r2, [r3, #24]
 8001dc6:	2380      	movs	r3, #128	@ 0x80
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	401a      	ands	r2, r3
 8001dcc:	2380      	movs	r3, #128	@ 0x80
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d126      	bne.n	8001e22 <I2C_IsErrorOccurred+0xda>
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	2380      	movs	r3, #128	@ 0x80
 8001dd8:	01db      	lsls	r3, r3, #7
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d021      	beq.n	8001e22 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001dde:	183b      	adds	r3, r7, r0
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d01d      	beq.n	8001e22 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2180      	movs	r1, #128	@ 0x80
 8001df2:	01c9      	lsls	r1, r1, #7
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001df8:	f7ff fa02 	bl	8001200 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e00:	e00f      	b.n	8001e22 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e02:	f7ff f9fd 	bl	8001200 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b19      	cmp	r3, #25
 8001e0e:	d908      	bls.n	8001e22 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	2220      	movs	r2, #32
 8001e14:	4313      	orrs	r3, r2
 8001e16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e18:	2327      	movs	r3, #39	@ 0x27
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]

              break;
 8001e20:	e006      	b.n	8001e30 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d1e8      	bne.n	8001e02 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2220      	movs	r2, #32
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d004      	beq.n	8001e48 <I2C_IsErrorOccurred+0x100>
 8001e3e:	2327      	movs	r3, #39	@ 0x27
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d09b      	beq.n	8001d80 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e48:	2327      	movs	r3, #39	@ 0x27
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2220      	movs	r2, #32
 8001e58:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e62:	2327      	movs	r3, #39	@ 0x27
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d00c      	beq.n	8001e96 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4313      	orrs	r3, r2
 8001e82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2280      	movs	r2, #128	@ 0x80
 8001e8a:	0052      	lsls	r2, r2, #1
 8001e8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e8e:	2327      	movs	r3, #39	@ 0x27
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	2380      	movs	r3, #128	@ 0x80
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d00c      	beq.n	8001eba <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2280      	movs	r2, #128	@ 0x80
 8001eae:	00d2      	lsls	r2, r2, #3
 8001eb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eb2:	2327      	movs	r3, #39	@ 0x27
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	2380      	movs	r3, #128	@ 0x80
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d00c      	beq.n	8001ede <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2280      	movs	r2, #128	@ 0x80
 8001ed2:	0092      	lsls	r2, r2, #2
 8001ed4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ed6:	2327      	movs	r3, #39	@ 0x27
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001ede:	2327      	movs	r3, #39	@ 0x27
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01d      	beq.n	8001f24 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	0018      	movs	r0, r3
 8001eec:	f7ff fe32 	bl	8001b54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	490e      	ldr	r1, [pc, #56]	@ (8001f34 <I2C_IsErrorOccurred+0x1ec>)
 8001efc:	400a      	ands	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2241      	movs	r2, #65	@ 0x41
 8001f10:	2120      	movs	r1, #32
 8001f12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2242      	movs	r2, #66	@ 0x42
 8001f18:	2100      	movs	r1, #0
 8001f1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2240      	movs	r2, #64	@ 0x40
 8001f20:	2100      	movs	r1, #0
 8001f22:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001f24:	2327      	movs	r3, #39	@ 0x27
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	781b      	ldrb	r3, [r3, #0]
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b00a      	add	sp, #40	@ 0x28
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	fe00e800 	.word	0xfe00e800

08001f38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	0008      	movs	r0, r1
 8001f42:	0011      	movs	r1, r2
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	240a      	movs	r4, #10
 8001f48:	193b      	adds	r3, r7, r4
 8001f4a:	1c02      	adds	r2, r0, #0
 8001f4c:	801a      	strh	r2, [r3, #0]
 8001f4e:	2009      	movs	r0, #9
 8001f50:	183b      	adds	r3, r7, r0
 8001f52:	1c0a      	adds	r2, r1, #0
 8001f54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f56:	193b      	adds	r3, r7, r4
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	059b      	lsls	r3, r3, #22
 8001f5c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f5e:	183b      	adds	r3, r7, r0
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	0419      	lsls	r1, r3, #16
 8001f64:	23ff      	movs	r3, #255	@ 0xff
 8001f66:	041b      	lsls	r3, r3, #16
 8001f68:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f6a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f72:	4313      	orrs	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	085b      	lsrs	r3, r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f82:	0d51      	lsrs	r1, r2, #21
 8001f84:	2280      	movs	r2, #128	@ 0x80
 8001f86:	00d2      	lsls	r2, r2, #3
 8001f88:	400a      	ands	r2, r1
 8001f8a:	4907      	ldr	r1, [pc, #28]	@ (8001fa8 <I2C_TransferConfig+0x70>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	43d2      	mvns	r2, r2
 8001f90:	401a      	ands	r2, r3
 8001f92:	0011      	movs	r1, r2
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b007      	add	sp, #28
 8001fa4:	bd90      	pop	{r4, r7, pc}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	03ff63ff 	.word	0x03ff63ff

08001fac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2241      	movs	r2, #65	@ 0x41
 8001fba:	5c9b      	ldrb	r3, [r3, r2]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	d138      	bne.n	8002034 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2240      	movs	r2, #64	@ 0x40
 8001fc6:	5c9b      	ldrb	r3, [r3, r2]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e032      	b.n	8002036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2240      	movs	r2, #64	@ 0x40
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2241      	movs	r2, #65	@ 0x41
 8001fdc:	2124      	movs	r1, #36	@ 0x24
 8001fde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2101      	movs	r1, #1
 8001fec:	438a      	bics	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4911      	ldr	r1, [pc, #68]	@ (8002040 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6819      	ldr	r1, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2241      	movs	r2, #65	@ 0x41
 8002024:	2120      	movs	r1, #32
 8002026:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2240      	movs	r2, #64	@ 0x40
 800202c:	2100      	movs	r1, #0
 800202e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	e000      	b.n	8002036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002034:	2302      	movs	r3, #2
  }
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	ffffefff 	.word	0xffffefff

08002044 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2241      	movs	r2, #65	@ 0x41
 8002052:	5c9b      	ldrb	r3, [r3, r2]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b20      	cmp	r3, #32
 8002058:	d139      	bne.n	80020ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2240      	movs	r2, #64	@ 0x40
 800205e:	5c9b      	ldrb	r3, [r3, r2]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002064:	2302      	movs	r3, #2
 8002066:	e033      	b.n	80020d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2240      	movs	r2, #64	@ 0x40
 800206c:	2101      	movs	r1, #1
 800206e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2241      	movs	r2, #65	@ 0x41
 8002074:	2124      	movs	r1, #36	@ 0x24
 8002076:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2101      	movs	r1, #1
 8002084:	438a      	bics	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a11      	ldr	r2, [pc, #68]	@ (80020d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002094:	4013      	ands	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2101      	movs	r1, #1
 80020b6:	430a      	orrs	r2, r1
 80020b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2241      	movs	r2, #65	@ 0x41
 80020be:	2120      	movs	r1, #32
 80020c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2240      	movs	r2, #64	@ 0x40
 80020c6:	2100      	movs	r1, #0
 80020c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e000      	b.n	80020d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
  }
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b004      	add	sp, #16
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	fffff0ff 	.word	0xfffff0ff

080020dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d102      	bne.n	80020f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	f000 fb76 	bl	80027dc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4013      	ands	r3, r2
 80020f8:	d100      	bne.n	80020fc <HAL_RCC_OscConfig+0x20>
 80020fa:	e08e      	b.n	800221a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020fc:	4bc5      	ldr	r3, [pc, #788]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	220c      	movs	r2, #12
 8002102:	4013      	ands	r3, r2
 8002104:	2b04      	cmp	r3, #4
 8002106:	d00e      	beq.n	8002126 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002108:	4bc2      	ldr	r3, [pc, #776]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	220c      	movs	r2, #12
 800210e:	4013      	ands	r3, r2
 8002110:	2b08      	cmp	r3, #8
 8002112:	d117      	bne.n	8002144 <HAL_RCC_OscConfig+0x68>
 8002114:	4bbf      	ldr	r3, [pc, #764]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	23c0      	movs	r3, #192	@ 0xc0
 800211a:	025b      	lsls	r3, r3, #9
 800211c:	401a      	ands	r2, r3
 800211e:	2380      	movs	r3, #128	@ 0x80
 8002120:	025b      	lsls	r3, r3, #9
 8002122:	429a      	cmp	r2, r3
 8002124:	d10e      	bne.n	8002144 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002126:	4bbb      	ldr	r3, [pc, #748]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	@ 0x80
 800212c:	029b      	lsls	r3, r3, #10
 800212e:	4013      	ands	r3, r2
 8002130:	d100      	bne.n	8002134 <HAL_RCC_OscConfig+0x58>
 8002132:	e071      	b.n	8002218 <HAL_RCC_OscConfig+0x13c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d000      	beq.n	800213e <HAL_RCC_OscConfig+0x62>
 800213c:	e06c      	b.n	8002218 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	f000 fb4c 	bl	80027dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d107      	bne.n	800215c <HAL_RCC_OscConfig+0x80>
 800214c:	4bb1      	ldr	r3, [pc, #708]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4bb0      	ldr	r3, [pc, #704]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0249      	lsls	r1, r1, #9
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e02f      	b.n	80021bc <HAL_RCC_OscConfig+0xe0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10c      	bne.n	800217e <HAL_RCC_OscConfig+0xa2>
 8002164:	4bab      	ldr	r3, [pc, #684]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4baa      	ldr	r3, [pc, #680]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800216a:	49ab      	ldr	r1, [pc, #684]	@ (8002418 <HAL_RCC_OscConfig+0x33c>)
 800216c:	400a      	ands	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	4ba8      	ldr	r3, [pc, #672]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4ba7      	ldr	r3, [pc, #668]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002176:	49a9      	ldr	r1, [pc, #676]	@ (800241c <HAL_RCC_OscConfig+0x340>)
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e01e      	b.n	80021bc <HAL_RCC_OscConfig+0xe0>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d10e      	bne.n	80021a4 <HAL_RCC_OscConfig+0xc8>
 8002186:	4ba3      	ldr	r3, [pc, #652]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4ba2      	ldr	r3, [pc, #648]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800218c:	2180      	movs	r1, #128	@ 0x80
 800218e:	02c9      	lsls	r1, r1, #11
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	4b9f      	ldr	r3, [pc, #636]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b9e      	ldr	r3, [pc, #632]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800219a:	2180      	movs	r1, #128	@ 0x80
 800219c:	0249      	lsls	r1, r1, #9
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0xe0>
 80021a4:	4b9b      	ldr	r3, [pc, #620]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b9a      	ldr	r3, [pc, #616]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80021aa:	499b      	ldr	r1, [pc, #620]	@ (8002418 <HAL_RCC_OscConfig+0x33c>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	4b98      	ldr	r3, [pc, #608]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b97      	ldr	r3, [pc, #604]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80021b6:	4999      	ldr	r1, [pc, #612]	@ (800241c <HAL_RCC_OscConfig+0x340>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d014      	beq.n	80021ee <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff f81c 	bl	8001200 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ce:	f7ff f817 	bl	8001200 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b64      	cmp	r3, #100	@ 0x64
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e2fd      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	029b      	lsls	r3, r3, #10
 80021e8:	4013      	ands	r3, r2
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0xf2>
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7ff f807 	bl	8001200 <HAL_GetTick>
 80021f2:	0003      	movs	r3, r0
 80021f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff f802 	bl	8001200 <HAL_GetTick>
 80021fc:	0002      	movs	r2, r0
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	@ 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e2e8      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b82      	ldr	r3, [pc, #520]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	029b      	lsls	r3, r3, #10
 8002212:	4013      	ands	r3, r2
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x11c>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	d100      	bne.n	8002226 <HAL_RCC_OscConfig+0x14a>
 8002224:	e06c      	b.n	8002300 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002226:	4b7b      	ldr	r3, [pc, #492]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	220c      	movs	r2, #12
 800222c:	4013      	ands	r3, r2
 800222e:	d00e      	beq.n	800224e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002230:	4b78      	ldr	r3, [pc, #480]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	220c      	movs	r2, #12
 8002236:	4013      	ands	r3, r2
 8002238:	2b08      	cmp	r3, #8
 800223a:	d11f      	bne.n	800227c <HAL_RCC_OscConfig+0x1a0>
 800223c:	4b75      	ldr	r3, [pc, #468]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	23c0      	movs	r3, #192	@ 0xc0
 8002242:	025b      	lsls	r3, r3, #9
 8002244:	401a      	ands	r2, r3
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	429a      	cmp	r2, r3
 800224c:	d116      	bne.n	800227c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	4b71      	ldr	r3, [pc, #452]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	d005      	beq.n	8002264 <HAL_RCC_OscConfig+0x188>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d001      	beq.n	8002264 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e2bb      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b6b      	ldr	r3, [pc, #428]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	22f8      	movs	r2, #248	@ 0xf8
 800226a:	4393      	bics	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00da      	lsls	r2, r3, #3
 8002274:	4b67      	ldr	r3, [pc, #412]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	e041      	b.n	8002300 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d024      	beq.n	80022ce <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002284:	4b63      	ldr	r3, [pc, #396]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b62      	ldr	r3, [pc, #392]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800228a:	2101      	movs	r1, #1
 800228c:	430a      	orrs	r2, r1
 800228e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe ffb6 	bl	8001200 <HAL_GetTick>
 8002294:	0003      	movs	r3, r0
 8002296:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229a:	f7fe ffb1 	bl	8001200 <HAL_GetTick>
 800229e:	0002      	movs	r2, r0
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e297      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	4b59      	ldr	r3, [pc, #356]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2202      	movs	r2, #2
 80022b2:	4013      	ands	r3, r2
 80022b4:	d0f1      	beq.n	800229a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b57      	ldr	r3, [pc, #348]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	22f8      	movs	r2, #248	@ 0xf8
 80022bc:	4393      	bics	r3, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	00da      	lsls	r2, r3, #3
 80022c6:	4b53      	ldr	r3, [pc, #332]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e018      	b.n	8002300 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ce:	4b51      	ldr	r3, [pc, #324]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b50      	ldr	r3, [pc, #320]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80022d4:	2101      	movs	r1, #1
 80022d6:	438a      	bics	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7fe ff91 	bl	8001200 <HAL_GetTick>
 80022de:	0003      	movs	r3, r0
 80022e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e4:	f7fe ff8c 	bl	8001200 <HAL_GetTick>
 80022e8:	0002      	movs	r2, r0
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e272      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	4b47      	ldr	r3, [pc, #284]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2202      	movs	r2, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	d1f1      	bne.n	80022e4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2208      	movs	r2, #8
 8002306:	4013      	ands	r3, r2
 8002308:	d036      	beq.n	8002378 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d019      	beq.n	8002346 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002312:	4b40      	ldr	r3, [pc, #256]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002316:	4b3f      	ldr	r3, [pc, #252]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002318:	2101      	movs	r1, #1
 800231a:	430a      	orrs	r2, r1
 800231c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231e:	f7fe ff6f 	bl	8001200 <HAL_GetTick>
 8002322:	0003      	movs	r3, r0
 8002324:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002328:	f7fe ff6a 	bl	8001200 <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e250      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	2202      	movs	r2, #2
 8002340:	4013      	ands	r3, r2
 8002342:	d0f1      	beq.n	8002328 <HAL_RCC_OscConfig+0x24c>
 8002344:	e018      	b.n	8002378 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002346:	4b33      	ldr	r3, [pc, #204]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800234a:	4b32      	ldr	r3, [pc, #200]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800234c:	2101      	movs	r1, #1
 800234e:	438a      	bics	r2, r1
 8002350:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7fe ff55 	bl	8001200 <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235c:	f7fe ff50 	bl	8001200 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e236      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236e:	4b29      	ldr	r3, [pc, #164]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d1f1      	bne.n	800235c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2204      	movs	r2, #4
 800237e:	4013      	ands	r3, r2
 8002380:	d100      	bne.n	8002384 <HAL_RCC_OscConfig+0x2a8>
 8002382:	e0b5      	b.n	80024f0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002384:	201f      	movs	r0, #31
 8002386:	183b      	adds	r3, r7, r0
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238c:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	055b      	lsls	r3, r3, #21
 8002394:	4013      	ands	r3, r2
 8002396:	d110      	bne.n	80023ba <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800239e:	2180      	movs	r1, #128	@ 0x80
 80023a0:	0549      	lsls	r1, r1, #21
 80023a2:	430a      	orrs	r2, r1
 80023a4:	61da      	str	r2, [r3, #28]
 80023a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	055b      	lsls	r3, r3, #21
 80023ae:	4013      	ands	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023b4:	183b      	adds	r3, r7, r0
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <HAL_RCC_OscConfig+0x344>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	@ 0x80
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	d11a      	bne.n	80023fc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <HAL_RCC_OscConfig+0x344>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <HAL_RCC_OscConfig+0x344>)
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0049      	lsls	r1, r1, #1
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d4:	f7fe ff14 	bl	8001200 <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023de:	f7fe ff0f 	bl	8001200 <HAL_GetTick>
 80023e2:	0002      	movs	r2, r0
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b64      	cmp	r3, #100	@ 0x64
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e1f5      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_OscConfig+0x344>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2380      	movs	r3, #128	@ 0x80
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4013      	ands	r3, r2
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d10f      	bne.n	8002424 <HAL_RCC_OscConfig+0x348>
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	4b02      	ldr	r3, [pc, #8]	@ (8002414 <HAL_RCC_OscConfig+0x338>)
 800240a:	2101      	movs	r1, #1
 800240c:	430a      	orrs	r2, r1
 800240e:	621a      	str	r2, [r3, #32]
 8002410:	e036      	b.n	8002480 <HAL_RCC_OscConfig+0x3a4>
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	40021000 	.word	0x40021000
 8002418:	fffeffff 	.word	0xfffeffff
 800241c:	fffbffff 	.word	0xfffbffff
 8002420:	40007000 	.word	0x40007000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_OscConfig+0x36a>
 800242c:	4bca      	ldr	r3, [pc, #808]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800242e:	6a1a      	ldr	r2, [r3, #32]
 8002430:	4bc9      	ldr	r3, [pc, #804]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002432:	2101      	movs	r1, #1
 8002434:	438a      	bics	r2, r1
 8002436:	621a      	str	r2, [r3, #32]
 8002438:	4bc7      	ldr	r3, [pc, #796]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800243a:	6a1a      	ldr	r2, [r3, #32]
 800243c:	4bc6      	ldr	r3, [pc, #792]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800243e:	2104      	movs	r1, #4
 8002440:	438a      	bics	r2, r1
 8002442:	621a      	str	r2, [r3, #32]
 8002444:	e01c      	b.n	8002480 <HAL_RCC_OscConfig+0x3a4>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b05      	cmp	r3, #5
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x38c>
 800244e:	4bc2      	ldr	r3, [pc, #776]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002450:	6a1a      	ldr	r2, [r3, #32]
 8002452:	4bc1      	ldr	r3, [pc, #772]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002454:	2104      	movs	r1, #4
 8002456:	430a      	orrs	r2, r1
 8002458:	621a      	str	r2, [r3, #32]
 800245a:	4bbf      	ldr	r3, [pc, #764]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	4bbe      	ldr	r3, [pc, #760]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002460:	2101      	movs	r1, #1
 8002462:	430a      	orrs	r2, r1
 8002464:	621a      	str	r2, [r3, #32]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0x3a4>
 8002468:	4bbb      	ldr	r3, [pc, #748]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	4bba      	ldr	r3, [pc, #744]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800246e:	2101      	movs	r1, #1
 8002470:	438a      	bics	r2, r1
 8002472:	621a      	str	r2, [r3, #32]
 8002474:	4bb8      	ldr	r3, [pc, #736]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	4bb7      	ldr	r3, [pc, #732]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800247a:	2104      	movs	r1, #4
 800247c:	438a      	bics	r2, r1
 800247e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d014      	beq.n	80024b2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002488:	f7fe feba 	bl	8001200 <HAL_GetTick>
 800248c:	0003      	movs	r3, r0
 800248e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	e009      	b.n	80024a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7fe feb5 	bl	8001200 <HAL_GetTick>
 8002496:	0002      	movs	r2, r0
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	4aaf      	ldr	r2, [pc, #700]	@ (800275c <HAL_RCC_OscConfig+0x680>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e19a      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a6:	4bac      	ldr	r3, [pc, #688]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	2202      	movs	r2, #2
 80024ac:	4013      	ands	r3, r2
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x3b6>
 80024b0:	e013      	b.n	80024da <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b2:	f7fe fea5 	bl	8001200 <HAL_GetTick>
 80024b6:	0003      	movs	r3, r0
 80024b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ba:	e009      	b.n	80024d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024bc:	f7fe fea0 	bl	8001200 <HAL_GetTick>
 80024c0:	0002      	movs	r2, r0
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	4aa5      	ldr	r2, [pc, #660]	@ (800275c <HAL_RCC_OscConfig+0x680>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e185      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d0:	4ba1      	ldr	r3, [pc, #644]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	2202      	movs	r2, #2
 80024d6:	4013      	ands	r3, r2
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024da:	231f      	movs	r3, #31
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d105      	bne.n	80024f0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	4b9b      	ldr	r3, [pc, #620]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80024ea:	499d      	ldr	r1, [pc, #628]	@ (8002760 <HAL_RCC_OscConfig+0x684>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2210      	movs	r2, #16
 80024f6:	4013      	ands	r3, r2
 80024f8:	d063      	beq.n	80025c2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d12a      	bne.n	8002558 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002502:	4b95      	ldr	r3, [pc, #596]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002506:	4b94      	ldr	r3, [pc, #592]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002508:	2104      	movs	r1, #4
 800250a:	430a      	orrs	r2, r1
 800250c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800250e:	4b92      	ldr	r3, [pc, #584]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002512:	4b91      	ldr	r3, [pc, #580]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002514:	2101      	movs	r1, #1
 8002516:	430a      	orrs	r2, r1
 8002518:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7fe fe71 	bl	8001200 <HAL_GetTick>
 800251e:	0003      	movs	r3, r0
 8002520:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002524:	f7fe fe6c 	bl	8001200 <HAL_GetTick>
 8002528:	0002      	movs	r2, r0
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e152      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002536:	4b88      	ldr	r3, [pc, #544]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800253a:	2202      	movs	r2, #2
 800253c:	4013      	ands	r3, r2
 800253e:	d0f1      	beq.n	8002524 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002540:	4b85      	ldr	r3, [pc, #532]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002544:	22f8      	movs	r2, #248	@ 0xf8
 8002546:	4393      	bics	r3, r2
 8002548:	0019      	movs	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	00da      	lsls	r2, r3, #3
 8002550:	4b81      	ldr	r3, [pc, #516]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002552:	430a      	orrs	r2, r1
 8002554:	635a      	str	r2, [r3, #52]	@ 0x34
 8002556:	e034      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	3305      	adds	r3, #5
 800255e:	d111      	bne.n	8002584 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002560:	4b7d      	ldr	r3, [pc, #500]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002564:	4b7c      	ldr	r3, [pc, #496]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002566:	2104      	movs	r1, #4
 8002568:	438a      	bics	r2, r1
 800256a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800256c:	4b7a      	ldr	r3, [pc, #488]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800256e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002570:	22f8      	movs	r2, #248	@ 0xf8
 8002572:	4393      	bics	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	00da      	lsls	r2, r3, #3
 800257c:	4b76      	ldr	r3, [pc, #472]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800257e:	430a      	orrs	r2, r1
 8002580:	635a      	str	r2, [r3, #52]	@ 0x34
 8002582:	e01e      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002584:	4b74      	ldr	r3, [pc, #464]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002588:	4b73      	ldr	r3, [pc, #460]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800258a:	2104      	movs	r1, #4
 800258c:	430a      	orrs	r2, r1
 800258e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002590:	4b71      	ldr	r3, [pc, #452]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002594:	4b70      	ldr	r3, [pc, #448]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002596:	2101      	movs	r1, #1
 8002598:	438a      	bics	r2, r1
 800259a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7fe fe30 	bl	8001200 <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025a6:	f7fe fe2b 	bl	8001200 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e111      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025b8:	4b67      	ldr	r3, [pc, #412]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025bc:	2202      	movs	r2, #2
 80025be:	4013      	ands	r3, r2
 80025c0:	d1f1      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2220      	movs	r2, #32
 80025c8:	4013      	ands	r3, r2
 80025ca:	d05c      	beq.n	8002686 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025cc:	4b62      	ldr	r3, [pc, #392]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	220c      	movs	r2, #12
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	d00e      	beq.n	80025f6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	220c      	movs	r2, #12
 80025de:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d114      	bne.n	800260e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	23c0      	movs	r3, #192	@ 0xc0
 80025ea:	025b      	lsls	r3, r3, #9
 80025ec:	401a      	ands	r2, r3
 80025ee:	23c0      	movs	r3, #192	@ 0xc0
 80025f0:	025b      	lsls	r3, r3, #9
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d10b      	bne.n	800260e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025f6:	4b58      	ldr	r3, [pc, #352]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025fa:	2380      	movs	r3, #128	@ 0x80
 80025fc:	029b      	lsls	r3, r3, #10
 80025fe:	4013      	ands	r3, r2
 8002600:	d040      	beq.n	8002684 <HAL_RCC_OscConfig+0x5a8>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d03c      	beq.n	8002684 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0e6      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d01b      	beq.n	800264e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002616:	4b50      	ldr	r3, [pc, #320]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800261a:	4b4f      	ldr	r3, [pc, #316]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800261c:	2180      	movs	r1, #128	@ 0x80
 800261e:	0249      	lsls	r1, r1, #9
 8002620:	430a      	orrs	r2, r1
 8002622:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe fdec 	bl	8001200 <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800262e:	f7fe fde7 	bl	8001200 <HAL_GetTick>
 8002632:	0002      	movs	r2, r0
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e0cd      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002640:	4b45      	ldr	r3, [pc, #276]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	029b      	lsls	r3, r3, #10
 8002648:	4013      	ands	r3, r2
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x552>
 800264c:	e01b      	b.n	8002686 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800264e:	4b42      	ldr	r3, [pc, #264]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002650:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002652:	4b41      	ldr	r3, [pc, #260]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002654:	4943      	ldr	r1, [pc, #268]	@ (8002764 <HAL_RCC_OscConfig+0x688>)
 8002656:	400a      	ands	r2, r1
 8002658:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe fdd1 	bl	8001200 <HAL_GetTick>
 800265e:	0003      	movs	r3, r0
 8002660:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002664:	f7fe fdcc 	bl	8001200 <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e0b2      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002676:	4b38      	ldr	r3, [pc, #224]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800267a:	2380      	movs	r3, #128	@ 0x80
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	4013      	ands	r3, r2
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x588>
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002684:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268a:	2b00      	cmp	r3, #0
 800268c:	d100      	bne.n	8002690 <HAL_RCC_OscConfig+0x5b4>
 800268e:	e0a4      	b.n	80027da <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002690:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	220c      	movs	r2, #12
 8002696:	4013      	ands	r3, r2
 8002698:	2b08      	cmp	r3, #8
 800269a:	d100      	bne.n	800269e <HAL_RCC_OscConfig+0x5c2>
 800269c:	e078      	b.n	8002790 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d14c      	bne.n	8002740 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026ac:	492e      	ldr	r1, [pc, #184]	@ (8002768 <HAL_RCC_OscConfig+0x68c>)
 80026ae:	400a      	ands	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe fda5 	bl	8001200 <HAL_GetTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe fda0 	bl	8001200 <HAL_GetTick>
 80026c0:	0002      	movs	r2, r0
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e086      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ce:	4b22      	ldr	r3, [pc, #136]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	@ 0x80
 80026d4:	049b      	lsls	r3, r3, #18
 80026d6:	4013      	ands	r3, r2
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026da:	4b1f      	ldr	r3, [pc, #124]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026de:	220f      	movs	r2, #15
 80026e0:	4393      	bics	r3, r2
 80026e2:	0019      	movs	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026ea:	430a      	orrs	r2, r1
 80026ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80026ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4a1e      	ldr	r2, [pc, #120]	@ (800276c <HAL_RCC_OscConfig+0x690>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002700:	431a      	orrs	r2, r3
 8002702:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002708:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 800270e:	2180      	movs	r1, #128	@ 0x80
 8002710:	0449      	lsls	r1, r1, #17
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7fe fd73 	bl	8001200 <HAL_GetTick>
 800271a:	0003      	movs	r3, r0
 800271c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fd6e 	bl	8001200 <HAL_GetTick>
 8002724:	0002      	movs	r2, r0
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e054      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002732:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	049b      	lsls	r3, r3, #18
 800273a:	4013      	ands	r3, r2
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x644>
 800273e:	e04c      	b.n	80027da <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002746:	4908      	ldr	r1, [pc, #32]	@ (8002768 <HAL_RCC_OscConfig+0x68c>)
 8002748:	400a      	ands	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe fd58 	bl	8001200 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x6a6>
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	40021000 	.word	0x40021000
 800275c:	00001388 	.word	0x00001388
 8002760:	efffffff 	.word	0xefffffff
 8002764:	fffeffff 	.word	0xfffeffff
 8002768:	feffffff 	.word	0xfeffffff
 800276c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe fd46 	bl	8001200 <HAL_GetTick>
 8002774:	0002      	movs	r2, r0
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e02c      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <HAL_RCC_OscConfig+0x708>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	049b      	lsls	r3, r3, #18
 800278a:	4013      	ands	r3, r2
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x694>
 800278e:	e024      	b.n	80027da <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e01f      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800279c:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <HAL_RCC_OscConfig+0x708>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80027a2:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <HAL_RCC_OscConfig+0x708>)
 80027a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	23c0      	movs	r3, #192	@ 0xc0
 80027ac:	025b      	lsls	r3, r3, #9
 80027ae:	401a      	ands	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d10e      	bne.n	80027d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	220f      	movs	r2, #15
 80027bc:	401a      	ands	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	23f0      	movs	r3, #240	@ 0xf0
 80027ca:	039b      	lsls	r3, r3, #14
 80027cc:	401a      	ands	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	b008      	add	sp, #32
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000

080027e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0bf      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b61      	ldr	r3, [pc, #388]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2201      	movs	r2, #1
 8002802:	4013      	ands	r3, r2
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d911      	bls.n	800282e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b5e      	ldr	r3, [pc, #376]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2201      	movs	r2, #1
 8002810:	4393      	bics	r3, r2
 8002812:	0019      	movs	r1, r3
 8002814:	4b5b      	ldr	r3, [pc, #364]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281c:	4b59      	ldr	r3, [pc, #356]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0a6      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2202      	movs	r2, #2
 8002834:	4013      	ands	r3, r2
 8002836:	d015      	beq.n	8002864 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2204      	movs	r2, #4
 800283e:	4013      	ands	r3, r2
 8002840:	d006      	beq.n	8002850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002842:	4b51      	ldr	r3, [pc, #324]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4b50      	ldr	r3, [pc, #320]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002848:	21e0      	movs	r1, #224	@ 0xe0
 800284a:	00c9      	lsls	r1, r1, #3
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b4d      	ldr	r3, [pc, #308]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	22f0      	movs	r2, #240	@ 0xf0
 8002856:	4393      	bics	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	4b4a      	ldr	r3, [pc, #296]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	4013      	ands	r3, r2
 800286c:	d04c      	beq.n	8002908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b44      	ldr	r3, [pc, #272]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	@ 0x80
 800287c:	029b      	lsls	r3, r3, #10
 800287e:	4013      	ands	r3, r2
 8002880:	d120      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e07a      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b3e      	ldr	r3, [pc, #248]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	049b      	lsls	r3, r3, #18
 8002896:	4013      	ands	r3, r2
 8002898:	d114      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06e      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028a6:	4b38      	ldr	r3, [pc, #224]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	4013      	ands	r3, r2
 80028b0:	d108      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e062      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b34      	ldr	r3, [pc, #208]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2202      	movs	r2, #2
 80028bc:	4013      	ands	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e05b      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c4:	4b30      	ldr	r3, [pc, #192]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2203      	movs	r2, #3
 80028ca:	4393      	bics	r3, r2
 80028cc:	0019      	movs	r1, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7fe fc92 	bl	8001200 <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e0:	e009      	b.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e2:	f7fe fc8d 	bl	8001200 <HAL_GetTick>
 80028e6:	0002      	movs	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	4a27      	ldr	r2, [pc, #156]	@ (800298c <HAL_RCC_ClockConfig+0x1a4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e042      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	220c      	movs	r2, #12
 80028fc:	401a      	ands	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1ec      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b1e      	ldr	r3, [pc, #120]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d211      	bcs.n	800293a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2201      	movs	r2, #1
 800291c:	4393      	bics	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	4b18      	ldr	r3, [pc, #96]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002928:	4b16      	ldr	r3, [pc, #88]	@ (8002984 <HAL_RCC_ClockConfig+0x19c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2201      	movs	r2, #1
 800292e:	4013      	ands	r3, r2
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d001      	beq.n	800293a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e020      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2204      	movs	r2, #4
 8002940:	4013      	ands	r3, r2
 8002942:	d009      	beq.n	8002958 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b10      	ldr	r3, [pc, #64]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a11      	ldr	r2, [pc, #68]	@ (8002990 <HAL_RCC_ClockConfig+0x1a8>)
 800294a:	4013      	ands	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002954:	430a      	orrs	r2, r1
 8002956:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002958:	f000 f820 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295c:	0001      	movs	r1, r0
 800295e:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	220f      	movs	r2, #15
 8002966:	4013      	ands	r3, r2
 8002968:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <HAL_RCC_ClockConfig+0x1ac>)
 800296a:	5cd3      	ldrb	r3, [r2, r3]
 800296c:	000a      	movs	r2, r1
 800296e:	40da      	lsrs	r2, r3
 8002970:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <HAL_RCC_ClockConfig+0x1b0>)
 8002972:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002974:	2003      	movs	r0, #3
 8002976:	f7fe fbfd 	bl	8001174 <HAL_InitTick>
  
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	0018      	movs	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	b004      	add	sp, #16
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40022000 	.word	0x40022000
 8002988:	40021000 	.word	0x40021000
 800298c:	00001388 	.word	0x00001388
 8002990:	fffff8ff 	.word	0xfffff8ff
 8002994:	08003c70 	.word	0x08003c70
 8002998:	20000000 	.word	0x20000000

0800299c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80029b6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	220c      	movs	r2, #12
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d046      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0xb8>
 80029c6:	d848      	bhi.n	8002a5a <HAL_RCC_GetSysClockFreq+0xbe>
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d002      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x36>
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d003      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x3c>
 80029d0:	e043      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d2:	4b27      	ldr	r3, [pc, #156]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029d4:	613b      	str	r3, [r7, #16]
      break;
 80029d6:	e043      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	0c9b      	lsrs	r3, r3, #18
 80029dc:	220f      	movs	r2, #15
 80029de:	4013      	ands	r3, r2
 80029e0:	4a24      	ldr	r2, [pc, #144]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0xd8>)
 80029e2:	5cd3      	ldrb	r3, [r2, r3]
 80029e4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80029e6:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	220f      	movs	r2, #15
 80029ec:	4013      	ands	r3, r2
 80029ee:	4a22      	ldr	r2, [pc, #136]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0xdc>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	23c0      	movs	r3, #192	@ 0xc0
 80029f8:	025b      	lsls	r3, r3, #9
 80029fa:	401a      	ands	r2, r3
 80029fc:	2380      	movs	r3, #128	@ 0x80
 80029fe:	025b      	lsls	r3, r3, #9
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d109      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	481a      	ldr	r0, [pc, #104]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a08:	f7fd fb7e 	bl	8000108 <__udivsi3>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	001a      	movs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4353      	muls	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	e01a      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	23c0      	movs	r3, #192	@ 0xc0
 8002a1c:	025b      	lsls	r3, r3, #9
 8002a1e:	401a      	ands	r2, r3
 8002a20:	23c0      	movs	r3, #192	@ 0xc0
 8002a22:	025b      	lsls	r3, r3, #9
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d109      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	4814      	ldr	r0, [pc, #80]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002a2c:	f7fd fb6c 	bl	8000108 <__udivsi3>
 8002a30:	0003      	movs	r3, r0
 8002a32:	001a      	movs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4353      	muls	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	480c      	ldr	r0, [pc, #48]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a40:	f7fd fb62 	bl	8000108 <__udivsi3>
 8002a44:	0003      	movs	r3, r0
 8002a46:	001a      	movs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4353      	muls	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	613b      	str	r3, [r7, #16]
      break;
 8002a52:	e005      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002a56:	613b      	str	r3, [r7, #16]
      break;
 8002a58:	e002      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a5a:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a5c:	613b      	str	r3, [r7, #16]
      break;
 8002a5e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a60:	693b      	ldr	r3, [r7, #16]
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b006      	add	sp, #24
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	007a1200 	.word	0x007a1200
 8002a74:	08003c80 	.word	0x08003c80
 8002a78:	08003c90 	.word	0x08003c90
 8002a7c:	02dc6c00 	.word	0x02dc6c00

08002a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	025b      	lsls	r3, r3, #9
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d100      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a9c:	e08e      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a9e:	2017      	movs	r0, #23
 8002aa0:	183b      	adds	r3, r7, r0
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	2380      	movs	r3, #128	@ 0x80
 8002aac:	055b      	lsls	r3, r3, #21
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d110      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	4b6b      	ldr	r3, [pc, #428]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ab8:	2180      	movs	r1, #128	@ 0x80
 8002aba:	0549      	lsls	r1, r1, #21
 8002abc:	430a      	orrs	r2, r1
 8002abe:	61da      	str	r2, [r3, #28]
 8002ac0:	4b67      	ldr	r3, [pc, #412]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	055b      	lsls	r3, r3, #21
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ace:	183b      	adds	r3, r7, r0
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	4b63      	ldr	r3, [pc, #396]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2380      	movs	r3, #128	@ 0x80
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4013      	ands	r3, r2
 8002ade:	d11a      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae0:	4b60      	ldr	r3, [pc, #384]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b5f      	ldr	r3, [pc, #380]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ae6:	2180      	movs	r1, #128	@ 0x80
 8002ae8:	0049      	lsls	r1, r1, #1
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fb87 	bl	8001200 <HAL_GetTick>
 8002af2:	0003      	movs	r3, r0
 8002af4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	e008      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af8:	f7fe fb82 	bl	8001200 <HAL_GetTick>
 8002afc:	0002      	movs	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0a6      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b56      	ldr	r3, [pc, #344]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	2380      	movs	r3, #128	@ 0x80
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4013      	ands	r3, r2
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b16:	4b52      	ldr	r3, [pc, #328]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b18:	6a1a      	ldr	r2, [r3, #32]
 8002b1a:	23c0      	movs	r3, #192	@ 0xc0
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d034      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	23c0      	movs	r3, #192	@ 0xc0
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4013      	ands	r3, r2
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d02c      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b38:	4b49      	ldr	r3, [pc, #292]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b42:	4b47      	ldr	r3, [pc, #284]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b44:	6a1a      	ldr	r2, [r3, #32]
 8002b46:	4b46      	ldr	r3, [pc, #280]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b48:	2180      	movs	r1, #128	@ 0x80
 8002b4a:	0249      	lsls	r1, r1, #9
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b50:	4b43      	ldr	r3, [pc, #268]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b52:	6a1a      	ldr	r2, [r3, #32]
 8002b54:	4b42      	ldr	r3, [pc, #264]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b56:	4945      	ldr	r1, [pc, #276]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b5c:	4b40      	ldr	r3, [pc, #256]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	4013      	ands	r3, r2
 8002b68:	d013      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fe fb49 	bl	8001200 <HAL_GetTick>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b72:	e009      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7fe fb44 	bl	8001200 <HAL_GetTick>
 8002b78:	0002      	movs	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	4a3c      	ldr	r2, [pc, #240]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e067      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	4b35      	ldr	r3, [pc, #212]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b92:	4b33      	ldr	r3, [pc, #204]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4a34      	ldr	r2, [pc, #208]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ba6:	2317      	movs	r3, #23
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bb6:	492f      	ldr	r1, [pc, #188]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002bb8:	400a      	ands	r2, r1
 8002bba:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bc6:	4b26      	ldr	r3, [pc, #152]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	2203      	movs	r2, #3
 8002bcc:	4393      	bics	r3, r2
 8002bce:	0019      	movs	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	4b22      	ldr	r3, [pc, #136]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2202      	movs	r2, #2
 8002be0:	4013      	ands	r3, r2
 8002be2:	d009      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	4a23      	ldr	r2, [pc, #140]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	0019      	movs	r1, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d009      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c02:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	2210      	movs	r2, #16
 8002c08:	4393      	bics	r3, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c12:	430a      	orrs	r2, r1
 8002c14:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	2380      	movs	r3, #128	@ 0x80
 8002c1c:	029b      	lsls	r3, r3, #10
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c22:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	2280      	movs	r2, #128	@ 0x80
 8002c28:	4393      	bics	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	2380      	movs	r3, #128	@ 0x80
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d009      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c42:	4b07      	ldr	r3, [pc, #28]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	2240      	movs	r2, #64	@ 0x40
 8002c48:	4393      	bics	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	4b03      	ldr	r3, [pc, #12]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c52:	430a      	orrs	r2, r1
 8002c54:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b006      	add	sp, #24
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40007000 	.word	0x40007000
 8002c68:	fffffcff 	.word	0xfffffcff
 8002c6c:	fffeffff 	.word	0xfffeffff
 8002c70:	00001388 	.word	0x00001388
 8002c74:	efffffff 	.word	0xefffffff
 8002c78:	fffcffff 	.word	0xfffcffff

08002c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0a8      	b.n	8002de0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	2382      	movs	r3, #130	@ 0x82
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d009      	beq.n	8002cb6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	61da      	str	r2, [r3, #28]
 8002ca8:	e005      	b.n	8002cb6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	225d      	movs	r2, #93	@ 0x5d
 8002cc0:	5c9b      	ldrb	r3, [r3, r2]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	225c      	movs	r2, #92	@ 0x5c
 8002ccc:	2100      	movs	r1, #0
 8002cce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7fe f96e 	bl	8000fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	225d      	movs	r2, #93	@ 0x5d
 8002cdc:	2102      	movs	r1, #2
 8002cde:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2140      	movs	r1, #64	@ 0x40
 8002cec:	438a      	bics	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	23e0      	movs	r3, #224	@ 0xe0
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d902      	bls.n	8002d02 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	e002      	b.n	8002d08 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	015b      	lsls	r3, r3, #5
 8002d06:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	23f0      	movs	r3, #240	@ 0xf0
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d008      	beq.n	8002d26 <HAL_SPI_Init+0xaa>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	23e0      	movs	r3, #224	@ 0xe0
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d002      	beq.n	8002d26 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	2382      	movs	r3, #130	@ 0x82
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	401a      	ands	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6899      	ldr	r1, [r3, #8]
 8002d34:	2384      	movs	r3, #132	@ 0x84
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	400b      	ands	r3, r1
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2102      	movs	r1, #2
 8002d42:	400b      	ands	r3, r1
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6999      	ldr	r1, [r3, #24]
 8002d54:	2380      	movs	r3, #128	@ 0x80
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	400b      	ands	r3, r1
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	2138      	movs	r1, #56	@ 0x38
 8002d62:	400b      	ands	r3, r1
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	2180      	movs	r1, #128	@ 0x80
 8002d6c:	400b      	ands	r3, r1
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	0011      	movs	r1, r2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	019b      	lsls	r3, r3, #6
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	2110      	movs	r1, #16
 8002d94:	400b      	ands	r3, r1
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9c:	2108      	movs	r1, #8
 8002d9e:	400b      	ands	r3, r1
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68d9      	ldr	r1, [r3, #12]
 8002da6:	23f0      	movs	r3, #240	@ 0xf0
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	400b      	ands	r3, r1
 8002dac:	431a      	orrs	r2, r3
 8002dae:	0011      	movs	r1, r2
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	2380      	movs	r3, #128	@ 0x80
 8002db4:	015b      	lsls	r3, r3, #5
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69da      	ldr	r2, [r3, #28]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4907      	ldr	r1, [pc, #28]	@ (8002de8 <HAL_SPI_Init+0x16c>)
 8002dcc:	400a      	ands	r2, r1
 8002dce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	225d      	movs	r2, #93	@ 0x5d
 8002dda:	2101      	movs	r1, #1
 8002ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b004      	add	sp, #16
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	fffff7ff 	.word	0xfffff7ff

08002dec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	1dbb      	adds	r3, r7, #6
 8002dfa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dfc:	231f      	movs	r3, #31
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	225c      	movs	r2, #92	@ 0x5c
 8002e08:	5c9b      	ldrb	r3, [r3, r2]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_SPI_Transmit+0x26>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e147      	b.n	80030a2 <HAL_SPI_Transmit+0x2b6>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	225c      	movs	r2, #92	@ 0x5c
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e1a:	f7fe f9f1 	bl	8001200 <HAL_GetTick>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e22:	2316      	movs	r3, #22
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	1dba      	adds	r2, r7, #6
 8002e28:	8812      	ldrh	r2, [r2, #0]
 8002e2a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	225d      	movs	r2, #93	@ 0x5d
 8002e30:	5c9b      	ldrb	r3, [r3, r2]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d004      	beq.n	8002e42 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002e38:	231f      	movs	r3, #31
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e40:	e128      	b.n	8003094 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_SPI_Transmit+0x64>
 8002e48:	1dbb      	adds	r3, r7, #6
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d104      	bne.n	8002e5a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002e50:	231f      	movs	r3, #31
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e58:	e11c      	b.n	8003094 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	225d      	movs	r2, #93	@ 0x5d
 8002e5e:	2103      	movs	r1, #3
 8002e60:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1dba      	adds	r2, r7, #6
 8002e72:	8812      	ldrh	r2, [r2, #0]
 8002e74:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1dba      	adds	r2, r7, #6
 8002e7a:	8812      	ldrh	r2, [r2, #0]
 8002e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2244      	movs	r2, #68	@ 0x44
 8002e88:	2100      	movs	r1, #0
 8002e8a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2246      	movs	r2, #70	@ 0x46
 8002e90:	2100      	movs	r1, #0
 8002e92:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	2380      	movs	r3, #128	@ 0x80
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d110      	bne.n	8002ece <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2140      	movs	r1, #64	@ 0x40
 8002eb8:	438a      	bics	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2180      	movs	r1, #128	@ 0x80
 8002ec8:	01c9      	lsls	r1, r1, #7
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2240      	movs	r2, #64	@ 0x40
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b40      	cmp	r3, #64	@ 0x40
 8002eda:	d007      	beq.n	8002eec <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2140      	movs	r1, #64	@ 0x40
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	23e0      	movs	r3, #224	@ 0xe0
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d952      	bls.n	8002f9e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <HAL_SPI_Transmit+0x11e>
 8002f00:	2316      	movs	r3, #22
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d143      	bne.n	8002f92 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0e:	881a      	ldrh	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1a:	1c9a      	adds	r2, r3, #2
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f2e:	e030      	b.n	8002f92 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2202      	movs	r2, #2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d112      	bne.n	8002f64 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f42:	881a      	ldrh	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4e:	1c9a      	adds	r2, r3, #2
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f62:	e016      	b.n	8002f92 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f64:	f7fe f94c 	bl	8001200 <HAL_GetTick>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d802      	bhi.n	8002f7a <HAL_SPI_Transmit+0x18e>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	3301      	adds	r3, #1
 8002f78:	d102      	bne.n	8002f80 <HAL_SPI_Transmit+0x194>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d108      	bne.n	8002f92 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002f80:	231f      	movs	r3, #31
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	2203      	movs	r2, #3
 8002f86:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	225d      	movs	r2, #93	@ 0x5d
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002f90:	e080      	b.n	8003094 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1c9      	bne.n	8002f30 <HAL_SPI_Transmit+0x144>
 8002f9c:	e053      	b.n	8003046 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d004      	beq.n	8002fb0 <HAL_SPI_Transmit+0x1c4>
 8002fa6:	2316      	movs	r3, #22
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d145      	bne.n	800303c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002fd6:	e031      	b.n	800303c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d113      	bne.n	800300e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	7812      	ldrb	r2, [r2, #0]
 8002ff2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800300c:	e016      	b.n	800303c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800300e:	f7fe f8f7 	bl	8001200 <HAL_GetTick>
 8003012:	0002      	movs	r2, r0
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d802      	bhi.n	8003024 <HAL_SPI_Transmit+0x238>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	3301      	adds	r3, #1
 8003022:	d102      	bne.n	800302a <HAL_SPI_Transmit+0x23e>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800302a:	231f      	movs	r3, #31
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	2203      	movs	r2, #3
 8003030:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	225d      	movs	r2, #93	@ 0x5d
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]
          goto error;
 800303a:	e02b      	b.n	8003094 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1c8      	bne.n	8002fd8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	6839      	ldr	r1, [r7, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	0018      	movs	r0, r3
 800304e:	f000 f95d 	bl	800330c <SPI_EndRxTxTransaction>
 8003052:	1e03      	subs	r3, r0, #0
 8003054:	d002      	beq.n	800305c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003064:	2300      	movs	r3, #0
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003082:	231f      	movs	r3, #31
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	2201      	movs	r2, #1
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e003      	b.n	8003094 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	225d      	movs	r2, #93	@ 0x5d
 8003090:	2101      	movs	r1, #1
 8003092:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	225c      	movs	r2, #92	@ 0x5c
 8003098:	2100      	movs	r1, #0
 800309a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800309c:	231f      	movs	r3, #31
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	781b      	ldrb	r3, [r3, #0]
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b008      	add	sp, #32
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	1dfb      	adds	r3, r7, #7
 80030ba:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030bc:	f7fe f8a0 	bl	8001200 <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	18d3      	adds	r3, r2, r3
 80030ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030cc:	f7fe f898 	bl	8001200 <HAL_GetTick>
 80030d0:	0003      	movs	r3, r0
 80030d2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030d4:	4b3a      	ldr	r3, [pc, #232]	@ (80031c0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	015b      	lsls	r3, r3, #5
 80030da:	0d1b      	lsrs	r3, r3, #20
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	4353      	muls	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030e2:	e058      	b.n	8003196 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	3301      	adds	r3, #1
 80030e8:	d055      	beq.n	8003196 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030ea:	f7fe f889 	bl	8001200 <HAL_GetTick>
 80030ee:	0002      	movs	r2, r0
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d902      	bls.n	8003100 <SPI_WaitFlagStateUntilTimeout+0x54>
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d142      	bne.n	8003186 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	21e0      	movs	r1, #224	@ 0xe0
 800310c:	438a      	bics	r2, r1
 800310e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	2382      	movs	r3, #130	@ 0x82
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	429a      	cmp	r2, r3
 800311a:	d113      	bne.n	8003144 <SPI_WaitFlagStateUntilTimeout+0x98>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	2380      	movs	r3, #128	@ 0x80
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	429a      	cmp	r2, r3
 8003126:	d005      	beq.n	8003134 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	2380      	movs	r3, #128	@ 0x80
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	429a      	cmp	r2, r3
 8003132:	d107      	bne.n	8003144 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2140      	movs	r1, #64	@ 0x40
 8003140:	438a      	bics	r2, r1
 8003142:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003148:	2380      	movs	r3, #128	@ 0x80
 800314a:	019b      	lsls	r3, r3, #6
 800314c:	429a      	cmp	r2, r3
 800314e:	d110      	bne.n	8003172 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	491a      	ldr	r1, [pc, #104]	@ (80031c4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800315c:	400a      	ands	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2180      	movs	r1, #128	@ 0x80
 800316c:	0189      	lsls	r1, r1, #6
 800316e:	430a      	orrs	r2, r1
 8003170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	225d      	movs	r2, #93	@ 0x5d
 8003176:	2101      	movs	r1, #1
 8003178:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	225c      	movs	r2, #92	@ 0x5c
 800317e:	2100      	movs	r1, #0
 8003180:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e017      	b.n	80031b6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	3b01      	subs	r3, #1
 8003194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	4013      	ands	r3, r2
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	425a      	negs	r2, r3
 80031a6:	4153      	adcs	r3, r2
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	001a      	movs	r2, r3
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d197      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b008      	add	sp, #32
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	20000000 	.word	0x20000000
 80031c4:	ffffdfff 	.word	0xffffdfff

080031c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	@ 0x28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80031d6:	2317      	movs	r3, #23
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031de:	f7fe f80f 	bl	8001200 <HAL_GetTick>
 80031e2:	0002      	movs	r2, r0
 80031e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	18d3      	adds	r3, r2, r3
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80031ee:	f7fe f807 	bl	8001200 <HAL_GetTick>
 80031f2:	0003      	movs	r3, r0
 80031f4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	330c      	adds	r3, #12
 80031fc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031fe:	4b41      	ldr	r3, [pc, #260]	@ (8003304 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	0013      	movs	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	189b      	adds	r3, r3, r2
 8003208:	00da      	lsls	r2, r3, #3
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	0d1b      	lsrs	r3, r3, #20
 800320e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003210:	4353      	muls	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003214:	e068      	b.n	80032e8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	23c0      	movs	r3, #192	@ 0xc0
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	429a      	cmp	r2, r3
 800321e:	d10a      	bne.n	8003236 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d107      	bne.n	8003236 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	2117      	movs	r1, #23
 800322e:	187b      	adds	r3, r7, r1
 8003230:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003232:	187b      	adds	r3, r7, r1
 8003234:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	3301      	adds	r3, #1
 800323a:	d055      	beq.n	80032e8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800323c:	f7fd ffe0 	bl	8001200 <HAL_GetTick>
 8003240:	0002      	movs	r2, r0
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003248:	429a      	cmp	r2, r3
 800324a:	d902      	bls.n	8003252 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	2b00      	cmp	r3, #0
 8003250:	d142      	bne.n	80032d8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	21e0      	movs	r1, #224	@ 0xe0
 800325e:	438a      	bics	r2, r1
 8003260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	2382      	movs	r3, #130	@ 0x82
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	429a      	cmp	r2, r3
 800326c:	d113      	bne.n	8003296 <SPI_WaitFifoStateUntilTimeout+0xce>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	2380      	movs	r3, #128	@ 0x80
 8003274:	021b      	lsls	r3, r3, #8
 8003276:	429a      	cmp	r2, r3
 8003278:	d005      	beq.n	8003286 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	2380      	movs	r3, #128	@ 0x80
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	429a      	cmp	r2, r3
 8003284:	d107      	bne.n	8003296 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2140      	movs	r1, #64	@ 0x40
 8003292:	438a      	bics	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800329a:	2380      	movs	r3, #128	@ 0x80
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	429a      	cmp	r2, r3
 80032a0:	d110      	bne.n	80032c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4916      	ldr	r1, [pc, #88]	@ (8003308 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80032ae:	400a      	ands	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2180      	movs	r1, #128	@ 0x80
 80032be:	0189      	lsls	r1, r1, #6
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	225d      	movs	r2, #93	@ 0x5d
 80032c8:	2101      	movs	r1, #1
 80032ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	225c      	movs	r2, #92	@ 0x5c
 80032d0:	2100      	movs	r1, #0
 80032d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e010      	b.n	80032fa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4013      	ands	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d18e      	bne.n	8003216 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	0018      	movs	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b00a      	add	sp, #40	@ 0x28
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	20000000 	.word	0x20000000
 8003308:	ffffdfff 	.word	0xffffdfff

0800330c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	23c0      	movs	r3, #192	@ 0xc0
 800331c:	0159      	lsls	r1, r3, #5
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	0013      	movs	r3, r2
 8003326:	2200      	movs	r2, #0
 8003328:	f7ff ff4e 	bl	80031c8 <SPI_WaitFifoStateUntilTimeout>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d007      	beq.n	8003340 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003334:	2220      	movs	r2, #32
 8003336:	431a      	orrs	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e027      	b.n	8003390 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	0013      	movs	r3, r2
 800334a:	2200      	movs	r2, #0
 800334c:	2180      	movs	r1, #128	@ 0x80
 800334e:	f7ff fead 	bl	80030ac <SPI_WaitFlagStateUntilTimeout>
 8003352:	1e03      	subs	r3, r0, #0
 8003354:	d007      	beq.n	8003366 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335a:	2220      	movs	r2, #32
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e014      	b.n	8003390 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	23c0      	movs	r3, #192	@ 0xc0
 800336a:	00d9      	lsls	r1, r3, #3
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	0013      	movs	r3, r2
 8003374:	2200      	movs	r2, #0
 8003376:	f7ff ff27 	bl	80031c8 <SPI_WaitFifoStateUntilTimeout>
 800337a:	1e03      	subs	r3, r0, #0
 800337c:	d007      	beq.n	800338e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003382:	2220      	movs	r2, #32
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e000      	b.n	8003390 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	0018      	movs	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	b004      	add	sp, #16
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e042      	b.n	8003430 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	223d      	movs	r2, #61	@ 0x3d
 80033ae:	5c9b      	ldrb	r3, [r3, r2]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d107      	bne.n	80033c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	223c      	movs	r2, #60	@ 0x3c
 80033ba:	2100      	movs	r1, #0
 80033bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7fd fe45 	bl	8001050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	223d      	movs	r2, #61	@ 0x3d
 80033ca:	2102      	movs	r1, #2
 80033cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	0019      	movs	r1, r3
 80033d8:	0010      	movs	r0, r2
 80033da:	f000 fa89 	bl	80038f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2246      	movs	r2, #70	@ 0x46
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	223e      	movs	r2, #62	@ 0x3e
 80033ea:	2101      	movs	r1, #1
 80033ec:	5499      	strb	r1, [r3, r2]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	223f      	movs	r2, #63	@ 0x3f
 80033f2:	2101      	movs	r1, #1
 80033f4:	5499      	strb	r1, [r3, r2]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2240      	movs	r2, #64	@ 0x40
 80033fa:	2101      	movs	r1, #1
 80033fc:	5499      	strb	r1, [r3, r2]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2241      	movs	r2, #65	@ 0x41
 8003402:	2101      	movs	r1, #1
 8003404:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2242      	movs	r2, #66	@ 0x42
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2243      	movs	r2, #67	@ 0x43
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2244      	movs	r2, #68	@ 0x44
 800341a:	2101      	movs	r1, #1
 800341c:	5499      	strb	r1, [r3, r2]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2245      	movs	r2, #69	@ 0x45
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	223d      	movs	r2, #61	@ 0x3d
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	223d      	movs	r2, #61	@ 0x3d
 8003444:	5c9b      	ldrb	r3, [r3, r2]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d001      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e03b      	b.n	80034c8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	223d      	movs	r2, #61	@ 0x3d
 8003454:	2102      	movs	r1, #2
 8003456:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2101      	movs	r1, #1
 8003464:	430a      	orrs	r2, r1
 8003466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a18      	ldr	r2, [pc, #96]	@ (80034d0 <HAL_TIM_Base_Start_IT+0x98>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00f      	beq.n	8003492 <HAL_TIM_Base_Start_IT+0x5a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	2380      	movs	r3, #128	@ 0x80
 8003478:	05db      	lsls	r3, r3, #23
 800347a:	429a      	cmp	r2, r3
 800347c:	d009      	beq.n	8003492 <HAL_TIM_Base_Start_IT+0x5a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a14      	ldr	r2, [pc, #80]	@ (80034d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d004      	beq.n	8003492 <HAL_TIM_Base_Start_IT+0x5a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a12      	ldr	r2, [pc, #72]	@ (80034d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d111      	bne.n	80034b6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2207      	movs	r2, #7
 800349a:	4013      	ands	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b06      	cmp	r3, #6
 80034a2:	d010      	beq.n	80034c6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2101      	movs	r1, #1
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b4:	e007      	b.n	80034c6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2101      	movs	r1, #1
 80034c2:	430a      	orrs	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	0018      	movs	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b004      	add	sp, #16
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40014000 	.word	0x40014000

080034dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2202      	movs	r2, #2
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d124      	bne.n	800353c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2202      	movs	r2, #2
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d11d      	bne.n	800353c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2203      	movs	r2, #3
 8003506:	4252      	negs	r2, r2
 8003508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2203      	movs	r2, #3
 8003518:	4013      	ands	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	0018      	movs	r0, r3
 8003520:	f000 f9ce 	bl	80038c0 <HAL_TIM_IC_CaptureCallback>
 8003524:	e007      	b.n	8003536 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	0018      	movs	r0, r3
 800352a:	f000 f9c1 	bl	80038b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0018      	movs	r0, r3
 8003532:	f000 f9cd 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2204      	movs	r2, #4
 8003544:	4013      	ands	r3, r2
 8003546:	2b04      	cmp	r3, #4
 8003548:	d125      	bne.n	8003596 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2204      	movs	r2, #4
 8003552:	4013      	ands	r3, r2
 8003554:	2b04      	cmp	r3, #4
 8003556:	d11e      	bne.n	8003596 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2205      	movs	r2, #5
 800355e:	4252      	negs	r2, r2
 8003560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2202      	movs	r2, #2
 8003566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	23c0      	movs	r3, #192	@ 0xc0
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4013      	ands	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f000 f9a1 	bl	80038c0 <HAL_TIM_IC_CaptureCallback>
 800357e:	e007      	b.n	8003590 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	0018      	movs	r0, r3
 8003584:	f000 f994 	bl	80038b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 f9a0 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2208      	movs	r2, #8
 800359e:	4013      	ands	r3, r2
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d124      	bne.n	80035ee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2208      	movs	r2, #8
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d11d      	bne.n	80035ee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2209      	movs	r2, #9
 80035b8:	4252      	negs	r2, r2
 80035ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2204      	movs	r2, #4
 80035c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	2203      	movs	r2, #3
 80035ca:	4013      	ands	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 f975 	bl	80038c0 <HAL_TIM_IC_CaptureCallback>
 80035d6:	e007      	b.n	80035e8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 f968 	bl	80038b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 f974 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2210      	movs	r2, #16
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b10      	cmp	r3, #16
 80035fa:	d125      	bne.n	8003648 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2210      	movs	r2, #16
 8003604:	4013      	ands	r3, r2
 8003606:	2b10      	cmp	r3, #16
 8003608:	d11e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2211      	movs	r2, #17
 8003610:	4252      	negs	r2, r2
 8003612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2208      	movs	r2, #8
 8003618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	23c0      	movs	r3, #192	@ 0xc0
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4013      	ands	r3, r2
 8003626:	d004      	beq.n	8003632 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	0018      	movs	r0, r3
 800362c:	f000 f948 	bl	80038c0 <HAL_TIM_IC_CaptureCallback>
 8003630:	e007      	b.n	8003642 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	0018      	movs	r0, r3
 8003636:	f000 f93b 	bl	80038b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 f947 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2201      	movs	r2, #1
 8003650:	4013      	ands	r3, r2
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10f      	bne.n	8003676 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	4013      	ands	r3, r2
 8003660:	2b01      	cmp	r3, #1
 8003662:	d108      	bne.n	8003676 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2202      	movs	r2, #2
 800366a:	4252      	negs	r2, r2
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	0018      	movs	r0, r3
 8003672:	f7fd f9e9 	bl	8000a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2280      	movs	r2, #128	@ 0x80
 800367e:	4013      	ands	r3, r2
 8003680:	2b80      	cmp	r3, #128	@ 0x80
 8003682:	d10f      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2280      	movs	r2, #128	@ 0x80
 800368c:	4013      	ands	r3, r2
 800368e:	2b80      	cmp	r3, #128	@ 0x80
 8003690:	d108      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2281      	movs	r2, #129	@ 0x81
 8003698:	4252      	negs	r2, r2
 800369a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 faa6 	bl	8003bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2240      	movs	r2, #64	@ 0x40
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b40      	cmp	r3, #64	@ 0x40
 80036b0:	d10f      	bne.n	80036d2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2240      	movs	r2, #64	@ 0x40
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b40      	cmp	r3, #64	@ 0x40
 80036be:	d108      	bne.n	80036d2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2241      	movs	r2, #65	@ 0x41
 80036c6:	4252      	negs	r2, r2
 80036c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	0018      	movs	r0, r3
 80036ce:	f000 f907 	bl	80038e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2220      	movs	r2, #32
 80036da:	4013      	ands	r3, r2
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d10f      	bne.n	8003700 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d108      	bne.n	8003700 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2221      	movs	r2, #33	@ 0x21
 80036f4:	4252      	negs	r2, r2
 80036f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 fa70 	bl	8003be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003700:	46c0      	nop			@ (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	b002      	add	sp, #8
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	230f      	movs	r3, #15
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	223c      	movs	r2, #60	@ 0x3c
 800371e:	5c9b      	ldrb	r3, [r3, r2]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_TIM_ConfigClockSource+0x20>
 8003724:	2302      	movs	r3, #2
 8003726:	e0bc      	b.n	80038a2 <HAL_TIM_ConfigClockSource+0x19a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	223c      	movs	r2, #60	@ 0x3c
 800372c:	2101      	movs	r1, #1
 800372e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	223d      	movs	r2, #61	@ 0x3d
 8003734:	2102      	movs	r1, #2
 8003736:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2277      	movs	r2, #119	@ 0x77
 8003744:	4393      	bics	r3, r2
 8003746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4a58      	ldr	r2, [pc, #352]	@ (80038ac <HAL_TIM_ConfigClockSource+0x1a4>)
 800374c:	4013      	ands	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2280      	movs	r2, #128	@ 0x80
 800375e:	0192      	lsls	r2, r2, #6
 8003760:	4293      	cmp	r3, r2
 8003762:	d040      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0xde>
 8003764:	2280      	movs	r2, #128	@ 0x80
 8003766:	0192      	lsls	r2, r2, #6
 8003768:	4293      	cmp	r3, r2
 800376a:	d900      	bls.n	800376e <HAL_TIM_ConfigClockSource+0x66>
 800376c:	e088      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x178>
 800376e:	2280      	movs	r2, #128	@ 0x80
 8003770:	0152      	lsls	r2, r2, #5
 8003772:	4293      	cmp	r3, r2
 8003774:	d100      	bne.n	8003778 <HAL_TIM_ConfigClockSource+0x70>
 8003776:	e088      	b.n	800388a <HAL_TIM_ConfigClockSource+0x182>
 8003778:	2280      	movs	r2, #128	@ 0x80
 800377a:	0152      	lsls	r2, r2, #5
 800377c:	4293      	cmp	r3, r2
 800377e:	d900      	bls.n	8003782 <HAL_TIM_ConfigClockSource+0x7a>
 8003780:	e07e      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x178>
 8003782:	2b70      	cmp	r3, #112	@ 0x70
 8003784:	d018      	beq.n	80037b8 <HAL_TIM_ConfigClockSource+0xb0>
 8003786:	d900      	bls.n	800378a <HAL_TIM_ConfigClockSource+0x82>
 8003788:	e07a      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x178>
 800378a:	2b60      	cmp	r3, #96	@ 0x60
 800378c:	d04f      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x126>
 800378e:	d900      	bls.n	8003792 <HAL_TIM_ConfigClockSource+0x8a>
 8003790:	e076      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x178>
 8003792:	2b50      	cmp	r3, #80	@ 0x50
 8003794:	d03b      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x106>
 8003796:	d900      	bls.n	800379a <HAL_TIM_ConfigClockSource+0x92>
 8003798:	e072      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x178>
 800379a:	2b40      	cmp	r3, #64	@ 0x40
 800379c:	d057      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x146>
 800379e:	d900      	bls.n	80037a2 <HAL_TIM_ConfigClockSource+0x9a>
 80037a0:	e06e      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x178>
 80037a2:	2b30      	cmp	r3, #48	@ 0x30
 80037a4:	d063      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x166>
 80037a6:	d86b      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x178>
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d060      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x166>
 80037ac:	d868      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x178>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d05d      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x166>
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d05b      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x166>
 80037b6:	e063      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037c8:	f000 f98c 	bl	8003ae4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2277      	movs	r2, #119	@ 0x77
 80037d8:	4313      	orrs	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	609a      	str	r2, [r3, #8]
      break;
 80037e4:	e052      	b.n	800388c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037f6:	f000 f975 	bl	8003ae4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2180      	movs	r1, #128	@ 0x80
 8003806:	01c9      	lsls	r1, r1, #7
 8003808:	430a      	orrs	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
      break;
 800380c:	e03e      	b.n	800388c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800381a:	001a      	movs	r2, r3
 800381c:	f000 f8e8 	bl	80039f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2150      	movs	r1, #80	@ 0x50
 8003826:	0018      	movs	r0, r3
 8003828:	f000 f942 	bl	8003ab0 <TIM_ITRx_SetConfig>
      break;
 800382c:	e02e      	b.n	800388c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800383a:	001a      	movs	r2, r3
 800383c:	f000 f906 	bl	8003a4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2160      	movs	r1, #96	@ 0x60
 8003846:	0018      	movs	r0, r3
 8003848:	f000 f932 	bl	8003ab0 <TIM_ITRx_SetConfig>
      break;
 800384c:	e01e      	b.n	800388c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385a:	001a      	movs	r2, r3
 800385c:	f000 f8c8 	bl	80039f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2140      	movs	r1, #64	@ 0x40
 8003866:	0018      	movs	r0, r3
 8003868:	f000 f922 	bl	8003ab0 <TIM_ITRx_SetConfig>
      break;
 800386c:	e00e      	b.n	800388c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	0019      	movs	r1, r3
 8003878:	0010      	movs	r0, r2
 800387a:	f000 f919 	bl	8003ab0 <TIM_ITRx_SetConfig>
      break;
 800387e:	e005      	b.n	800388c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003880:	230f      	movs	r3, #15
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
      break;
 8003888:	e000      	b.n	800388c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800388a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	223d      	movs	r2, #61	@ 0x3d
 8003890:	2101      	movs	r1, #1
 8003892:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	223c      	movs	r2, #60	@ 0x3c
 8003898:	2100      	movs	r1, #0
 800389a:	5499      	strb	r1, [r3, r2]

  return status;
 800389c:	230f      	movs	r3, #15
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	781b      	ldrb	r3, [r3, #0]
}
 80038a2:	0018      	movs	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b004      	add	sp, #16
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	ffff00ff 	.word	0xffff00ff

080038b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038b8:	46c0      	nop			@ (mov r8, r8)
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b002      	add	sp, #8
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038c8:	46c0      	nop			@ (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b002      	add	sp, #8
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d8:	46c0      	nop			@ (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e8:	46c0      	nop			@ (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a34      	ldr	r2, [pc, #208]	@ (80039d4 <TIM_Base_SetConfig+0xe4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d008      	beq.n	800391a <TIM_Base_SetConfig+0x2a>
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	2380      	movs	r3, #128	@ 0x80
 800390c:	05db      	lsls	r3, r3, #23
 800390e:	429a      	cmp	r2, r3
 8003910:	d003      	beq.n	800391a <TIM_Base_SetConfig+0x2a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a30      	ldr	r2, [pc, #192]	@ (80039d8 <TIM_Base_SetConfig+0xe8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2270      	movs	r2, #112	@ 0x70
 800391e:	4393      	bics	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a29      	ldr	r2, [pc, #164]	@ (80039d4 <TIM_Base_SetConfig+0xe4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d018      	beq.n	8003966 <TIM_Base_SetConfig+0x76>
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	2380      	movs	r3, #128	@ 0x80
 8003938:	05db      	lsls	r3, r3, #23
 800393a:	429a      	cmp	r2, r3
 800393c:	d013      	beq.n	8003966 <TIM_Base_SetConfig+0x76>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a25      	ldr	r2, [pc, #148]	@ (80039d8 <TIM_Base_SetConfig+0xe8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00f      	beq.n	8003966 <TIM_Base_SetConfig+0x76>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a24      	ldr	r2, [pc, #144]	@ (80039dc <TIM_Base_SetConfig+0xec>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00b      	beq.n	8003966 <TIM_Base_SetConfig+0x76>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a23      	ldr	r2, [pc, #140]	@ (80039e0 <TIM_Base_SetConfig+0xf0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <TIM_Base_SetConfig+0x76>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a22      	ldr	r2, [pc, #136]	@ (80039e4 <TIM_Base_SetConfig+0xf4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_Base_SetConfig+0x76>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a21      	ldr	r2, [pc, #132]	@ (80039e8 <TIM_Base_SetConfig+0xf8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d108      	bne.n	8003978 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a20      	ldr	r2, [pc, #128]	@ (80039ec <TIM_Base_SetConfig+0xfc>)
 800396a:	4013      	ands	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2280      	movs	r2, #128	@ 0x80
 800397c:	4393      	bics	r3, r2
 800397e:	001a      	movs	r2, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a0c      	ldr	r2, [pc, #48]	@ (80039d4 <TIM_Base_SetConfig+0xe4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_Base_SetConfig+0xce>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a0d      	ldr	r2, [pc, #52]	@ (80039e0 <TIM_Base_SetConfig+0xf0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <TIM_Base_SetConfig+0xce>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a0c      	ldr	r2, [pc, #48]	@ (80039e4 <TIM_Base_SetConfig+0xf4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_Base_SetConfig+0xce>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a0b      	ldr	r2, [pc, #44]	@ (80039e8 <TIM_Base_SetConfig+0xf8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d103      	bne.n	80039c6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	615a      	str	r2, [r3, #20]
}
 80039cc:	46c0      	nop			@ (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b004      	add	sp, #16
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40002000 	.word	0x40002000
 80039e0:	40014000 	.word	0x40014000
 80039e4:	40014400 	.word	0x40014400
 80039e8:	40014800 	.word	0x40014800
 80039ec:	fffffcff 	.word	0xfffffcff

080039f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	2201      	movs	r2, #1
 8003a08:	4393      	bics	r3, r2
 8003a0a:	001a      	movs	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	22f0      	movs	r2, #240	@ 0xf0
 8003a1a:	4393      	bics	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	220a      	movs	r2, #10
 8003a2c:	4393      	bics	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	621a      	str	r2, [r3, #32]
}
 8003a44:	46c0      	nop			@ (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b006      	add	sp, #24
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	4393      	bics	r3, r2
 8003a60:	001a      	movs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	4a0d      	ldr	r2, [pc, #52]	@ (8003aac <TIM_TI2_ConfigInputStage+0x60>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	031b      	lsls	r3, r3, #12
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	22a0      	movs	r2, #160	@ 0xa0
 8003a88:	4393      	bics	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	46c0      	nop			@ (mov r8, r8)
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	b006      	add	sp, #24
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	ffff0fff 	.word	0xffff0fff

08003ab0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2270      	movs	r2, #112	@ 0x70
 8003ac4:	4393      	bics	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	2207      	movs	r2, #7
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	609a      	str	r2, [r3, #8]
}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b004      	add	sp, #16
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	4a09      	ldr	r2, [pc, #36]	@ (8003b20 <TIM_ETR_SetConfig+0x3c>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	021a      	lsls	r2, r3, #8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	609a      	str	r2, [r3, #8]
}
 8003b18:	46c0      	nop			@ (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b006      	add	sp, #24
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	ffff00ff 	.word	0xffff00ff

08003b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	223c      	movs	r2, #60	@ 0x3c
 8003b32:	5c9b      	ldrb	r3, [r3, r2]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e047      	b.n	8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	223c      	movs	r2, #60	@ 0x3c
 8003b40:	2101      	movs	r1, #1
 8003b42:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	223d      	movs	r2, #61	@ 0x3d
 8003b48:	2102      	movs	r1, #2
 8003b4a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2270      	movs	r2, #112	@ 0x70
 8003b60:	4393      	bics	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a16      	ldr	r2, [pc, #88]	@ (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00f      	beq.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	2380      	movs	r3, #128	@ 0x80
 8003b86:	05db      	lsls	r3, r3, #23
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d009      	beq.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a11      	ldr	r2, [pc, #68]	@ (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a10      	ldr	r2, [pc, #64]	@ (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d10c      	bne.n	8003bba <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2280      	movs	r2, #128	@ 0x80
 8003ba4:	4393      	bics	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	223d      	movs	r2, #61	@ 0x3d
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	223c      	movs	r2, #60	@ 0x3c
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b004      	add	sp, #16
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40014000 	.word	0x40014000

08003be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be8:	46c0      	nop			@ (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b002      	add	sp, #8
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf8:	46c0      	nop			@ (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b002      	add	sp, #8
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <memset>:
 8003c00:	0003      	movs	r3, r0
 8003c02:	1882      	adds	r2, r0, r2
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d100      	bne.n	8003c0a <memset+0xa>
 8003c08:	4770      	bx	lr
 8003c0a:	7019      	strb	r1, [r3, #0]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	e7f9      	b.n	8003c04 <memset+0x4>

08003c10 <__libc_init_array>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	2600      	movs	r6, #0
 8003c14:	4c0c      	ldr	r4, [pc, #48]	@ (8003c48 <__libc_init_array+0x38>)
 8003c16:	4d0d      	ldr	r5, [pc, #52]	@ (8003c4c <__libc_init_array+0x3c>)
 8003c18:	1b64      	subs	r4, r4, r5
 8003c1a:	10a4      	asrs	r4, r4, #2
 8003c1c:	42a6      	cmp	r6, r4
 8003c1e:	d109      	bne.n	8003c34 <__libc_init_array+0x24>
 8003c20:	2600      	movs	r6, #0
 8003c22:	f000 f819 	bl	8003c58 <_init>
 8003c26:	4c0a      	ldr	r4, [pc, #40]	@ (8003c50 <__libc_init_array+0x40>)
 8003c28:	4d0a      	ldr	r5, [pc, #40]	@ (8003c54 <__libc_init_array+0x44>)
 8003c2a:	1b64      	subs	r4, r4, r5
 8003c2c:	10a4      	asrs	r4, r4, #2
 8003c2e:	42a6      	cmp	r6, r4
 8003c30:	d105      	bne.n	8003c3e <__libc_init_array+0x2e>
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
 8003c34:	00b3      	lsls	r3, r6, #2
 8003c36:	58eb      	ldr	r3, [r5, r3]
 8003c38:	4798      	blx	r3
 8003c3a:	3601      	adds	r6, #1
 8003c3c:	e7ee      	b.n	8003c1c <__libc_init_array+0xc>
 8003c3e:	00b3      	lsls	r3, r6, #2
 8003c40:	58eb      	ldr	r3, [r5, r3]
 8003c42:	4798      	blx	r3
 8003c44:	3601      	adds	r6, #1
 8003c46:	e7f2      	b.n	8003c2e <__libc_init_array+0x1e>
 8003c48:	08003ca0 	.word	0x08003ca0
 8003c4c:	08003ca0 	.word	0x08003ca0
 8003c50:	08003ca4 	.word	0x08003ca4
 8003c54:	08003ca0 	.word	0x08003ca0

08003c58 <_init>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	46c0      	nop			@ (mov r8, r8)
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr

08003c64 <_fini>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	469e      	mov	lr, r3
 8003c6e:	4770      	bx	lr
