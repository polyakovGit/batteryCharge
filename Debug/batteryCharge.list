
batteryCharge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002258  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002318  08002318  00003318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002348  08002348  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002348  08002348  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002348  08002348  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002348  08002348  00003348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800234c  0800234c  0000334c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002350  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  0800235c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  0800235c  000040e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ed3  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001758  00000000  00000000  0000bf07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0000d660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006bd  00000000  00000000  0000df20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182d7  00000000  00000000  0000e5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb5b  00000000  00000000  000268b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2e9  00000000  00000000  0003240f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd6f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e9c  00000000  00000000  000bd73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000bf5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002300 	.word	0x08002300

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002300 	.word	0x08002300

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b08b      	sub	sp, #44	@ 0x2c
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t spi1_data=0b00000000;
 8000226:	2327      	movs	r3, #39	@ 0x27
 8000228:	18fb      	adds	r3, r7, r3
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
	uint8_t test_data=0b00000011;
 800022e:	2326      	movs	r3, #38	@ 0x26
 8000230:	18fb      	adds	r3, r7, r3
 8000232:	2203      	movs	r2, #3
 8000234:	701a      	strb	r2, [r3, #0]
	uint8_t spi2_data=0b11111111;
 8000236:	2125      	movs	r1, #37	@ 0x25
 8000238:	187b      	adds	r3, r7, r1
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	701a      	strb	r2, [r3, #0]
	uint8_t RG1=0b00000000,//диоды справа
 800023e:	2424      	movs	r4, #36	@ 0x24
 8000240:	193b      	adds	r3, r7, r4
 8000242:	2200      	movs	r2, #0
 8000244:	701a      	strb	r2, [r3, #0]
			RG2=0b00000000,//середина верхний
 8000246:	2523      	movs	r5, #35	@ 0x23
 8000248:	197b      	adds	r3, r7, r5
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
			RG3=0b00000000,//верхний слева
 800024e:	2622      	movs	r6, #34	@ 0x22
 8000250:	19bb      	adds	r3, r7, r6
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]
			RG4=0b00000000,//верхний справа
 8000256:	2321      	movs	r3, #33	@ 0x21
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
			RG5=0b00000000,//mixled
 800025e:	2020      	movs	r0, #32
 8000260:	183b      	adds	r3, r7, r0
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
			RG6=0b00000000,//диоды слева
 8000266:	231f      	movs	r3, #31
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
			RG7=0b00000000,//середина нижний
 800026e:	201e      	movs	r0, #30
 8000270:	183b      	adds	r3, r7, r0
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
			RG8=0b00000000,//левый нижний
 8000276:	231d      	movs	r3, #29
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
			RG9=0b00000000;//правый нижний
 800027e:	201c      	movs	r0, #28
 8000280:	183b      	adds	r3, r7, r0
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
	uint8_t transmit_data_all_on[9] = {RG1, RG2,RG3,RG4,RG5,RG6,RG7,RG8,RG9};
 8000286:	2010      	movs	r0, #16
 8000288:	183b      	adds	r3, r7, r0
 800028a:	193a      	adds	r2, r7, r4
 800028c:	7812      	ldrb	r2, [r2, #0]
 800028e:	701a      	strb	r2, [r3, #0]
 8000290:	183b      	adds	r3, r7, r0
 8000292:	197a      	adds	r2, r7, r5
 8000294:	7812      	ldrb	r2, [r2, #0]
 8000296:	705a      	strb	r2, [r3, #1]
 8000298:	183b      	adds	r3, r7, r0
 800029a:	19ba      	adds	r2, r7, r6
 800029c:	7812      	ldrb	r2, [r2, #0]
 800029e:	709a      	strb	r2, [r3, #2]
 80002a0:	183b      	adds	r3, r7, r0
 80002a2:	2221      	movs	r2, #33	@ 0x21
 80002a4:	18ba      	adds	r2, r7, r2
 80002a6:	7812      	ldrb	r2, [r2, #0]
 80002a8:	70da      	strb	r2, [r3, #3]
 80002aa:	183b      	adds	r3, r7, r0
 80002ac:	2220      	movs	r2, #32
 80002ae:	18ba      	adds	r2, r7, r2
 80002b0:	7812      	ldrb	r2, [r2, #0]
 80002b2:	711a      	strb	r2, [r3, #4]
 80002b4:	183b      	adds	r3, r7, r0
 80002b6:	221f      	movs	r2, #31
 80002b8:	18ba      	adds	r2, r7, r2
 80002ba:	7812      	ldrb	r2, [r2, #0]
 80002bc:	715a      	strb	r2, [r3, #5]
 80002be:	183b      	adds	r3, r7, r0
 80002c0:	221e      	movs	r2, #30
 80002c2:	18ba      	adds	r2, r7, r2
 80002c4:	7812      	ldrb	r2, [r2, #0]
 80002c6:	719a      	strb	r2, [r3, #6]
 80002c8:	183b      	adds	r3, r7, r0
 80002ca:	221d      	movs	r2, #29
 80002cc:	18ba      	adds	r2, r7, r2
 80002ce:	7812      	ldrb	r2, [r2, #0]
 80002d0:	71da      	strb	r2, [r3, #7]
 80002d2:	183b      	adds	r3, r7, r0
 80002d4:	201c      	movs	r0, #28
 80002d6:	183a      	adds	r2, r7, r0
 80002d8:	7812      	ldrb	r2, [r2, #0]
 80002da:	721a      	strb	r2, [r3, #8]
	uint8_t transmit_data_all_off[9] = {spi2_data, spi2_data,spi2_data,spi2_data,spi2_data,spi2_data,spi2_data,spi2_data,spi2_data};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	187a      	adds	r2, r7, r1
 80002e0:	7812      	ldrb	r2, [r2, #0]
 80002e2:	701a      	strb	r2, [r3, #0]
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	187a      	adds	r2, r7, r1
 80002e8:	7812      	ldrb	r2, [r2, #0]
 80002ea:	705a      	strb	r2, [r3, #1]
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	187a      	adds	r2, r7, r1
 80002f0:	7812      	ldrb	r2, [r2, #0]
 80002f2:	709a      	strb	r2, [r3, #2]
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	187a      	adds	r2, r7, r1
 80002f8:	7812      	ldrb	r2, [r2, #0]
 80002fa:	70da      	strb	r2, [r3, #3]
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	187a      	adds	r2, r7, r1
 8000300:	7812      	ldrb	r2, [r2, #0]
 8000302:	711a      	strb	r2, [r3, #4]
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	187a      	adds	r2, r7, r1
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	715a      	strb	r2, [r3, #5]
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	187a      	adds	r2, r7, r1
 8000310:	7812      	ldrb	r2, [r2, #0]
 8000312:	719a      	strb	r2, [r3, #6]
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	187a      	adds	r2, r7, r1
 8000318:	7812      	ldrb	r2, [r2, #0]
 800031a:	71da      	strb	r2, [r3, #7]
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	187a      	adds	r2, r7, r1
 8000320:	7812      	ldrb	r2, [r2, #0]
 8000322:	721a      	strb	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000324:	f000 fa86 	bl	8000834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000328:	f000 f822 	bl	8000370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032c:	f000 f8f8 	bl	8000520 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000330:	f000 f878 	bl	8000424 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000334:	f000 f8b6 	bl	80004a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //cs_reset();
  //HAL_SPI_Transmit(&hspi1, &spi2_data, 1, 5000);//
  HAL_SPI_Transmit(&hspi2, &transmit_data_all_off, 9, 5000);//SN74HC595N
 8000338:	4b0a      	ldr	r3, [pc, #40]	@ (8000364 <main+0x144>)
 800033a:	1d39      	adds	r1, r7, #4
 800033c:	480a      	ldr	r0, [pc, #40]	@ (8000368 <main+0x148>)
 800033e:	2209      	movs	r2, #9
 8000340:	f001 fcdc 	bl	8001cfc <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000344:	2380      	movs	r3, #128	@ 0x80
 8000346:	01db      	lsls	r3, r3, #7
 8000348:	4808      	ldr	r0, [pc, #32]	@ (800036c <main+0x14c>)
 800034a:	2200      	movs	r2, #0
 800034c:	0019      	movs	r1, r3
 800034e:	f000 fd01 	bl	8000d54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000352:	2380      	movs	r3, #128	@ 0x80
 8000354:	01db      	lsls	r3, r3, #7
 8000356:	4805      	ldr	r0, [pc, #20]	@ (800036c <main+0x14c>)
 8000358:	2201      	movs	r2, #1
 800035a:	0019      	movs	r1, r3
 800035c:	f000 fcfa 	bl	8000d54 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000360:	46c0      	nop			@ (mov r8, r8)
 8000362:	e7fd      	b.n	8000360 <main+0x140>
 8000364:	00001388 	.word	0x00001388
 8000368:	2000007c 	.word	0x2000007c
 800036c:	48000400 	.word	0x48000400

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b590      	push	{r4, r7, lr}
 8000372:	b099      	sub	sp, #100	@ 0x64
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	242c      	movs	r4, #44	@ 0x2c
 8000378:	193b      	adds	r3, r7, r4
 800037a:	0018      	movs	r0, r3
 800037c:	2334      	movs	r3, #52	@ 0x34
 800037e:	001a      	movs	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	f001 ff91 	bl	80022a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000386:	231c      	movs	r3, #28
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	0018      	movs	r0, r3
 800038c:	2310      	movs	r3, #16
 800038e:	001a      	movs	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	f001 ff89 	bl	80022a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000396:	003b      	movs	r3, r7
 8000398:	0018      	movs	r0, r3
 800039a:	231c      	movs	r3, #28
 800039c:	001a      	movs	r2, r3
 800039e:	2100      	movs	r1, #0
 80003a0:	f001 ff82 	bl	80022a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80003a4:	0021      	movs	r1, r4
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2222      	movs	r2, #34	@ 0x22
 80003aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2201      	movs	r2, #1
 80003b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2201      	movs	r2, #1
 80003b6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2210      	movs	r2, #16
 80003bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2200      	movs	r2, #0
 80003c2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 fe10 	bl	8000fec <HAL_RCC_OscConfig>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80003d0:	f000 f922 	bl	8000618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	211c      	movs	r1, #28
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2203      	movs	r2, #3
 80003e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2101      	movs	r1, #1
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 f980 	bl	80016f8 <HAL_RCC_ClockConfig>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003fc:	f000 f90c 	bl	8000618 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000400:	003b      	movs	r3, r7
 8000402:	2220      	movs	r2, #32
 8000404:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000406:	003b      	movs	r3, r7
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040c:	003b      	movs	r3, r7
 800040e:	0018      	movs	r0, r3
 8000410:	f001 fabe 	bl	8001990 <HAL_RCCEx_PeriphCLKConfig>
 8000414:	1e03      	subs	r3, r0, #0
 8000416:	d001      	beq.n	800041c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000418:	f000 f8fe 	bl	8000618 <Error_Handler>
  }
}
 800041c:	46c0      	nop			@ (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b019      	add	sp, #100	@ 0x64
 8000422:	bd90      	pop	{r4, r7, pc}

08000424 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000428:	4b1b      	ldr	r3, [pc, #108]	@ (8000498 <MX_I2C1_Init+0x74>)
 800042a:	4a1c      	ldr	r2, [pc, #112]	@ (800049c <MX_I2C1_Init+0x78>)
 800042c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800042e:	4b1a      	ldr	r3, [pc, #104]	@ (8000498 <MX_I2C1_Init+0x74>)
 8000430:	4a1b      	ldr	r2, [pc, #108]	@ (80004a0 <MX_I2C1_Init+0x7c>)
 8000432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000434:	4b18      	ldr	r3, [pc, #96]	@ (8000498 <MX_I2C1_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800043a:	4b17      	ldr	r3, [pc, #92]	@ (8000498 <MX_I2C1_Init+0x74>)
 800043c:	2201      	movs	r2, #1
 800043e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000440:	4b15      	ldr	r3, [pc, #84]	@ (8000498 <MX_I2C1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000446:	4b14      	ldr	r3, [pc, #80]	@ (8000498 <MX_I2C1_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800044c:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <MX_I2C1_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <MX_I2C1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000458:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <MX_I2C1_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800045e:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <MX_I2C1_Init+0x74>)
 8000460:	0018      	movs	r0, r3
 8000462:	f000 fc95 	bl	8000d90 <HAL_I2C_Init>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d001      	beq.n	800046e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800046a:	f000 f8d5 	bl	8000618 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800046e:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <MX_I2C1_Init+0x74>)
 8000470:	2100      	movs	r1, #0
 8000472:	0018      	movs	r0, r3
 8000474:	f000 fd22 	bl	8000ebc <HAL_I2CEx_ConfigAnalogFilter>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d001      	beq.n	8000480 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800047c:	f000 f8cc 	bl	8000618 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000480:	4b05      	ldr	r3, [pc, #20]	@ (8000498 <MX_I2C1_Init+0x74>)
 8000482:	2100      	movs	r1, #0
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fd65 	bl	8000f54 <HAL_I2CEx_ConfigDigitalFilter>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800048e:	f000 f8c3 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000028 	.word	0x20000028
 800049c:	40005400 	.word	0x40005400
 80004a0:	2000090e 	.word	0x2000090e

080004a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80004a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004aa:	4a1c      	ldr	r2, [pc, #112]	@ (800051c <MX_SPI2_Init+0x78>)
 80004ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80004ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004b0:	2282      	movs	r2, #130	@ 0x82
 80004b2:	0052      	lsls	r2, r2, #1
 80004b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004b6:	4b18      	ldr	r3, [pc, #96]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80004bc:	4b16      	ldr	r3, [pc, #88]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004be:	22e0      	movs	r2, #224	@ 0xe0
 80004c0:	00d2      	lsls	r2, r2, #3
 80004c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004c4:	4b14      	ldr	r3, [pc, #80]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ca:	4b13      	ldr	r3, [pc, #76]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004d0:	4b11      	ldr	r3, [pc, #68]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004d2:	2280      	movs	r2, #128	@ 0x80
 80004d4:	0092      	lsls	r2, r2, #2
 80004d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004da:	2208      	movs	r2, #8
 80004dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004de:	4b0e      	ldr	r3, [pc, #56]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004f0:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004f2:	2207      	movs	r2, #7
 80004f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004f6:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004fc:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <MX_SPI2_Init+0x74>)
 80004fe:	2208      	movs	r2, #8
 8000500:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000502:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <MX_SPI2_Init+0x74>)
 8000504:	0018      	movs	r0, r3
 8000506:	f001 fb41 	bl	8001b8c <HAL_SPI_Init>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d001      	beq.n	8000512 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800050e:	f000 f883 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	2000007c 	.word	0x2000007c
 800051c:	40003800 	.word	0x40003800

08000520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b089      	sub	sp, #36	@ 0x24
 8000524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	240c      	movs	r4, #12
 8000528:	193b      	adds	r3, r7, r4
 800052a:	0018      	movs	r0, r3
 800052c:	2314      	movs	r3, #20
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f001 feb9 	bl	80022a8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b36      	ldr	r3, [pc, #216]	@ (8000610 <MX_GPIO_Init+0xf0>)
 8000538:	695a      	ldr	r2, [r3, #20]
 800053a:	4b35      	ldr	r3, [pc, #212]	@ (8000610 <MX_GPIO_Init+0xf0>)
 800053c:	2180      	movs	r1, #128	@ 0x80
 800053e:	03c9      	lsls	r1, r1, #15
 8000540:	430a      	orrs	r2, r1
 8000542:	615a      	str	r2, [r3, #20]
 8000544:	4b32      	ldr	r3, [pc, #200]	@ (8000610 <MX_GPIO_Init+0xf0>)
 8000546:	695a      	ldr	r2, [r3, #20]
 8000548:	2380      	movs	r3, #128	@ 0x80
 800054a:	03db      	lsls	r3, r3, #15
 800054c:	4013      	ands	r3, r2
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b2f      	ldr	r3, [pc, #188]	@ (8000610 <MX_GPIO_Init+0xf0>)
 8000554:	695a      	ldr	r2, [r3, #20]
 8000556:	4b2e      	ldr	r3, [pc, #184]	@ (8000610 <MX_GPIO_Init+0xf0>)
 8000558:	2180      	movs	r1, #128	@ 0x80
 800055a:	02c9      	lsls	r1, r1, #11
 800055c:	430a      	orrs	r2, r1
 800055e:	615a      	str	r2, [r3, #20]
 8000560:	4b2b      	ldr	r3, [pc, #172]	@ (8000610 <MX_GPIO_Init+0xf0>)
 8000562:	695a      	ldr	r2, [r3, #20]
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	02db      	lsls	r3, r3, #11
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b28      	ldr	r3, [pc, #160]	@ (8000610 <MX_GPIO_Init+0xf0>)
 8000570:	695a      	ldr	r2, [r3, #20]
 8000572:	4b27      	ldr	r3, [pc, #156]	@ (8000610 <MX_GPIO_Init+0xf0>)
 8000574:	2180      	movs	r1, #128	@ 0x80
 8000576:	0289      	lsls	r1, r1, #10
 8000578:	430a      	orrs	r2, r1
 800057a:	615a      	str	r2, [r3, #20]
 800057c:	4b24      	ldr	r3, [pc, #144]	@ (8000610 <MX_GPIO_Init+0xf0>)
 800057e:	695a      	ldr	r2, [r3, #20]
 8000580:	2380      	movs	r3, #128	@ 0x80
 8000582:	029b      	lsls	r3, r3, #10
 8000584:	4013      	ands	r3, r2
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|RG_STROBE_Pin, GPIO_PIN_RESET);
 800058a:	2398      	movs	r3, #152	@ 0x98
 800058c:	01db      	lsls	r3, r3, #7
 800058e:	4821      	ldr	r0, [pc, #132]	@ (8000614 <MX_GPIO_Init+0xf4>)
 8000590:	2200      	movs	r2, #0
 8000592:	0019      	movs	r1, r3
 8000594:	f000 fbde 	bl	8000d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000598:	2380      	movs	r3, #128	@ 0x80
 800059a:	015b      	lsls	r3, r3, #5
 800059c:	481d      	ldr	r0, [pc, #116]	@ (8000614 <MX_GPIO_Init+0xf4>)
 800059e:	2201      	movs	r2, #1
 80005a0:	0019      	movs	r1, r3
 80005a2:	f000 fbd7 	bl	8000d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80005a6:	23e0      	movs	r3, #224	@ 0xe0
 80005a8:	00d9      	lsls	r1, r3, #3
 80005aa:	2390      	movs	r3, #144	@ 0x90
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	2200      	movs	r2, #0
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fbcf 	bl	8000d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 PB12 RG_STROBE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|RG_STROBE_Pin;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	22b8      	movs	r2, #184	@ 0xb8
 80005ba:	01d2      	lsls	r2, r2, #7
 80005bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2201      	movs	r2, #1
 80005c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	4a10      	ldr	r2, [pc, #64]	@ (8000614 <MX_GPIO_Init+0xf4>)
 80005d4:	0019      	movs	r1, r3
 80005d6:	0010      	movs	r0, r2
 80005d8:	f000 fa44 	bl	8000a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80005dc:	0021      	movs	r1, r4
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	22e0      	movs	r2, #224	@ 0xe0
 80005e2:	00d2      	lsls	r2, r2, #3
 80005e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2201      	movs	r2, #1
 80005ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	187a      	adds	r2, r7, r1
 80005fa:	2390      	movs	r3, #144	@ 0x90
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fa2f 	bl	8000a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b009      	add	sp, #36	@ 0x24
 800060c:	bd90      	pop	{r4, r7, pc}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	40021000 	.word	0x40021000
 8000614:	48000400 	.word	0x48000400

08000618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
}
 800061e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000620:	46c0      	nop			@ (mov r8, r8)
 8000622:	e7fd      	b.n	8000620 <Error_Handler+0x8>

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <HAL_MspInit+0x44>)
 800062c:	699a      	ldr	r2, [r3, #24]
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <HAL_MspInit+0x44>)
 8000630:	2101      	movs	r1, #1
 8000632:	430a      	orrs	r2, r1
 8000634:	619a      	str	r2, [r3, #24]
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <HAL_MspInit+0x44>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	2201      	movs	r2, #1
 800063c:	4013      	ands	r3, r2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <HAL_MspInit+0x44>)
 8000644:	69da      	ldr	r2, [r3, #28]
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <HAL_MspInit+0x44>)
 8000648:	2180      	movs	r1, #128	@ 0x80
 800064a:	0549      	lsls	r1, r1, #21
 800064c:	430a      	orrs	r2, r1
 800064e:	61da      	str	r2, [r3, #28]
 8000650:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <HAL_MspInit+0x44>)
 8000652:	69da      	ldr	r2, [r3, #28]
 8000654:	2380      	movs	r3, #128	@ 0x80
 8000656:	055b      	lsls	r3, r3, #21
 8000658:	4013      	ands	r3, r2
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b002      	add	sp, #8
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b08b      	sub	sp, #44	@ 0x2c
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	2414      	movs	r4, #20
 8000676:	193b      	adds	r3, r7, r4
 8000678:	0018      	movs	r0, r3
 800067a:	2314      	movs	r3, #20
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f001 fe12 	bl	80022a8 <memset>
  if(hi2c->Instance==I2C1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <HAL_I2C_MspInit+0x90>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d132      	bne.n	80006f4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <HAL_I2C_MspInit+0x94>)
 8000690:	695a      	ldr	r2, [r3, #20]
 8000692:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <HAL_I2C_MspInit+0x94>)
 8000694:	2180      	movs	r1, #128	@ 0x80
 8000696:	02c9      	lsls	r1, r1, #11
 8000698:	430a      	orrs	r2, r1
 800069a:	615a      	str	r2, [r3, #20]
 800069c:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <HAL_I2C_MspInit+0x94>)
 800069e:	695a      	ldr	r2, [r3, #20]
 80006a0:	2380      	movs	r3, #128	@ 0x80
 80006a2:	02db      	lsls	r3, r3, #11
 80006a4:	4013      	ands	r3, r2
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	22c0      	movs	r2, #192	@ 0xc0
 80006ae:	0092      	lsls	r2, r2, #2
 80006b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b2:	0021      	movs	r1, r4
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2212      	movs	r2, #18
 80006b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2203      	movs	r2, #3
 80006c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2201      	movs	r2, #1
 80006ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000704 <HAL_I2C_MspInit+0x98>)
 80006d0:	0019      	movs	r1, r3
 80006d2:	0010      	movs	r0, r2
 80006d4:	f000 f9c6 	bl	8000a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006d8:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <HAL_I2C_MspInit+0x94>)
 80006da:	69da      	ldr	r2, [r3, #28]
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <HAL_I2C_MspInit+0x94>)
 80006de:	2180      	movs	r1, #128	@ 0x80
 80006e0:	0389      	lsls	r1, r1, #14
 80006e2:	430a      	orrs	r2, r1
 80006e4:	61da      	str	r2, [r3, #28]
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <HAL_I2C_MspInit+0x94>)
 80006e8:	69da      	ldr	r2, [r3, #28]
 80006ea:	2380      	movs	r3, #128	@ 0x80
 80006ec:	039b      	lsls	r3, r3, #14
 80006ee:	4013      	ands	r3, r2
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006f4:	46c0      	nop			@ (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b00b      	add	sp, #44	@ 0x2c
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	40005400 	.word	0x40005400
 8000700:	40021000 	.word	0x40021000
 8000704:	48000400 	.word	0x48000400

08000708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b08b      	sub	sp, #44	@ 0x2c
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	2414      	movs	r4, #20
 8000712:	193b      	adds	r3, r7, r4
 8000714:	0018      	movs	r0, r3
 8000716:	2314      	movs	r3, #20
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f001 fdc4 	bl	80022a8 <memset>
  if(hspi->Instance==SPI2)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <HAL_SPI_MspInit+0x90>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d132      	bne.n	8000790 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <HAL_SPI_MspInit+0x94>)
 800072c:	69da      	ldr	r2, [r3, #28]
 800072e:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <HAL_SPI_MspInit+0x94>)
 8000730:	2180      	movs	r1, #128	@ 0x80
 8000732:	01c9      	lsls	r1, r1, #7
 8000734:	430a      	orrs	r2, r1
 8000736:	61da      	str	r2, [r3, #28]
 8000738:	4b18      	ldr	r3, [pc, #96]	@ (800079c <HAL_SPI_MspInit+0x94>)
 800073a:	69da      	ldr	r2, [r3, #28]
 800073c:	2380      	movs	r3, #128	@ 0x80
 800073e:	01db      	lsls	r3, r3, #7
 8000740:	4013      	ands	r3, r2
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <HAL_SPI_MspInit+0x94>)
 8000748:	695a      	ldr	r2, [r3, #20]
 800074a:	4b14      	ldr	r3, [pc, #80]	@ (800079c <HAL_SPI_MspInit+0x94>)
 800074c:	2180      	movs	r1, #128	@ 0x80
 800074e:	02c9      	lsls	r1, r1, #11
 8000750:	430a      	orrs	r2, r1
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <HAL_SPI_MspInit+0x94>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	2380      	movs	r3, #128	@ 0x80
 800075a:	02db      	lsls	r3, r3, #11
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000762:	193b      	adds	r3, r7, r4
 8000764:	22a0      	movs	r2, #160	@ 0xa0
 8000766:	0212      	lsls	r2, r2, #8
 8000768:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	0021      	movs	r1, r4
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2202      	movs	r2, #2
 8000770:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2203      	movs	r2, #3
 800077c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	187b      	adds	r3, r7, r1
 8000786:	4a06      	ldr	r2, [pc, #24]	@ (80007a0 <HAL_SPI_MspInit+0x98>)
 8000788:	0019      	movs	r1, r3
 800078a:	0010      	movs	r0, r2
 800078c:	f000 f96a 	bl	8000a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b00b      	add	sp, #44	@ 0x2c
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	40003800 	.word	0x40003800
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000400 	.word	0x48000400

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	e7fd      	b.n	80007a8 <NMI_Handler+0x4>

080007ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	e7fd      	b.n	80007b0 <HardFault_Handler+0x4>

080007b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b8:	46c0      	nop			@ (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f87a 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e0:	480d      	ldr	r0, [pc, #52]	@ (8000818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007e4:	f7ff fff7 	bl	80007d6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480c      	ldr	r0, [pc, #48]	@ (800081c <LoopForever+0x6>)
  ldr r1, =_edata
 80007ea:	490d      	ldr	r1, [pc, #52]	@ (8000820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <LoopForever+0xe>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000800:	4c0a      	ldr	r4, [pc, #40]	@ (800082c <LoopForever+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800080e:	f001 fd53 	bl	80022b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fd05 	bl	8000220 <main>

08000816 <LoopForever>:

LoopForever:
    b LoopForever
 8000816:	e7fe      	b.n	8000816 <LoopForever>
  ldr   r0, =_estack
 8000818:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000824:	08002350 	.word	0x08002350
  ldr r2, =_sbss
 8000828:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800082c:	200000e4 	.word	0x200000e4

08000830 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC1_COMP_IRQHandler>
	...

08000834 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <HAL_Init+0x24>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_Init+0x24>)
 800083e:	2110      	movs	r1, #16
 8000840:	430a      	orrs	r2, r1
 8000842:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f809 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084a:	f7ff feeb 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800084e:	2300      	movs	r3, #0
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	40022000 	.word	0x40022000

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <HAL_InitTick+0x5c>)
 8000866:	681c      	ldr	r4, [r3, #0]
 8000868:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <HAL_InitTick+0x60>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	0019      	movs	r1, r3
 800086e:	23fa      	movs	r3, #250	@ 0xfa
 8000870:	0098      	lsls	r0, r3, #2
 8000872:	f7ff fc49 	bl	8000108 <__udivsi3>
 8000876:	0003      	movs	r3, r0
 8000878:	0019      	movs	r1, r3
 800087a:	0020      	movs	r0, r4
 800087c:	f7ff fc44 	bl	8000108 <__udivsi3>
 8000880:	0003      	movs	r3, r0
 8000882:	0018      	movs	r0, r3
 8000884:	f000 f8e1 	bl	8000a4a <HAL_SYSTICK_Config>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	e00f      	b.n	80008b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d80b      	bhi.n	80008ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	2301      	movs	r3, #1
 800089a:	425b      	negs	r3, r3
 800089c:	2200      	movs	r2, #0
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 f8be 	bl	8000a20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_InitTick+0x64>)
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b003      	add	sp, #12
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c8:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <HAL_IncTick+0x1c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	001a      	movs	r2, r3
 80008ce:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <HAL_IncTick+0x20>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	18d2      	adds	r2, r2, r3
 80008d4:	4b03      	ldr	r3, [pc, #12]	@ (80008e4 <HAL_IncTick+0x20>)
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	46c0      	nop			@ (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	20000008 	.word	0x20000008
 80008e4:	200000e0 	.word	0x200000e0

080008e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b02      	ldr	r3, [pc, #8]	@ (80008f8 <HAL_GetTick+0x10>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	200000e0 	.word	0x200000e0

080008fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	0002      	movs	r2, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000910:	d828      	bhi.n	8000964 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000912:	4a2f      	ldr	r2, [pc, #188]	@ (80009d0 <__NVIC_SetPriority+0xd4>)
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b25b      	sxtb	r3, r3
 800091a:	089b      	lsrs	r3, r3, #2
 800091c:	33c0      	adds	r3, #192	@ 0xc0
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	589b      	ldr	r3, [r3, r2]
 8000922:	1dfa      	adds	r2, r7, #7
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	0011      	movs	r1, r2
 8000928:	2203      	movs	r2, #3
 800092a:	400a      	ands	r2, r1
 800092c:	00d2      	lsls	r2, r2, #3
 800092e:	21ff      	movs	r1, #255	@ 0xff
 8000930:	4091      	lsls	r1, r2
 8000932:	000a      	movs	r2, r1
 8000934:	43d2      	mvns	r2, r2
 8000936:	401a      	ands	r2, r3
 8000938:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	019b      	lsls	r3, r3, #6
 800093e:	22ff      	movs	r2, #255	@ 0xff
 8000940:	401a      	ands	r2, r3
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	0018      	movs	r0, r3
 8000948:	2303      	movs	r3, #3
 800094a:	4003      	ands	r3, r0
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000950:	481f      	ldr	r0, [pc, #124]	@ (80009d0 <__NVIC_SetPriority+0xd4>)
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b25b      	sxtb	r3, r3
 8000958:	089b      	lsrs	r3, r3, #2
 800095a:	430a      	orrs	r2, r1
 800095c:	33c0      	adds	r3, #192	@ 0xc0
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000962:	e031      	b.n	80009c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000964:	4a1b      	ldr	r2, [pc, #108]	@ (80009d4 <__NVIC_SetPriority+0xd8>)
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	0019      	movs	r1, r3
 800096c:	230f      	movs	r3, #15
 800096e:	400b      	ands	r3, r1
 8000970:	3b08      	subs	r3, #8
 8000972:	089b      	lsrs	r3, r3, #2
 8000974:	3306      	adds	r3, #6
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	18d3      	adds	r3, r2, r3
 800097a:	3304      	adds	r3, #4
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	1dfa      	adds	r2, r7, #7
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	0011      	movs	r1, r2
 8000984:	2203      	movs	r2, #3
 8000986:	400a      	ands	r2, r1
 8000988:	00d2      	lsls	r2, r2, #3
 800098a:	21ff      	movs	r1, #255	@ 0xff
 800098c:	4091      	lsls	r1, r2
 800098e:	000a      	movs	r2, r1
 8000990:	43d2      	mvns	r2, r2
 8000992:	401a      	ands	r2, r3
 8000994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	22ff      	movs	r2, #255	@ 0xff
 800099c:	401a      	ands	r2, r3
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	0018      	movs	r0, r3
 80009a4:	2303      	movs	r3, #3
 80009a6:	4003      	ands	r3, r0
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ac:	4809      	ldr	r0, [pc, #36]	@ (80009d4 <__NVIC_SetPriority+0xd8>)
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	001c      	movs	r4, r3
 80009b4:	230f      	movs	r3, #15
 80009b6:	4023      	ands	r3, r4
 80009b8:	3b08      	subs	r3, #8
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	430a      	orrs	r2, r1
 80009be:	3306      	adds	r3, #6
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	18c3      	adds	r3, r0, r3
 80009c4:	3304      	adds	r3, #4
 80009c6:	601a      	str	r2, [r3, #0]
}
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b003      	add	sp, #12
 80009ce:	bd90      	pop	{r4, r7, pc}
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	2380      	movs	r3, #128	@ 0x80
 80009e6:	045b      	lsls	r3, r3, #17
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d301      	bcc.n	80009f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ec:	2301      	movs	r3, #1
 80009ee:	e010      	b.n	8000a12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <SysTick_Config+0x44>)
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	3a01      	subs	r2, #1
 80009f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f8:	2301      	movs	r3, #1
 80009fa:	425b      	negs	r3, r3
 80009fc:	2103      	movs	r1, #3
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff ff7c 	bl	80008fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <SysTick_Config+0x44>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0a:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <SysTick_Config+0x44>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	0018      	movs	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b002      	add	sp, #8
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	1c02      	adds	r2, r0, #0
 8000a30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f7ff ff5d 	bl	80008fc <__NVIC_SetPriority>
}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b004      	add	sp, #16
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff ffbf 	bl	80009d8 <SysTick_Config>
 8000a5a:	0003      	movs	r3, r0
}
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b002      	add	sp, #8
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a72:	e155      	b.n	8000d20 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	4091      	lsls	r1, r2
 8000a7e:	000a      	movs	r2, r1
 8000a80:	4013      	ands	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d100      	bne.n	8000a8c <HAL_GPIO_Init+0x28>
 8000a8a:	e146      	b.n	8000d1a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	2203      	movs	r2, #3
 8000a92:	4013      	ands	r3, r2
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d005      	beq.n	8000aa4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d130      	bne.n	8000b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	2203      	movs	r2, #3
 8000ab0:	409a      	lsls	r2, r3
 8000ab2:	0013      	movs	r3, r2
 8000ab4:	43da      	mvns	r2, r3
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68da      	ldr	r2, [r3, #12]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	409a      	lsls	r2, r3
 8000ac6:	0013      	movs	r3, r2
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ada:	2201      	movs	r2, #1
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	0013      	movs	r3, r2
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	091b      	lsrs	r3, r3, #4
 8000af0:	2201      	movs	r2, #1
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d017      	beq.n	8000b42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	43da      	mvns	r2, r3
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2203      	movs	r2, #3
 8000b48:	4013      	ands	r3, r2
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d123      	bne.n	8000b96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	08da      	lsrs	r2, r3, #3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3208      	adds	r2, #8
 8000b56:	0092      	lsls	r2, r2, #2
 8000b58:	58d3      	ldr	r3, [r2, r3]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	2207      	movs	r2, #7
 8000b60:	4013      	ands	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	220f      	movs	r2, #15
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	691a      	ldr	r2, [r3, #16]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	2107      	movs	r1, #7
 8000b7a:	400b      	ands	r3, r1
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	0013      	movs	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	08da      	lsrs	r2, r3, #3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3208      	adds	r2, #8
 8000b90:	0092      	lsls	r2, r2, #2
 8000b92:	6939      	ldr	r1, [r7, #16]
 8000b94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	23c0      	movs	r3, #192	@ 0xc0
 8000bd0:	029b      	lsls	r3, r3, #10
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	d100      	bne.n	8000bd8 <HAL_GPIO_Init+0x174>
 8000bd6:	e0a0      	b.n	8000d1a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd8:	4b57      	ldr	r3, [pc, #348]	@ (8000d38 <HAL_GPIO_Init+0x2d4>)
 8000bda:	699a      	ldr	r2, [r3, #24]
 8000bdc:	4b56      	ldr	r3, [pc, #344]	@ (8000d38 <HAL_GPIO_Init+0x2d4>)
 8000bde:	2101      	movs	r1, #1
 8000be0:	430a      	orrs	r2, r1
 8000be2:	619a      	str	r2, [r3, #24]
 8000be4:	4b54      	ldr	r3, [pc, #336]	@ (8000d38 <HAL_GPIO_Init+0x2d4>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	2201      	movs	r2, #1
 8000bea:	4013      	ands	r3, r2
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bf0:	4a52      	ldr	r2, [pc, #328]	@ (8000d3c <HAL_GPIO_Init+0x2d8>)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	089b      	lsrs	r3, r3, #2
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	589b      	ldr	r3, [r3, r2]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	2203      	movs	r2, #3
 8000c02:	4013      	ands	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	220f      	movs	r2, #15
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	43da      	mvns	r2, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	2390      	movs	r3, #144	@ 0x90
 8000c18:	05db      	lsls	r3, r3, #23
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d019      	beq.n	8000c52 <HAL_GPIO_Init+0x1ee>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a47      	ldr	r2, [pc, #284]	@ (8000d40 <HAL_GPIO_Init+0x2dc>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d013      	beq.n	8000c4e <HAL_GPIO_Init+0x1ea>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a46      	ldr	r2, [pc, #280]	@ (8000d44 <HAL_GPIO_Init+0x2e0>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d00d      	beq.n	8000c4a <HAL_GPIO_Init+0x1e6>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a45      	ldr	r2, [pc, #276]	@ (8000d48 <HAL_GPIO_Init+0x2e4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d007      	beq.n	8000c46 <HAL_GPIO_Init+0x1e2>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a44      	ldr	r2, [pc, #272]	@ (8000d4c <HAL_GPIO_Init+0x2e8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d101      	bne.n	8000c42 <HAL_GPIO_Init+0x1de>
 8000c3e:	2304      	movs	r3, #4
 8000c40:	e008      	b.n	8000c54 <HAL_GPIO_Init+0x1f0>
 8000c42:	2305      	movs	r3, #5
 8000c44:	e006      	b.n	8000c54 <HAL_GPIO_Init+0x1f0>
 8000c46:	2303      	movs	r3, #3
 8000c48:	e004      	b.n	8000c54 <HAL_GPIO_Init+0x1f0>
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	e002      	b.n	8000c54 <HAL_GPIO_Init+0x1f0>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e000      	b.n	8000c54 <HAL_GPIO_Init+0x1f0>
 8000c52:	2300      	movs	r3, #0
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	2103      	movs	r1, #3
 8000c58:	400a      	ands	r2, r1
 8000c5a:	0092      	lsls	r2, r2, #2
 8000c5c:	4093      	lsls	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c64:	4935      	ldr	r1, [pc, #212]	@ (8000d3c <HAL_GPIO_Init+0x2d8>)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	089b      	lsrs	r3, r3, #2
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c72:	4b37      	ldr	r3, [pc, #220]	@ (8000d50 <HAL_GPIO_Init+0x2ec>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	2380      	movs	r3, #128	@ 0x80
 8000c88:	035b      	lsls	r3, r3, #13
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	d003      	beq.n	8000c96 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c96:	4b2e      	ldr	r3, [pc, #184]	@ (8000d50 <HAL_GPIO_Init+0x2ec>)
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d50 <HAL_GPIO_Init+0x2ec>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	43da      	mvns	r2, r3
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	2380      	movs	r3, #128	@ 0x80
 8000cb2:	039b      	lsls	r3, r3, #14
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	d003      	beq.n	8000cc0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cc0:	4b23      	ldr	r3, [pc, #140]	@ (8000d50 <HAL_GPIO_Init+0x2ec>)
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000cc6:	4b22      	ldr	r3, [pc, #136]	@ (8000d50 <HAL_GPIO_Init+0x2ec>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	2380      	movs	r3, #128	@ 0x80
 8000cdc:	029b      	lsls	r3, r3, #10
 8000cde:	4013      	ands	r3, r2
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cea:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <HAL_GPIO_Init+0x2ec>)
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <HAL_GPIO_Init+0x2ec>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	43da      	mvns	r2, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	2380      	movs	r3, #128	@ 0x80
 8000d06:	025b      	lsls	r3, r3, #9
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_GPIO_Init+0x2ec>)
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	40da      	lsrs	r2, r3
 8000d28:	1e13      	subs	r3, r2, #0
 8000d2a:	d000      	beq.n	8000d2e <HAL_GPIO_Init+0x2ca>
 8000d2c:	e6a2      	b.n	8000a74 <HAL_GPIO_Init+0x10>
  } 
}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b006      	add	sp, #24
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010000 	.word	0x40010000
 8000d40:	48000400 	.word	0x48000400
 8000d44:	48000800 	.word	0x48000800
 8000d48:	48000c00 	.word	0x48000c00
 8000d4c:	48001000 	.word	0x48001000
 8000d50:	40010400 	.word	0x40010400

08000d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	0008      	movs	r0, r1
 8000d5e:	0011      	movs	r1, r2
 8000d60:	1cbb      	adds	r3, r7, #2
 8000d62:	1c02      	adds	r2, r0, #0
 8000d64:	801a      	strh	r2, [r3, #0]
 8000d66:	1c7b      	adds	r3, r7, #1
 8000d68:	1c0a      	adds	r2, r1, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d6c:	1c7b      	adds	r3, r7, #1
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d004      	beq.n	8000d7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d74:	1cbb      	adds	r3, r7, #2
 8000d76:	881a      	ldrh	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d7c:	e003      	b.n	8000d86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d7e:	1cbb      	adds	r3, r7, #2
 8000d80:	881a      	ldrh	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e082      	b.n	8000ea8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2241      	movs	r2, #65	@ 0x41
 8000da6:	5c9b      	ldrb	r3, [r3, r2]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d107      	bne.n	8000dbe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2240      	movs	r2, #64	@ 0x40
 8000db2:	2100      	movs	r1, #0
 8000db4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff fc57 	bl	800066c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2241      	movs	r2, #65	@ 0x41
 8000dc2:	2124      	movs	r1, #36	@ 0x24
 8000dc4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	438a      	bics	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4934      	ldr	r1, [pc, #208]	@ (8000eb0 <HAL_I2C_Init+0x120>)
 8000de0:	400a      	ands	r2, r1
 8000de2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4931      	ldr	r1, [pc, #196]	@ (8000eb4 <HAL_I2C_Init+0x124>)
 8000df0:	400a      	ands	r2, r1
 8000df2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d108      	bne.n	8000e0e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	0209      	lsls	r1, r1, #8
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	e007      	b.n	8000e1e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2184      	movs	r1, #132	@ 0x84
 8000e18:	0209      	lsls	r1, r1, #8
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d104      	bne.n	8000e30 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2280      	movs	r2, #128	@ 0x80
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	491f      	ldr	r1, [pc, #124]	@ (8000eb8 <HAL_I2C_Init+0x128>)
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	491a      	ldr	r1, [pc, #104]	@ (8000eb4 <HAL_I2C_Init+0x124>)
 8000e4c:	400a      	ands	r2, r1
 8000e4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69d9      	ldr	r1, [r3, #28]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a1a      	ldr	r2, [r3, #32]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2101      	movs	r1, #1
 8000e86:	430a      	orrs	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2241      	movs	r2, #65	@ 0x41
 8000e94:	2120      	movs	r1, #32
 8000e96:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2242      	movs	r2, #66	@ 0x42
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b002      	add	sp, #8
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	f0ffffff 	.word	0xf0ffffff
 8000eb4:	ffff7fff 	.word	0xffff7fff
 8000eb8:	02008000 	.word	0x02008000

08000ebc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2241      	movs	r2, #65	@ 0x41
 8000eca:	5c9b      	ldrb	r3, [r3, r2]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b20      	cmp	r3, #32
 8000ed0:	d138      	bne.n	8000f44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2240      	movs	r2, #64	@ 0x40
 8000ed6:	5c9b      	ldrb	r3, [r3, r2]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d101      	bne.n	8000ee0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000edc:	2302      	movs	r3, #2
 8000ede:	e032      	b.n	8000f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2240      	movs	r2, #64	@ 0x40
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2241      	movs	r2, #65	@ 0x41
 8000eec:	2124      	movs	r1, #36	@ 0x24
 8000eee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2101      	movs	r1, #1
 8000efc:	438a      	bics	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4911      	ldr	r1, [pc, #68]	@ (8000f50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6819      	ldr	r1, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2241      	movs	r2, #65	@ 0x41
 8000f34:	2120      	movs	r1, #32
 8000f36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2240      	movs	r2, #64	@ 0x40
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	e000      	b.n	8000f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f44:	2302      	movs	r3, #2
  }
}
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
 8000f50:	ffffefff 	.word	0xffffefff

08000f54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2241      	movs	r2, #65	@ 0x41
 8000f62:	5c9b      	ldrb	r3, [r3, r2]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b20      	cmp	r3, #32
 8000f68:	d139      	bne.n	8000fde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2240      	movs	r2, #64	@ 0x40
 8000f6e:	5c9b      	ldrb	r3, [r3, r2]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000f74:	2302      	movs	r3, #2
 8000f76:	e033      	b.n	8000fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2240      	movs	r2, #64	@ 0x40
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2241      	movs	r2, #65	@ 0x41
 8000f84:	2124      	movs	r1, #36	@ 0x24
 8000f86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2101      	movs	r1, #1
 8000f94:	438a      	bics	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4a11      	ldr	r2, [pc, #68]	@ (8000fe8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2241      	movs	r2, #65	@ 0x41
 8000fce:	2120      	movs	r1, #32
 8000fd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2240      	movs	r2, #64	@ 0x40
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000fde:	2302      	movs	r3, #2
  }
}
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b004      	add	sp, #16
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	fffff0ff 	.word	0xfffff0ff

08000fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f000 fb76 	bl	80016ec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2201      	movs	r2, #1
 8001006:	4013      	ands	r3, r2
 8001008:	d100      	bne.n	800100c <HAL_RCC_OscConfig+0x20>
 800100a:	e08e      	b.n	800112a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800100c:	4bc5      	ldr	r3, [pc, #788]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	220c      	movs	r2, #12
 8001012:	4013      	ands	r3, r2
 8001014:	2b04      	cmp	r3, #4
 8001016:	d00e      	beq.n	8001036 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001018:	4bc2      	ldr	r3, [pc, #776]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	220c      	movs	r2, #12
 800101e:	4013      	ands	r3, r2
 8001020:	2b08      	cmp	r3, #8
 8001022:	d117      	bne.n	8001054 <HAL_RCC_OscConfig+0x68>
 8001024:	4bbf      	ldr	r3, [pc, #764]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	23c0      	movs	r3, #192	@ 0xc0
 800102a:	025b      	lsls	r3, r3, #9
 800102c:	401a      	ands	r2, r3
 800102e:	2380      	movs	r3, #128	@ 0x80
 8001030:	025b      	lsls	r3, r3, #9
 8001032:	429a      	cmp	r2, r3
 8001034:	d10e      	bne.n	8001054 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001036:	4bbb      	ldr	r3, [pc, #748]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	029b      	lsls	r3, r3, #10
 800103e:	4013      	ands	r3, r2
 8001040:	d100      	bne.n	8001044 <HAL_RCC_OscConfig+0x58>
 8001042:	e071      	b.n	8001128 <HAL_RCC_OscConfig+0x13c>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d000      	beq.n	800104e <HAL_RCC_OscConfig+0x62>
 800104c:	e06c      	b.n	8001128 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	f000 fb4c 	bl	80016ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d107      	bne.n	800106c <HAL_RCC_OscConfig+0x80>
 800105c:	4bb1      	ldr	r3, [pc, #708]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4bb0      	ldr	r3, [pc, #704]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001062:	2180      	movs	r1, #128	@ 0x80
 8001064:	0249      	lsls	r1, r1, #9
 8001066:	430a      	orrs	r2, r1
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e02f      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10c      	bne.n	800108e <HAL_RCC_OscConfig+0xa2>
 8001074:	4bab      	ldr	r3, [pc, #684]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4baa      	ldr	r3, [pc, #680]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 800107a:	49ab      	ldr	r1, [pc, #684]	@ (8001328 <HAL_RCC_OscConfig+0x33c>)
 800107c:	400a      	ands	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	4ba8      	ldr	r3, [pc, #672]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4ba7      	ldr	r3, [pc, #668]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001086:	49a9      	ldr	r1, [pc, #676]	@ (800132c <HAL_RCC_OscConfig+0x340>)
 8001088:	400a      	ands	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e01e      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b05      	cmp	r3, #5
 8001094:	d10e      	bne.n	80010b4 <HAL_RCC_OscConfig+0xc8>
 8001096:	4ba3      	ldr	r3, [pc, #652]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4ba2      	ldr	r3, [pc, #648]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 800109c:	2180      	movs	r1, #128	@ 0x80
 800109e:	02c9      	lsls	r1, r1, #11
 80010a0:	430a      	orrs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	4b9f      	ldr	r3, [pc, #636]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b9e      	ldr	r3, [pc, #632]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80010aa:	2180      	movs	r1, #128	@ 0x80
 80010ac:	0249      	lsls	r1, r1, #9
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e00b      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
 80010b4:	4b9b      	ldr	r3, [pc, #620]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b9a      	ldr	r3, [pc, #616]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80010ba:	499b      	ldr	r1, [pc, #620]	@ (8001328 <HAL_RCC_OscConfig+0x33c>)
 80010bc:	400a      	ands	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	4b98      	ldr	r3, [pc, #608]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b97      	ldr	r3, [pc, #604]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80010c6:	4999      	ldr	r1, [pc, #612]	@ (800132c <HAL_RCC_OscConfig+0x340>)
 80010c8:	400a      	ands	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d014      	beq.n	80010fe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fc08 	bl	80008e8 <HAL_GetTick>
 80010d8:	0003      	movs	r3, r0
 80010da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010de:	f7ff fc03 	bl	80008e8 <HAL_GetTick>
 80010e2:	0002      	movs	r2, r0
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b64      	cmp	r3, #100	@ 0x64
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e2fd      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f0:	4b8c      	ldr	r3, [pc, #560]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2380      	movs	r3, #128	@ 0x80
 80010f6:	029b      	lsls	r3, r3, #10
 80010f8:	4013      	ands	r3, r2
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0xf2>
 80010fc:	e015      	b.n	800112a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fbf3 	bl	80008e8 <HAL_GetTick>
 8001102:	0003      	movs	r3, r0
 8001104:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001108:	f7ff fbee 	bl	80008e8 <HAL_GetTick>
 800110c:	0002      	movs	r2, r0
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	@ 0x64
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e2e8      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111a:	4b82      	ldr	r3, [pc, #520]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	2380      	movs	r3, #128	@ 0x80
 8001120:	029b      	lsls	r3, r3, #10
 8001122:	4013      	ands	r3, r2
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0x11c>
 8001126:	e000      	b.n	800112a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2202      	movs	r2, #2
 8001130:	4013      	ands	r3, r2
 8001132:	d100      	bne.n	8001136 <HAL_RCC_OscConfig+0x14a>
 8001134:	e06c      	b.n	8001210 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001136:	4b7b      	ldr	r3, [pc, #492]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	220c      	movs	r2, #12
 800113c:	4013      	ands	r3, r2
 800113e:	d00e      	beq.n	800115e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001140:	4b78      	ldr	r3, [pc, #480]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	220c      	movs	r2, #12
 8001146:	4013      	ands	r3, r2
 8001148:	2b08      	cmp	r3, #8
 800114a:	d11f      	bne.n	800118c <HAL_RCC_OscConfig+0x1a0>
 800114c:	4b75      	ldr	r3, [pc, #468]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	23c0      	movs	r3, #192	@ 0xc0
 8001152:	025b      	lsls	r3, r3, #9
 8001154:	401a      	ands	r2, r3
 8001156:	2380      	movs	r3, #128	@ 0x80
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	429a      	cmp	r2, r3
 800115c:	d116      	bne.n	800118c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115e:	4b71      	ldr	r3, [pc, #452]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2202      	movs	r2, #2
 8001164:	4013      	ands	r3, r2
 8001166:	d005      	beq.n	8001174 <HAL_RCC_OscConfig+0x188>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d001      	beq.n	8001174 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e2bb      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001174:	4b6b      	ldr	r3, [pc, #428]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	22f8      	movs	r2, #248	@ 0xf8
 800117a:	4393      	bics	r3, r2
 800117c:	0019      	movs	r1, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	00da      	lsls	r2, r3, #3
 8001184:	4b67      	ldr	r3, [pc, #412]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118a:	e041      	b.n	8001210 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d024      	beq.n	80011de <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001194:	4b63      	ldr	r3, [pc, #396]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b62      	ldr	r3, [pc, #392]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 800119a:	2101      	movs	r1, #1
 800119c:	430a      	orrs	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fba2 	bl	80008e8 <HAL_GetTick>
 80011a4:	0003      	movs	r3, r0
 80011a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011aa:	f7ff fb9d 	bl	80008e8 <HAL_GetTick>
 80011ae:	0002      	movs	r2, r0
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e297      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011bc:	4b59      	ldr	r3, [pc, #356]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2202      	movs	r2, #2
 80011c2:	4013      	ands	r3, r2
 80011c4:	d0f1      	beq.n	80011aa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c6:	4b57      	ldr	r3, [pc, #348]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	22f8      	movs	r2, #248	@ 0xf8
 80011cc:	4393      	bics	r3, r2
 80011ce:	0019      	movs	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	00da      	lsls	r2, r3, #3
 80011d6:	4b53      	ldr	r3, [pc, #332]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80011d8:	430a      	orrs	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e018      	b.n	8001210 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011de:	4b51      	ldr	r3, [pc, #324]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b50      	ldr	r3, [pc, #320]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80011e4:	2101      	movs	r1, #1
 80011e6:	438a      	bics	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ea:	f7ff fb7d 	bl	80008e8 <HAL_GetTick>
 80011ee:	0003      	movs	r3, r0
 80011f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff fb78 	bl	80008e8 <HAL_GetTick>
 80011f8:	0002      	movs	r2, r0
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e272      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001206:	4b47      	ldr	r3, [pc, #284]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2202      	movs	r2, #2
 800120c:	4013      	ands	r3, r2
 800120e:	d1f1      	bne.n	80011f4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2208      	movs	r2, #8
 8001216:	4013      	ands	r3, r2
 8001218:	d036      	beq.n	8001288 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d019      	beq.n	8001256 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001222:	4b40      	ldr	r3, [pc, #256]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001224:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001226:	4b3f      	ldr	r3, [pc, #252]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001228:	2101      	movs	r1, #1
 800122a:	430a      	orrs	r2, r1
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fb5b 	bl	80008e8 <HAL_GetTick>
 8001232:	0003      	movs	r3, r0
 8001234:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fb56 	bl	80008e8 <HAL_GetTick>
 800123c:	0002      	movs	r2, r0
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e250      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	4b36      	ldr	r3, [pc, #216]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 800124c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124e:	2202      	movs	r2, #2
 8001250:	4013      	ands	r3, r2
 8001252:	d0f1      	beq.n	8001238 <HAL_RCC_OscConfig+0x24c>
 8001254:	e018      	b.n	8001288 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001256:	4b33      	ldr	r3, [pc, #204]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001258:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800125a:	4b32      	ldr	r3, [pc, #200]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 800125c:	2101      	movs	r1, #1
 800125e:	438a      	bics	r2, r1
 8001260:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001262:	f7ff fb41 	bl	80008e8 <HAL_GetTick>
 8001266:	0003      	movs	r3, r0
 8001268:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fb3c 	bl	80008e8 <HAL_GetTick>
 8001270:	0002      	movs	r2, r0
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e236      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127e:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d1f1      	bne.n	800126c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2204      	movs	r2, #4
 800128e:	4013      	ands	r3, r2
 8001290:	d100      	bne.n	8001294 <HAL_RCC_OscConfig+0x2a8>
 8001292:	e0b5      	b.n	8001400 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001294:	201f      	movs	r0, #31
 8001296:	183b      	adds	r3, r7, r0
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129c:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	2380      	movs	r3, #128	@ 0x80
 80012a2:	055b      	lsls	r3, r3, #21
 80012a4:	4013      	ands	r3, r2
 80012a6:	d110      	bne.n	80012ca <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80012aa:	69da      	ldr	r2, [r3, #28]
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80012ae:	2180      	movs	r1, #128	@ 0x80
 80012b0:	0549      	lsls	r1, r1, #21
 80012b2:	430a      	orrs	r2, r1
 80012b4:	61da      	str	r2, [r3, #28]
 80012b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 80012b8:	69da      	ldr	r2, [r3, #28]
 80012ba:	2380      	movs	r3, #128	@ 0x80
 80012bc:	055b      	lsls	r3, r3, #21
 80012be:	4013      	ands	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012c4:	183b      	adds	r3, r7, r0
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <HAL_RCC_OscConfig+0x344>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	2380      	movs	r3, #128	@ 0x80
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4013      	ands	r3, r2
 80012d4:	d11a      	bne.n	800130c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d6:	4b16      	ldr	r3, [pc, #88]	@ (8001330 <HAL_RCC_OscConfig+0x344>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_RCC_OscConfig+0x344>)
 80012dc:	2180      	movs	r1, #128	@ 0x80
 80012de:	0049      	lsls	r1, r1, #1
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e4:	f7ff fb00 	bl	80008e8 <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ee:	f7ff fafb 	bl	80008e8 <HAL_GetTick>
 80012f2:	0002      	movs	r2, r0
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b64      	cmp	r3, #100	@ 0x64
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e1f5      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <HAL_RCC_OscConfig+0x344>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2380      	movs	r3, #128	@ 0x80
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4013      	ands	r3, r2
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10f      	bne.n	8001334 <HAL_RCC_OscConfig+0x348>
 8001314:	4b03      	ldr	r3, [pc, #12]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	4b02      	ldr	r3, [pc, #8]	@ (8001324 <HAL_RCC_OscConfig+0x338>)
 800131a:	2101      	movs	r1, #1
 800131c:	430a      	orrs	r2, r1
 800131e:	621a      	str	r2, [r3, #32]
 8001320:	e036      	b.n	8001390 <HAL_RCC_OscConfig+0x3a4>
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	40021000 	.word	0x40021000
 8001328:	fffeffff 	.word	0xfffeffff
 800132c:	fffbffff 	.word	0xfffbffff
 8001330:	40007000 	.word	0x40007000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10c      	bne.n	8001356 <HAL_RCC_OscConfig+0x36a>
 800133c:	4bca      	ldr	r3, [pc, #808]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 800133e:	6a1a      	ldr	r2, [r3, #32]
 8001340:	4bc9      	ldr	r3, [pc, #804]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001342:	2101      	movs	r1, #1
 8001344:	438a      	bics	r2, r1
 8001346:	621a      	str	r2, [r3, #32]
 8001348:	4bc7      	ldr	r3, [pc, #796]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 800134a:	6a1a      	ldr	r2, [r3, #32]
 800134c:	4bc6      	ldr	r3, [pc, #792]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 800134e:	2104      	movs	r1, #4
 8001350:	438a      	bics	r2, r1
 8001352:	621a      	str	r2, [r3, #32]
 8001354:	e01c      	b.n	8001390 <HAL_RCC_OscConfig+0x3a4>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b05      	cmp	r3, #5
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x38c>
 800135e:	4bc2      	ldr	r3, [pc, #776]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001360:	6a1a      	ldr	r2, [r3, #32]
 8001362:	4bc1      	ldr	r3, [pc, #772]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001364:	2104      	movs	r1, #4
 8001366:	430a      	orrs	r2, r1
 8001368:	621a      	str	r2, [r3, #32]
 800136a:	4bbf      	ldr	r3, [pc, #764]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 800136c:	6a1a      	ldr	r2, [r3, #32]
 800136e:	4bbe      	ldr	r3, [pc, #760]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001370:	2101      	movs	r1, #1
 8001372:	430a      	orrs	r2, r1
 8001374:	621a      	str	r2, [r3, #32]
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0x3a4>
 8001378:	4bbb      	ldr	r3, [pc, #748]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 800137a:	6a1a      	ldr	r2, [r3, #32]
 800137c:	4bba      	ldr	r3, [pc, #744]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 800137e:	2101      	movs	r1, #1
 8001380:	438a      	bics	r2, r1
 8001382:	621a      	str	r2, [r3, #32]
 8001384:	4bb8      	ldr	r3, [pc, #736]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001386:	6a1a      	ldr	r2, [r3, #32]
 8001388:	4bb7      	ldr	r3, [pc, #732]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 800138a:	2104      	movs	r1, #4
 800138c:	438a      	bics	r2, r1
 800138e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d014      	beq.n	80013c2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001398:	f7ff faa6 	bl	80008e8 <HAL_GetTick>
 800139c:	0003      	movs	r3, r0
 800139e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a0:	e009      	b.n	80013b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a2:	f7ff faa1 	bl	80008e8 <HAL_GetTick>
 80013a6:	0002      	movs	r2, r0
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	4aaf      	ldr	r2, [pc, #700]	@ (800166c <HAL_RCC_OscConfig+0x680>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e19a      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b6:	4bac      	ldr	r3, [pc, #688]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	2202      	movs	r2, #2
 80013bc:	4013      	ands	r3, r2
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x3b6>
 80013c0:	e013      	b.n	80013ea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fa91 	bl	80008e8 <HAL_GetTick>
 80013c6:	0003      	movs	r3, r0
 80013c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ca:	e009      	b.n	80013e0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	f7ff fa8c 	bl	80008e8 <HAL_GetTick>
 80013d0:	0002      	movs	r2, r0
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	4aa5      	ldr	r2, [pc, #660]	@ (800166c <HAL_RCC_OscConfig+0x680>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e185      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e0:	4ba1      	ldr	r3, [pc, #644]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	2202      	movs	r2, #2
 80013e6:	4013      	ands	r3, r2
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013ea:	231f      	movs	r3, #31
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d105      	bne.n	8001400 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f4:	4b9c      	ldr	r3, [pc, #624]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80013f6:	69da      	ldr	r2, [r3, #28]
 80013f8:	4b9b      	ldr	r3, [pc, #620]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80013fa:	499d      	ldr	r1, [pc, #628]	@ (8001670 <HAL_RCC_OscConfig+0x684>)
 80013fc:	400a      	ands	r2, r1
 80013fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2210      	movs	r2, #16
 8001406:	4013      	ands	r3, r2
 8001408:	d063      	beq.n	80014d2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d12a      	bne.n	8001468 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001412:	4b95      	ldr	r3, [pc, #596]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001416:	4b94      	ldr	r3, [pc, #592]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001418:	2104      	movs	r1, #4
 800141a:	430a      	orrs	r2, r1
 800141c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800141e:	4b92      	ldr	r3, [pc, #584]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001422:	4b91      	ldr	r3, [pc, #580]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001424:	2101      	movs	r1, #1
 8001426:	430a      	orrs	r2, r1
 8001428:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142a:	f7ff fa5d 	bl	80008e8 <HAL_GetTick>
 800142e:	0003      	movs	r3, r0
 8001430:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001434:	f7ff fa58 	bl	80008e8 <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e152      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001446:	4b88      	ldr	r3, [pc, #544]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d0f1      	beq.n	8001434 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001450:	4b85      	ldr	r3, [pc, #532]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001454:	22f8      	movs	r2, #248	@ 0xf8
 8001456:	4393      	bics	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	00da      	lsls	r2, r3, #3
 8001460:	4b81      	ldr	r3, [pc, #516]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001462:	430a      	orrs	r2, r1
 8001464:	635a      	str	r2, [r3, #52]	@ 0x34
 8001466:	e034      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	3305      	adds	r3, #5
 800146e:	d111      	bne.n	8001494 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001470:	4b7d      	ldr	r3, [pc, #500]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001474:	4b7c      	ldr	r3, [pc, #496]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001476:	2104      	movs	r1, #4
 8001478:	438a      	bics	r2, r1
 800147a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800147c:	4b7a      	ldr	r3, [pc, #488]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 800147e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001480:	22f8      	movs	r2, #248	@ 0xf8
 8001482:	4393      	bics	r3, r2
 8001484:	0019      	movs	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	00da      	lsls	r2, r3, #3
 800148c:	4b76      	ldr	r3, [pc, #472]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 800148e:	430a      	orrs	r2, r1
 8001490:	635a      	str	r2, [r3, #52]	@ 0x34
 8001492:	e01e      	b.n	80014d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001494:	4b74      	ldr	r3, [pc, #464]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001498:	4b73      	ldr	r3, [pc, #460]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 800149a:	2104      	movs	r1, #4
 800149c:	430a      	orrs	r2, r1
 800149e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014a0:	4b71      	ldr	r3, [pc, #452]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80014a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014a4:	4b70      	ldr	r3, [pc, #448]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80014a6:	2101      	movs	r1, #1
 80014a8:	438a      	bics	r2, r1
 80014aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ac:	f7ff fa1c 	bl	80008e8 <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014b6:	f7ff fa17 	bl	80008e8 <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e111      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014c8:	4b67      	ldr	r3, [pc, #412]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80014ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014cc:	2202      	movs	r2, #2
 80014ce:	4013      	ands	r3, r2
 80014d0:	d1f1      	bne.n	80014b6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2220      	movs	r2, #32
 80014d8:	4013      	ands	r3, r2
 80014da:	d05c      	beq.n	8001596 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014dc:	4b62      	ldr	r3, [pc, #392]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	220c      	movs	r2, #12
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b0c      	cmp	r3, #12
 80014e6:	d00e      	beq.n	8001506 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	220c      	movs	r2, #12
 80014ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d114      	bne.n	800151e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	23c0      	movs	r3, #192	@ 0xc0
 80014fa:	025b      	lsls	r3, r3, #9
 80014fc:	401a      	ands	r2, r3
 80014fe:	23c0      	movs	r3, #192	@ 0xc0
 8001500:	025b      	lsls	r3, r3, #9
 8001502:	429a      	cmp	r2, r3
 8001504:	d10b      	bne.n	800151e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001506:	4b58      	ldr	r3, [pc, #352]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	029b      	lsls	r3, r3, #10
 800150e:	4013      	ands	r3, r2
 8001510:	d040      	beq.n	8001594 <HAL_RCC_OscConfig+0x5a8>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d03c      	beq.n	8001594 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0e6      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d01b      	beq.n	800155e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001526:	4b50      	ldr	r3, [pc, #320]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800152a:	4b4f      	ldr	r3, [pc, #316]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 800152c:	2180      	movs	r1, #128	@ 0x80
 800152e:	0249      	lsls	r1, r1, #9
 8001530:	430a      	orrs	r2, r1
 8001532:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff f9d8 	bl	80008e8 <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800153e:	f7ff f9d3 	bl	80008e8 <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0cd      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001550:	4b45      	ldr	r3, [pc, #276]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001552:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001554:	2380      	movs	r3, #128	@ 0x80
 8001556:	029b      	lsls	r3, r3, #10
 8001558:	4013      	ands	r3, r2
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x552>
 800155c:	e01b      	b.n	8001596 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800155e:	4b42      	ldr	r3, [pc, #264]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001562:	4b41      	ldr	r3, [pc, #260]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001564:	4943      	ldr	r1, [pc, #268]	@ (8001674 <HAL_RCC_OscConfig+0x688>)
 8001566:	400a      	ands	r2, r1
 8001568:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156a:	f7ff f9bd 	bl	80008e8 <HAL_GetTick>
 800156e:	0003      	movs	r3, r0
 8001570:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001574:	f7ff f9b8 	bl	80008e8 <HAL_GetTick>
 8001578:	0002      	movs	r2, r0
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e0b2      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001586:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800158a:	2380      	movs	r3, #128	@ 0x80
 800158c:	029b      	lsls	r3, r3, #10
 800158e:	4013      	ands	r3, r2
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x588>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001594:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	2b00      	cmp	r3, #0
 800159c:	d100      	bne.n	80015a0 <HAL_RCC_OscConfig+0x5b4>
 800159e:	e0a4      	b.n	80016ea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a0:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	220c      	movs	r2, #12
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d100      	bne.n	80015ae <HAL_RCC_OscConfig+0x5c2>
 80015ac:	e078      	b.n	80016a0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d14c      	bne.n	8001650 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80015bc:	492e      	ldr	r1, [pc, #184]	@ (8001678 <HAL_RCC_OscConfig+0x68c>)
 80015be:	400a      	ands	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff f991 	bl	80008e8 <HAL_GetTick>
 80015c6:	0003      	movs	r3, r0
 80015c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015cc:	f7ff f98c 	bl	80008e8 <HAL_GetTick>
 80015d0:	0002      	movs	r2, r0
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e086      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015de:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	049b      	lsls	r3, r3, #18
 80015e6:	4013      	ands	r3, r2
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80015ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ee:	220f      	movs	r2, #15
 80015f0:	4393      	bics	r3, r2
 80015f2:	0019      	movs	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 80015fa:	430a      	orrs	r2, r1
 80015fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a1e      	ldr	r2, [pc, #120]	@ (800167c <HAL_RCC_OscConfig+0x690>)
 8001604:	4013      	ands	r3, r2
 8001606:	0019      	movs	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001610:	431a      	orrs	r2, r3
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 800161e:	2180      	movs	r1, #128	@ 0x80
 8001620:	0449      	lsls	r1, r1, #17
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff f95f 	bl	80008e8 <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001630:	f7ff f95a 	bl	80008e8 <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e054      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	2380      	movs	r3, #128	@ 0x80
 8001648:	049b      	lsls	r3, r3, #18
 800164a:	4013      	ands	r3, r2
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x644>
 800164e:	e04c      	b.n	80016ea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <HAL_RCC_OscConfig+0x67c>)
 8001656:	4908      	ldr	r1, [pc, #32]	@ (8001678 <HAL_RCC_OscConfig+0x68c>)
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff f944 	bl	80008e8 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x6a6>
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	40021000 	.word	0x40021000
 800166c:	00001388 	.word	0x00001388
 8001670:	efffffff 	.word	0xefffffff
 8001674:	fffeffff 	.word	0xfffeffff
 8001678:	feffffff 	.word	0xfeffffff
 800167c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff f932 	bl	80008e8 <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e02c      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001692:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_RCC_OscConfig+0x708>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	049b      	lsls	r3, r3, #18
 800169a:	4013      	ands	r3, r2
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x694>
 800169e:	e024      	b.n	80016ea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e01f      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <HAL_RCC_OscConfig+0x708>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <HAL_RCC_OscConfig+0x708>)
 80016b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	23c0      	movs	r3, #192	@ 0xc0
 80016bc:	025b      	lsls	r3, r3, #9
 80016be:	401a      	ands	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d10e      	bne.n	80016e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	220f      	movs	r2, #15
 80016cc:	401a      	ands	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	23f0      	movs	r3, #240	@ 0xf0
 80016da:	039b      	lsls	r3, r3, #14
 80016dc:	401a      	ands	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b008      	add	sp, #32
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0bf      	b.n	800188c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b61      	ldr	r3, [pc, #388]	@ (8001894 <HAL_RCC_ClockConfig+0x19c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2201      	movs	r2, #1
 8001712:	4013      	ands	r3, r2
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d911      	bls.n	800173e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b5e      	ldr	r3, [pc, #376]	@ (8001894 <HAL_RCC_ClockConfig+0x19c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2201      	movs	r2, #1
 8001720:	4393      	bics	r3, r2
 8001722:	0019      	movs	r1, r3
 8001724:	4b5b      	ldr	r3, [pc, #364]	@ (8001894 <HAL_RCC_ClockConfig+0x19c>)
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172c:	4b59      	ldr	r3, [pc, #356]	@ (8001894 <HAL_RCC_ClockConfig+0x19c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2201      	movs	r2, #1
 8001732:	4013      	ands	r3, r2
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d001      	beq.n	800173e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e0a6      	b.n	800188c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2202      	movs	r2, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d015      	beq.n	8001774 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2204      	movs	r2, #4
 800174e:	4013      	ands	r3, r2
 8001750:	d006      	beq.n	8001760 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001752:	4b51      	ldr	r3, [pc, #324]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4b50      	ldr	r3, [pc, #320]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 8001758:	21e0      	movs	r1, #224	@ 0xe0
 800175a:	00c9      	lsls	r1, r1, #3
 800175c:	430a      	orrs	r2, r1
 800175e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001760:	4b4d      	ldr	r3, [pc, #308]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	22f0      	movs	r2, #240	@ 0xf0
 8001766:	4393      	bics	r3, r2
 8001768:	0019      	movs	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	4b4a      	ldr	r3, [pc, #296]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 8001770:	430a      	orrs	r2, r1
 8001772:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2201      	movs	r2, #1
 800177a:	4013      	ands	r3, r2
 800177c:	d04c      	beq.n	8001818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b44      	ldr	r3, [pc, #272]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	2380      	movs	r3, #128	@ 0x80
 800178c:	029b      	lsls	r3, r3, #10
 800178e:	4013      	ands	r3, r2
 8001790:	d120      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e07a      	b.n	800188c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	4b3e      	ldr	r3, [pc, #248]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	2380      	movs	r3, #128	@ 0x80
 80017a4:	049b      	lsls	r3, r3, #18
 80017a6:	4013      	ands	r3, r2
 80017a8:	d114      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e06e      	b.n	800188c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017b6:	4b38      	ldr	r3, [pc, #224]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 80017b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017ba:	2380      	movs	r3, #128	@ 0x80
 80017bc:	029b      	lsls	r3, r3, #10
 80017be:	4013      	ands	r3, r2
 80017c0:	d108      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e062      	b.n	800188c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	4b34      	ldr	r3, [pc, #208]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e05b      	b.n	800188c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d4:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2203      	movs	r2, #3
 80017da:	4393      	bics	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 80017e4:	430a      	orrs	r2, r1
 80017e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e8:	f7ff f87e 	bl	80008e8 <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f0:	e009      	b.n	8001806 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f2:	f7ff f879 	bl	80008e8 <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	4a27      	ldr	r2, [pc, #156]	@ (800189c <HAL_RCC_ClockConfig+0x1a4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e042      	b.n	800188c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	220c      	movs	r2, #12
 800180c:	401a      	ands	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	429a      	cmp	r2, r3
 8001816:	d1ec      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001818:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <HAL_RCC_ClockConfig+0x19c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2201      	movs	r2, #1
 800181e:	4013      	ands	r3, r2
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d211      	bcs.n	800184a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <HAL_RCC_ClockConfig+0x19c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2201      	movs	r2, #1
 800182c:	4393      	bics	r3, r2
 800182e:	0019      	movs	r1, r3
 8001830:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <HAL_RCC_ClockConfig+0x19c>)
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001838:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <HAL_RCC_ClockConfig+0x19c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2201      	movs	r2, #1
 800183e:	4013      	ands	r3, r2
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d001      	beq.n	800184a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e020      	b.n	800188c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2204      	movs	r2, #4
 8001850:	4013      	ands	r3, r2
 8001852:	d009      	beq.n	8001868 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a11      	ldr	r2, [pc, #68]	@ (80018a0 <HAL_RCC_ClockConfig+0x1a8>)
 800185a:	4013      	ands	r3, r2
 800185c:	0019      	movs	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 8001864:	430a      	orrs	r2, r1
 8001866:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001868:	f000 f820 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800186c:	0001      	movs	r1, r0
 800186e:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <HAL_RCC_ClockConfig+0x1a0>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	220f      	movs	r2, #15
 8001876:	4013      	ands	r3, r2
 8001878:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <HAL_RCC_ClockConfig+0x1ac>)
 800187a:	5cd3      	ldrb	r3, [r2, r3]
 800187c:	000a      	movs	r2, r1
 800187e:	40da      	lsrs	r2, r3
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <HAL_RCC_ClockConfig+0x1b0>)
 8001882:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001884:	2003      	movs	r0, #3
 8001886:	f7fe ffe9 	bl	800085c <HAL_InitTick>
  
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b004      	add	sp, #16
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40022000 	.word	0x40022000
 8001898:	40021000 	.word	0x40021000
 800189c:	00001388 	.word	0x00001388
 80018a0:	fffff8ff 	.word	0xfffff8ff
 80018a4:	08002318 	.word	0x08002318
 80018a8:	20000000 	.word	0x20000000

080018ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80018c6:	4b2d      	ldr	r3, [pc, #180]	@ (800197c <HAL_RCC_GetSysClockFreq+0xd0>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	220c      	movs	r2, #12
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d046      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0xb8>
 80018d6:	d848      	bhi.n	800196a <HAL_RCC_GetSysClockFreq+0xbe>
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d002      	beq.n	80018e2 <HAL_RCC_GetSysClockFreq+0x36>
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d003      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x3c>
 80018e0:	e043      	b.n	800196a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018e2:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <HAL_RCC_GetSysClockFreq+0xd4>)
 80018e4:	613b      	str	r3, [r7, #16]
      break;
 80018e6:	e043      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	0c9b      	lsrs	r3, r3, #18
 80018ec:	220f      	movs	r2, #15
 80018ee:	4013      	ands	r3, r2
 80018f0:	4a24      	ldr	r2, [pc, #144]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xd8>)
 80018f2:	5cd3      	ldrb	r3, [r2, r3]
 80018f4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018f6:	4b21      	ldr	r3, [pc, #132]	@ (800197c <HAL_RCC_GetSysClockFreq+0xd0>)
 80018f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fa:	220f      	movs	r2, #15
 80018fc:	4013      	ands	r3, r2
 80018fe:	4a22      	ldr	r2, [pc, #136]	@ (8001988 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001900:	5cd3      	ldrb	r3, [r2, r3]
 8001902:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	23c0      	movs	r3, #192	@ 0xc0
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	401a      	ands	r2, r3
 800190c:	2380      	movs	r3, #128	@ 0x80
 800190e:	025b      	lsls	r3, r3, #9
 8001910:	429a      	cmp	r2, r3
 8001912:	d109      	bne.n	8001928 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	481a      	ldr	r0, [pc, #104]	@ (8001980 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001918:	f7fe fbf6 	bl	8000108 <__udivsi3>
 800191c:	0003      	movs	r3, r0
 800191e:	001a      	movs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4353      	muls	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e01a      	b.n	800195e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	23c0      	movs	r3, #192	@ 0xc0
 800192c:	025b      	lsls	r3, r3, #9
 800192e:	401a      	ands	r2, r3
 8001930:	23c0      	movs	r3, #192	@ 0xc0
 8001932:	025b      	lsls	r3, r3, #9
 8001934:	429a      	cmp	r2, r3
 8001936:	d109      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	4814      	ldr	r0, [pc, #80]	@ (800198c <HAL_RCC_GetSysClockFreq+0xe0>)
 800193c:	f7fe fbe4 	bl	8000108 <__udivsi3>
 8001940:	0003      	movs	r3, r0
 8001942:	001a      	movs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4353      	muls	r3, r2
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e008      	b.n	800195e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	480c      	ldr	r0, [pc, #48]	@ (8001980 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001950:	f7fe fbda 	bl	8000108 <__udivsi3>
 8001954:	0003      	movs	r3, r0
 8001956:	001a      	movs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4353      	muls	r3, r2
 800195c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	613b      	str	r3, [r7, #16]
      break;
 8001962:	e005      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001964:	4b09      	ldr	r3, [pc, #36]	@ (800198c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001966:	613b      	str	r3, [r7, #16]
      break;
 8001968:	e002      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800196a:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_RCC_GetSysClockFreq+0xd4>)
 800196c:	613b      	str	r3, [r7, #16]
      break;
 800196e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001970:	693b      	ldr	r3, [r7, #16]
}
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	b006      	add	sp, #24
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	40021000 	.word	0x40021000
 8001980:	007a1200 	.word	0x007a1200
 8001984:	08002328 	.word	0x08002328
 8001988:	08002338 	.word	0x08002338
 800198c:	02dc6c00 	.word	0x02dc6c00

08001990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	@ 0x80
 80019a6:	025b      	lsls	r3, r3, #9
 80019a8:	4013      	ands	r3, r2
 80019aa:	d100      	bne.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019ac:	e08e      	b.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019ae:	2017      	movs	r0, #23
 80019b0:	183b      	adds	r3, r7, r0
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	2380      	movs	r3, #128	@ 0x80
 80019bc:	055b      	lsls	r3, r3, #21
 80019be:	4013      	ands	r3, r2
 80019c0:	d110      	bne.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c4:	69da      	ldr	r2, [r3, #28]
 80019c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c8:	2180      	movs	r1, #128	@ 0x80
 80019ca:	0549      	lsls	r1, r1, #21
 80019cc:	430a      	orrs	r2, r1
 80019ce:	61da      	str	r2, [r3, #28]
 80019d0:	4b67      	ldr	r3, [pc, #412]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	055b      	lsls	r3, r3, #21
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019de:	183b      	adds	r3, r7, r0
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	4b63      	ldr	r3, [pc, #396]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	d11a      	bne.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f0:	4b60      	ldr	r3, [pc, #384]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019f6:	2180      	movs	r1, #128	@ 0x80
 80019f8:	0049      	lsls	r1, r1, #1
 80019fa:	430a      	orrs	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fe:	f7fe ff73 	bl	80008e8 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a06:	e008      	b.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a08:	f7fe ff6e 	bl	80008e8 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	@ 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e0a6      	b.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1a:	4b56      	ldr	r3, [pc, #344]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	@ 0x80
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4013      	ands	r3, r2
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a26:	4b52      	ldr	r3, [pc, #328]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a28:	6a1a      	ldr	r2, [r3, #32]
 8001a2a:	23c0      	movs	r3, #192	@ 0xc0
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d034      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	23c0      	movs	r3, #192	@ 0xc0
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d02c      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a48:	4b49      	ldr	r3, [pc, #292]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a52:	4b47      	ldr	r3, [pc, #284]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a54:	6a1a      	ldr	r2, [r3, #32]
 8001a56:	4b46      	ldr	r3, [pc, #280]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a58:	2180      	movs	r1, #128	@ 0x80
 8001a5a:	0249      	lsls	r1, r1, #9
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a60:	4b43      	ldr	r3, [pc, #268]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a62:	6a1a      	ldr	r2, [r3, #32]
 8001a64:	4b42      	ldr	r3, [pc, #264]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a66:	4945      	ldr	r1, [pc, #276]	@ (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a6c:	4b40      	ldr	r3, [pc, #256]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	4013      	ands	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7fe ff35 	bl	80008e8 <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a82:	e009      	b.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7fe ff30 	bl	80008e8 <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e067      	b.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a98:	4b35      	ldr	r3, [pc, #212]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aa2:	4b33      	ldr	r3, [pc, #204]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a34      	ldr	r2, [pc, #208]	@ (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ab6:	2317      	movs	r3, #23
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac2:	69da      	ldr	r2, [r3, #28]
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac6:	492f      	ldr	r1, [pc, #188]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001ac8:	400a      	ands	r2, r1
 8001aca:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d009      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ad6:	4b26      	ldr	r3, [pc, #152]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	2203      	movs	r2, #3
 8001adc:	4393      	bics	r3, r2
 8001ade:	0019      	movs	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4b22      	ldr	r3, [pc, #136]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2202      	movs	r2, #2
 8001af0:	4013      	ands	r3, r2
 8001af2:	d009      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001af4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af8:	4a23      	ldr	r2, [pc, #140]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b04:	430a      	orrs	r2, r1
 8001b06:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d009      	beq.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b12:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	2210      	movs	r2, #16
 8001b18:	4393      	bics	r3, r2
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b22:	430a      	orrs	r2, r1
 8001b24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	2380      	movs	r3, #128	@ 0x80
 8001b2c:	029b      	lsls	r3, r3, #10
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d009      	beq.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b32:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	2280      	movs	r2, #128	@ 0x80
 8001b38:	4393      	bics	r3, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699a      	ldr	r2, [r3, #24]
 8001b40:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b42:	430a      	orrs	r2, r1
 8001b44:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	2380      	movs	r3, #128	@ 0x80
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d009      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b52:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	2240      	movs	r2, #64	@ 0x40
 8001b58:	4393      	bics	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	4b03      	ldr	r3, [pc, #12]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	0018      	movs	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b006      	add	sp, #24
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40007000 	.word	0x40007000
 8001b78:	fffffcff 	.word	0xfffffcff
 8001b7c:	fffeffff 	.word	0xfffeffff
 8001b80:	00001388 	.word	0x00001388
 8001b84:	efffffff 	.word	0xefffffff
 8001b88:	fffcffff 	.word	0xfffcffff

08001b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e0a8      	b.n	8001cf0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	2382      	movs	r3, #130	@ 0x82
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d009      	beq.n	8001bc6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	61da      	str	r2, [r3, #28]
 8001bb8:	e005      	b.n	8001bc6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	225d      	movs	r2, #93	@ 0x5d
 8001bd0:	5c9b      	ldrb	r3, [r3, r2]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	225c      	movs	r2, #92	@ 0x5c
 8001bdc:	2100      	movs	r1, #0
 8001bde:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	0018      	movs	r0, r3
 8001be4:	f7fe fd90 	bl	8000708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	225d      	movs	r2, #93	@ 0x5d
 8001bec:	2102      	movs	r1, #2
 8001bee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2140      	movs	r1, #64	@ 0x40
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	23e0      	movs	r3, #224	@ 0xe0
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d902      	bls.n	8001c12 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e002      	b.n	8001c18 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	015b      	lsls	r3, r3, #5
 8001c16:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	23f0      	movs	r3, #240	@ 0xf0
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d008      	beq.n	8001c36 <HAL_SPI_Init+0xaa>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	23e0      	movs	r3, #224	@ 0xe0
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d002      	beq.n	8001c36 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	2382      	movs	r3, #130	@ 0x82
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	401a      	ands	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6899      	ldr	r1, [r3, #8]
 8001c44:	2384      	movs	r3, #132	@ 0x84
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	400b      	ands	r3, r1
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2102      	movs	r1, #2
 8001c52:	400b      	ands	r3, r1
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	400b      	ands	r3, r1
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6999      	ldr	r1, [r3, #24]
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	400b      	ands	r3, r1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2138      	movs	r1, #56	@ 0x38
 8001c72:	400b      	ands	r3, r1
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	2180      	movs	r1, #128	@ 0x80
 8001c7c:	400b      	ands	r3, r1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	0011      	movs	r1, r2
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	019b      	lsls	r3, r3, #6
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	0c1b      	lsrs	r3, r3, #16
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	2110      	movs	r1, #16
 8001ca4:	400b      	ands	r3, r1
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cac:	2108      	movs	r1, #8
 8001cae:	400b      	ands	r3, r1
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68d9      	ldr	r1, [r3, #12]
 8001cb6:	23f0      	movs	r3, #240	@ 0xf0
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	400b      	ands	r3, r1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	0011      	movs	r1, r2
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	2380      	movs	r3, #128	@ 0x80
 8001cc4:	015b      	lsls	r3, r3, #5
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4907      	ldr	r1, [pc, #28]	@ (8001cf8 <HAL_SPI_Init+0x16c>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	225d      	movs	r2, #93	@ 0x5d
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b004      	add	sp, #16
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	fffff7ff 	.word	0xfffff7ff

08001cfc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	1dbb      	adds	r3, r7, #6
 8001d0a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d0c:	231f      	movs	r3, #31
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	225c      	movs	r2, #92	@ 0x5c
 8001d18:	5c9b      	ldrb	r3, [r3, r2]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_SPI_Transmit+0x26>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e147      	b.n	8001fb2 <HAL_SPI_Transmit+0x2b6>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	225c      	movs	r2, #92	@ 0x5c
 8001d26:	2101      	movs	r1, #1
 8001d28:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d2a:	f7fe fddd 	bl	80008e8 <HAL_GetTick>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001d32:	2316      	movs	r3, #22
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	1dba      	adds	r2, r7, #6
 8001d38:	8812      	ldrh	r2, [r2, #0]
 8001d3a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	225d      	movs	r2, #93	@ 0x5d
 8001d40:	5c9b      	ldrb	r3, [r3, r2]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d004      	beq.n	8001d52 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001d48:	231f      	movs	r3, #31
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d50:	e128      	b.n	8001fa4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_SPI_Transmit+0x64>
 8001d58:	1dbb      	adds	r3, r7, #6
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d104      	bne.n	8001d6a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001d60:	231f      	movs	r3, #31
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d68:	e11c      	b.n	8001fa4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	225d      	movs	r2, #93	@ 0x5d
 8001d6e:	2103      	movs	r1, #3
 8001d70:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1dba      	adds	r2, r7, #6
 8001d82:	8812      	ldrh	r2, [r2, #0]
 8001d84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1dba      	adds	r2, r7, #6
 8001d8a:	8812      	ldrh	r2, [r2, #0]
 8001d8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2244      	movs	r2, #68	@ 0x44
 8001d98:	2100      	movs	r1, #0
 8001d9a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2246      	movs	r2, #70	@ 0x46
 8001da0:	2100      	movs	r1, #0
 8001da2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	2380      	movs	r3, #128	@ 0x80
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d110      	bne.n	8001dde <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2140      	movs	r1, #64	@ 0x40
 8001dc8:	438a      	bics	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2180      	movs	r1, #128	@ 0x80
 8001dd8:	01c9      	lsls	r1, r1, #7
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2240      	movs	r2, #64	@ 0x40
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b40      	cmp	r3, #64	@ 0x40
 8001dea:	d007      	beq.n	8001dfc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2140      	movs	r1, #64	@ 0x40
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	23e0      	movs	r3, #224	@ 0xe0
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d952      	bls.n	8001eae <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <HAL_SPI_Transmit+0x11e>
 8001e10:	2316      	movs	r3, #22
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d143      	bne.n	8001ea2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e1e:	881a      	ldrh	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e2a:	1c9a      	adds	r2, r3, #2
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e3e:	e030      	b.n	8001ea2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2202      	movs	r2, #2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d112      	bne.n	8001e74 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e52:	881a      	ldrh	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e5e:	1c9a      	adds	r2, r3, #2
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001e72:	e016      	b.n	8001ea2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e74:	f7fe fd38 	bl	80008e8 <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d802      	bhi.n	8001e8a <HAL_SPI_Transmit+0x18e>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	3301      	adds	r3, #1
 8001e88:	d102      	bne.n	8001e90 <HAL_SPI_Transmit+0x194>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d108      	bne.n	8001ea2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001e90:	231f      	movs	r3, #31
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2203      	movs	r2, #3
 8001e96:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	225d      	movs	r2, #93	@ 0x5d
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	5499      	strb	r1, [r3, r2]
          goto error;
 8001ea0:	e080      	b.n	8001fa4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1c9      	bne.n	8001e40 <HAL_SPI_Transmit+0x144>
 8001eac:	e053      	b.n	8001f56 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d004      	beq.n	8001ec0 <HAL_SPI_Transmit+0x1c4>
 8001eb6:	2316      	movs	r3, #22
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d145      	bne.n	8001f4c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	330c      	adds	r3, #12
 8001eca:	7812      	ldrb	r2, [r2, #0]
 8001ecc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001ee6:	e031      	b.n	8001f4c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d113      	bne.n	8001f1e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	330c      	adds	r3, #12
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f1c:	e016      	b.n	8001f4c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f1e:	f7fe fce3 	bl	80008e8 <HAL_GetTick>
 8001f22:	0002      	movs	r2, r0
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d802      	bhi.n	8001f34 <HAL_SPI_Transmit+0x238>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	d102      	bne.n	8001f3a <HAL_SPI_Transmit+0x23e>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d108      	bne.n	8001f4c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001f3a:	231f      	movs	r3, #31
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2203      	movs	r2, #3
 8001f40:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	225d      	movs	r2, #93	@ 0x5d
 8001f46:	2101      	movs	r1, #1
 8001f48:	5499      	strb	r1, [r3, r2]
          goto error;
 8001f4a:	e02b      	b.n	8001fa4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1c8      	bne.n	8001ee8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	6839      	ldr	r1, [r7, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f000 f95d 	bl	800221c <SPI_EndRxTxTransaction>
 8001f62:	1e03      	subs	r3, r0, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10a      	bne.n	8001f8a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001f92:	231f      	movs	r3, #31
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	e003      	b.n	8001fa4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	225d      	movs	r2, #93	@ 0x5d
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	225c      	movs	r2, #92	@ 0x5c
 8001fa8:	2100      	movs	r1, #0
 8001faa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001fac:	231f      	movs	r3, #31
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	781b      	ldrb	r3, [r3, #0]
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b008      	add	sp, #32
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	1dfb      	adds	r3, r7, #7
 8001fca:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fcc:	f7fe fc8c 	bl	80008e8 <HAL_GetTick>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	18d3      	adds	r3, r2, r3
 8001fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001fdc:	f7fe fc84 	bl	80008e8 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fe4:	4b3a      	ldr	r3, [pc, #232]	@ (80020d0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	015b      	lsls	r3, r3, #5
 8001fea:	0d1b      	lsrs	r3, r3, #20
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	4353      	muls	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ff2:	e058      	b.n	80020a6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	d055      	beq.n	80020a6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ffa:	f7fe fc75 	bl	80008e8 <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	429a      	cmp	r2, r3
 8002008:	d902      	bls.n	8002010 <SPI_WaitFlagStateUntilTimeout+0x54>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d142      	bne.n	8002096 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	21e0      	movs	r1, #224	@ 0xe0
 800201c:	438a      	bics	r2, r1
 800201e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	2382      	movs	r3, #130	@ 0x82
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	429a      	cmp	r2, r3
 800202a:	d113      	bne.n	8002054 <SPI_WaitFlagStateUntilTimeout+0x98>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	2380      	movs	r3, #128	@ 0x80
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	429a      	cmp	r2, r3
 8002036:	d005      	beq.n	8002044 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	429a      	cmp	r2, r3
 8002042:	d107      	bne.n	8002054 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2140      	movs	r1, #64	@ 0x40
 8002050:	438a      	bics	r2, r1
 8002052:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002058:	2380      	movs	r3, #128	@ 0x80
 800205a:	019b      	lsls	r3, r3, #6
 800205c:	429a      	cmp	r2, r3
 800205e:	d110      	bne.n	8002082 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	491a      	ldr	r1, [pc, #104]	@ (80020d4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800206c:	400a      	ands	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2180      	movs	r1, #128	@ 0x80
 800207c:	0189      	lsls	r1, r1, #6
 800207e:	430a      	orrs	r2, r1
 8002080:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	225d      	movs	r2, #93	@ 0x5d
 8002086:	2101      	movs	r1, #1
 8002088:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	225c      	movs	r2, #92	@ 0x5c
 800208e:	2100      	movs	r1, #0
 8002090:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e017      	b.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	4013      	ands	r3, r2
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	425a      	negs	r2, r3
 80020b6:	4153      	adcs	r3, r2
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	001a      	movs	r2, r3
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d197      	bne.n	8001ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b008      	add	sp, #32
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	20000000 	.word	0x20000000
 80020d4:	ffffdfff 	.word	0xffffdfff

080020d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	@ 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80020e6:	2317      	movs	r3, #23
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80020ee:	f7fe fbfb 	bl	80008e8 <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	18d3      	adds	r3, r2, r3
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80020fe:	f7fe fbf3 	bl	80008e8 <HAL_GetTick>
 8002102:	0003      	movs	r3, r0
 8002104:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	330c      	adds	r3, #12
 800210c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800210e:	4b41      	ldr	r3, [pc, #260]	@ (8002214 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	0013      	movs	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	189b      	adds	r3, r3, r2
 8002118:	00da      	lsls	r2, r3, #3
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	0d1b      	lsrs	r3, r3, #20
 800211e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002120:	4353      	muls	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002124:	e068      	b.n	80021f8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	23c0      	movs	r3, #192	@ 0xc0
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	429a      	cmp	r2, r3
 800212e:	d10a      	bne.n	8002146 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d107      	bne.n	8002146 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	2117      	movs	r1, #23
 800213e:	187b      	adds	r3, r7, r1
 8002140:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002142:	187b      	adds	r3, r7, r1
 8002144:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	d055      	beq.n	80021f8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800214c:	f7fe fbcc 	bl	80008e8 <HAL_GetTick>
 8002150:	0002      	movs	r2, r0
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002158:	429a      	cmp	r2, r3
 800215a:	d902      	bls.n	8002162 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	2b00      	cmp	r3, #0
 8002160:	d142      	bne.n	80021e8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	21e0      	movs	r1, #224	@ 0xe0
 800216e:	438a      	bics	r2, r1
 8002170:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	2382      	movs	r3, #130	@ 0x82
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	429a      	cmp	r2, r3
 800217c:	d113      	bne.n	80021a6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	2380      	movs	r3, #128	@ 0x80
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	429a      	cmp	r2, r3
 8002188:	d005      	beq.n	8002196 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	429a      	cmp	r2, r3
 8002194:	d107      	bne.n	80021a6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2140      	movs	r1, #64	@ 0x40
 80021a2:	438a      	bics	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	019b      	lsls	r3, r3, #6
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d110      	bne.n	80021d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4916      	ldr	r1, [pc, #88]	@ (8002218 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80021be:	400a      	ands	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2180      	movs	r1, #128	@ 0x80
 80021ce:	0189      	lsls	r1, r1, #6
 80021d0:	430a      	orrs	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	225d      	movs	r2, #93	@ 0x5d
 80021d8:	2101      	movs	r1, #1
 80021da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	225c      	movs	r2, #92	@ 0x5c
 80021e0:	2100      	movs	r1, #0
 80021e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e010      	b.n	800220a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	4013      	ands	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	429a      	cmp	r2, r3
 8002206:	d18e      	bne.n	8002126 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b00a      	add	sp, #40	@ 0x28
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	20000000 	.word	0x20000000
 8002218:	ffffdfff 	.word	0xffffdfff

0800221c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af02      	add	r7, sp, #8
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	23c0      	movs	r3, #192	@ 0xc0
 800222c:	0159      	lsls	r1, r3, #5
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	0013      	movs	r3, r2
 8002236:	2200      	movs	r2, #0
 8002238:	f7ff ff4e 	bl	80020d8 <SPI_WaitFifoStateUntilTimeout>
 800223c:	1e03      	subs	r3, r0, #0
 800223e:	d007      	beq.n	8002250 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002244:	2220      	movs	r2, #32
 8002246:	431a      	orrs	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e027      	b.n	80022a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	0013      	movs	r3, r2
 800225a:	2200      	movs	r2, #0
 800225c:	2180      	movs	r1, #128	@ 0x80
 800225e:	f7ff fead 	bl	8001fbc <SPI_WaitFlagStateUntilTimeout>
 8002262:	1e03      	subs	r3, r0, #0
 8002264:	d007      	beq.n	8002276 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226a:	2220      	movs	r2, #32
 800226c:	431a      	orrs	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e014      	b.n	80022a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	23c0      	movs	r3, #192	@ 0xc0
 800227a:	00d9      	lsls	r1, r3, #3
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	0013      	movs	r3, r2
 8002284:	2200      	movs	r2, #0
 8002286:	f7ff ff27 	bl	80020d8 <SPI_WaitFifoStateUntilTimeout>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d007      	beq.n	800229e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002292:	2220      	movs	r2, #32
 8002294:	431a      	orrs	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e000      	b.n	80022a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b004      	add	sp, #16
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <memset>:
 80022a8:	0003      	movs	r3, r0
 80022aa:	1882      	adds	r2, r0, r2
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d100      	bne.n	80022b2 <memset+0xa>
 80022b0:	4770      	bx	lr
 80022b2:	7019      	strb	r1, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	e7f9      	b.n	80022ac <memset+0x4>

080022b8 <__libc_init_array>:
 80022b8:	b570      	push	{r4, r5, r6, lr}
 80022ba:	2600      	movs	r6, #0
 80022bc:	4c0c      	ldr	r4, [pc, #48]	@ (80022f0 <__libc_init_array+0x38>)
 80022be:	4d0d      	ldr	r5, [pc, #52]	@ (80022f4 <__libc_init_array+0x3c>)
 80022c0:	1b64      	subs	r4, r4, r5
 80022c2:	10a4      	asrs	r4, r4, #2
 80022c4:	42a6      	cmp	r6, r4
 80022c6:	d109      	bne.n	80022dc <__libc_init_array+0x24>
 80022c8:	2600      	movs	r6, #0
 80022ca:	f000 f819 	bl	8002300 <_init>
 80022ce:	4c0a      	ldr	r4, [pc, #40]	@ (80022f8 <__libc_init_array+0x40>)
 80022d0:	4d0a      	ldr	r5, [pc, #40]	@ (80022fc <__libc_init_array+0x44>)
 80022d2:	1b64      	subs	r4, r4, r5
 80022d4:	10a4      	asrs	r4, r4, #2
 80022d6:	42a6      	cmp	r6, r4
 80022d8:	d105      	bne.n	80022e6 <__libc_init_array+0x2e>
 80022da:	bd70      	pop	{r4, r5, r6, pc}
 80022dc:	00b3      	lsls	r3, r6, #2
 80022de:	58eb      	ldr	r3, [r5, r3]
 80022e0:	4798      	blx	r3
 80022e2:	3601      	adds	r6, #1
 80022e4:	e7ee      	b.n	80022c4 <__libc_init_array+0xc>
 80022e6:	00b3      	lsls	r3, r6, #2
 80022e8:	58eb      	ldr	r3, [r5, r3]
 80022ea:	4798      	blx	r3
 80022ec:	3601      	adds	r6, #1
 80022ee:	e7f2      	b.n	80022d6 <__libc_init_array+0x1e>
 80022f0:	08002348 	.word	0x08002348
 80022f4:	08002348 	.word	0x08002348
 80022f8:	0800234c 	.word	0x0800234c
 80022fc:	08002348 	.word	0x08002348

08002300 <_init>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002306:	bc08      	pop	{r3}
 8002308:	469e      	mov	lr, r3
 800230a:	4770      	bx	lr

0800230c <_fini>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr
