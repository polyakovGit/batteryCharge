
batteryCharge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000342c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080034ec  080034ec  000044ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800351c  0800351c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800351c  0800351c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800351c  0800351c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800351c  0800351c  0000451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003520  08003520  00004520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003524  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08003530  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003530  0000514c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccbd  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0d  00000000  00000000  00011cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00013b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b38  00000000  00000000  00014940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190cb  00000000  00000000  00015478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110a3  00000000  00000000  0002e543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939bd  00000000  00000000  0003f5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2fa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003414  00000000  00000000  000d2fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d63fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034d4 	.word	0x080034d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080034d4 	.word	0x080034d4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <RGs_Attr_Init>:
	uint8_t all_RGs_custom[RGS_NUMBER];
} RGs_Attr;

RGs_Attr RGs;

static void RGs_Attr_Init() {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	RGs.RG_off = 0b11111111;
 8000226:	4b20      	ldr	r3, [pc, #128]	@ (80002a8 <RGs_Attr_Init+0x88>)
 8000228:	22ff      	movs	r2, #255	@ 0xff
 800022a:	701a      	strb	r2, [r3, #0]
	RGs.RG_on = 0b00000000;
 800022c:	4b1e      	ldr	r3, [pc, #120]	@ (80002a8 <RGs_Attr_Init+0x88>)
 800022e:	2200      	movs	r2, #0
 8000230:	705a      	strb	r2, [r3, #1]
	RGs.mixled_off = 0b10001110;
 8000232:	4b1d      	ldr	r3, [pc, #116]	@ (80002a8 <RGs_Attr_Init+0x88>)
 8000234:	228e      	movs	r2, #142	@ 0x8e
 8000236:	709a      	strb	r2, [r3, #2]
	RGs.mixled_on = 0b01110000;
 8000238:	4b1b      	ldr	r3, [pc, #108]	@ (80002a8 <RGs_Attr_Init+0x88>)
 800023a:	2270      	movs	r2, #112	@ 0x70
 800023c:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < RGS_NUMBER; ++i) {
 800023e:	1dfb      	adds	r3, r7, #7
 8000240:	2200      	movs	r2, #0
 8000242:	701a      	strb	r2, [r3, #0]
 8000244:	e01c      	b.n	8000280 <RGs_Attr_Init+0x60>
		RGs.all_RGs_on[i] = RGs.RG_on;
 8000246:	1dfb      	adds	r3, r7, #7
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	4a17      	ldr	r2, [pc, #92]	@ (80002a8 <RGs_Attr_Init+0x88>)
 800024c:	7851      	ldrb	r1, [r2, #1]
 800024e:	4a16      	ldr	r2, [pc, #88]	@ (80002a8 <RGs_Attr_Init+0x88>)
 8000250:	18d3      	adds	r3, r2, r3
 8000252:	1c0a      	adds	r2, r1, #0
 8000254:	711a      	strb	r2, [r3, #4]
		RGs.all_RGs_custom[i] = RGs.all_RGs_off[i] = RGs.RG_off;
 8000256:	1dfb      	adds	r3, r7, #7
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	4a13      	ldr	r2, [pc, #76]	@ (80002a8 <RGs_Attr_Init+0x88>)
 800025c:	7811      	ldrb	r1, [r2, #0]
 800025e:	4a12      	ldr	r2, [pc, #72]	@ (80002a8 <RGs_Attr_Init+0x88>)
 8000260:	18d2      	adds	r2, r2, r3
 8000262:	7351      	strb	r1, [r2, #13]
 8000264:	1dfa      	adds	r2, r7, #7
 8000266:	7812      	ldrb	r2, [r2, #0]
 8000268:	490f      	ldr	r1, [pc, #60]	@ (80002a8 <RGs_Attr_Init+0x88>)
 800026a:	18cb      	adds	r3, r1, r3
 800026c:	7b59      	ldrb	r1, [r3, #13]
 800026e:	4b0e      	ldr	r3, [pc, #56]	@ (80002a8 <RGs_Attr_Init+0x88>)
 8000270:	189b      	adds	r3, r3, r2
 8000272:	1c0a      	adds	r2, r1, #0
 8000274:	759a      	strb	r2, [r3, #22]
	for (uint8_t i = 0; i < RGS_NUMBER; ++i) {
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	1dfa      	adds	r2, r7, #7
 800027a:	7812      	ldrb	r2, [r2, #0]
 800027c:	3201      	adds	r2, #1
 800027e:	701a      	strb	r2, [r3, #0]
 8000280:	1dfb      	adds	r3, r7, #7
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b08      	cmp	r3, #8
 8000286:	d9de      	bls.n	8000246 <RGs_Attr_Init+0x26>
	}

	RGs.all_RGs_on[4] = RGs.mixled_on;
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <RGs_Attr_Init+0x88>)
 800028a:	78da      	ldrb	r2, [r3, #3]
 800028c:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <RGs_Attr_Init+0x88>)
 800028e:	721a      	strb	r2, [r3, #8]
	RGs.all_RGs_custom[4] = RGs.all_RGs_off[4] = RGs.mixled_off;
 8000290:	4b05      	ldr	r3, [pc, #20]	@ (80002a8 <RGs_Attr_Init+0x88>)
 8000292:	789a      	ldrb	r2, [r3, #2]
 8000294:	4b04      	ldr	r3, [pc, #16]	@ (80002a8 <RGs_Attr_Init+0x88>)
 8000296:	745a      	strb	r2, [r3, #17]
 8000298:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <RGs_Attr_Init+0x88>)
 800029a:	7c5a      	ldrb	r2, [r3, #17]
 800029c:	4b02      	ldr	r3, [pc, #8]	@ (80002a8 <RGs_Attr_Init+0x88>)
 800029e:	769a      	strb	r2, [r3, #26]
}
 80002a0:	46c0      	nop			@ (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b002      	add	sp, #8
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000128 	.word	0x20000128

080002ac <update_indication>:
	} else {
		// 7 6 8
	}

}
void update_indication(bool indication, bool voltage) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	0002      	movs	r2, r0
 80002b4:	1dfb      	adds	r3, r7, #7
 80002b6:	701a      	strb	r2, [r3, #0]
 80002b8:	1dbb      	adds	r3, r7, #6
 80002ba:	1c0a      	adds	r2, r1, #0
 80002bc:	701a      	strb	r2, [r3, #0]
	if (indication) {
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d006      	beq.n	80002d4 <update_indication+0x28>
//		uint16_t high_byte=regData[1];
//		high_byte<<=8;
//		uint16_t value=(high_byte& 0xff00)|regData[0];
//		float voltage_value=value*2.44;
//		number_to_indicator(voltage_value, voltage);
		HAL_SPI_Transmit(&hspi2, (uint8_t*) RGs.all_RGs_custom, RGS_NUMBER, 5000);  //SN74HC595N
 80002c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <update_indication+0x58>)
 80002c8:	490f      	ldr	r1, [pc, #60]	@ (8000308 <update_indication+0x5c>)
 80002ca:	4810      	ldr	r0, [pc, #64]	@ (800030c <update_indication+0x60>)
 80002cc:	2209      	movs	r2, #9
 80002ce:	f002 f9cb 	bl	8002668 <HAL_SPI_Transmit>
 80002d2:	e005      	b.n	80002e0 <update_indication+0x34>
	} else {
		HAL_SPI_Transmit(&hspi2, (uint8_t*) RGs.all_RGs_off, RGS_NUMBER, 5000);  //SN74HC595N
 80002d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <update_indication+0x58>)
 80002d6:	490e      	ldr	r1, [pc, #56]	@ (8000310 <update_indication+0x64>)
 80002d8:	480c      	ldr	r0, [pc, #48]	@ (800030c <update_indication+0x60>)
 80002da:	2209      	movs	r2, #9
 80002dc:	f002 f9c4 	bl	8002668 <HAL_SPI_Transmit>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80002e0:	2380      	movs	r3, #128	@ 0x80
 80002e2:	01db      	lsls	r3, r3, #7
 80002e4:	480b      	ldr	r0, [pc, #44]	@ (8000314 <update_indication+0x68>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	0019      	movs	r1, r3
 80002ea:	f000 fe27 	bl	8000f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80002ee:	2380      	movs	r3, #128	@ 0x80
 80002f0:	01db      	lsls	r3, r3, #7
 80002f2:	4808      	ldr	r0, [pc, #32]	@ (8000314 <update_indication+0x68>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	0019      	movs	r1, r3
 80002f8:	f000 fe20 	bl	8000f3c <HAL_GPIO_WritePin>
}
 80002fc:	46c0      	nop			@ (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b002      	add	sp, #8
 8000302:	bd80      	pop	{r7, pc}
 8000304:	00001388 	.word	0x00001388
 8000308:	2000013e 	.word	0x2000013e
 800030c:	2000007c 	.word	0x2000007c
 8000310:	20000135 	.word	0x20000135
 8000314:	48000400 	.word	0x48000400

08000318 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) //check if the interrupt comes from TIM1
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a05      	ldr	r2, [pc, #20]	@ (800033c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d103      	bne.n	8000332 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		update_indication(false, true); //добавить переменные индикации и измеряемой переменной
 800032a:	2101      	movs	r1, #1
 800032c:	2000      	movs	r0, #0
 800032e:	f7ff ffbd 	bl	80002ac <update_indication>
	}
}
 8000332:	46c0      	nop			@ (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	b002      	add	sp, #8
 8000338:	bd80      	pop	{r7, pc}
 800033a:	46c0      	nop			@ (mov r8, r8)
 800033c:	40012c00 	.word	0x40012c00

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b087      	sub	sp, #28
 8000344:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000346:	f000 fb3f 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034a:	f000 f84b 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034e:	f000 f97b 	bl	8000648 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000352:	f000 f8a1 	bl	8000498 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000356:	f000 f8df 	bl	8000518 <MX_SPI2_Init>
  MX_TIM1_Init();
 800035a:	f000 f91b 	bl	8000594 <MX_TIM1_Init>
//	HAL_I2C_Master_Receive(&hi2c1, I2C_ADDRESS<<1, (uint8_t *)regData, 2, I2C_TIMEOUT);
//	uint16_t high_byte=regData[0];
//	high_byte<<=8;
//	uint16_t value=(high_byte& 0xFF0)|regData[1];
//	float voltage_value=value*2.44;
	uint8_t test_data[2]={0,0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2200      	movs	r2, #0
 8000362:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef stat;
	uint8_t check=0x00;
 8000364:	1cfb      	adds	r3, r7, #3
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
	//0x70 STC3100
	//0x72 temp
	stat=HAL_I2C_Mem_Read(&hi2c1,0x70<<1, 0x08, 1, &check, 1, HAL_MAX_DELAY);
 800036a:	1dfc      	adds	r4, r7, #7
 800036c:	4817      	ldr	r0, [pc, #92]	@ (80003cc <main+0x8c>)
 800036e:	2301      	movs	r3, #1
 8000370:	425b      	negs	r3, r3
 8000372:	9302      	str	r3, [sp, #8]
 8000374:	2301      	movs	r3, #1
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	1cfb      	adds	r3, r7, #3
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	2301      	movs	r3, #1
 800037e:	2208      	movs	r2, #8
 8000380:	21e0      	movs	r1, #224	@ 0xe0
 8000382:	f000 fe8f 	bl	80010a4 <HAL_I2C_Mem_Read>
 8000386:	0003      	movs	r3, r0
 8000388:	7023      	strb	r3, [r4, #0]
//	uint16_t high_byte = test_data[1];
//	high_byte <<= 8;
//	uint16_t value = (high_byte & 0xFF00) | test_data[0];
//	float voltage_value = value * 2.44;
	RGs_Attr_Init();
 800038a:	f7ff ff49 	bl	8000220 <RGs_Attr_Init>
	//cs_reset();
	//HAL_SPI_Transmit(&hspi1, &spi2_data, 1, 5000);//
	HAL_SPI_Transmit(&hspi2, (uint8_t*) RGs.all_RGs_off, RGS_NUMBER, 5000);  //SN74HC595N
 800038e:	4b10      	ldr	r3, [pc, #64]	@ (80003d0 <main+0x90>)
 8000390:	4910      	ldr	r1, [pc, #64]	@ (80003d4 <main+0x94>)
 8000392:	4811      	ldr	r0, [pc, #68]	@ (80003d8 <main+0x98>)
 8000394:	2209      	movs	r2, #9
 8000396:	f002 f967 	bl	8002668 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800039a:	2380      	movs	r3, #128	@ 0x80
 800039c:	01db      	lsls	r3, r3, #7
 800039e:	480f      	ldr	r0, [pc, #60]	@ (80003dc <main+0x9c>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	0019      	movs	r1, r3
 80003a4:	f000 fdca 	bl	8000f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80003a8:	2380      	movs	r3, #128	@ 0x80
 80003aa:	01db      	lsls	r3, r3, #7
 80003ac:	480b      	ldr	r0, [pc, #44]	@ (80003dc <main+0x9c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	0019      	movs	r1, r3
 80003b2:	f000 fdc3 	bl	8000f3c <HAL_GPIO_WritePin>
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);  //подождать 4 секунды для STC3100
 80003b6:	4b0a      	ldr	r3, [pc, #40]	@ (80003e0 <main+0xa0>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2202      	movs	r2, #2
 80003bc:	4252      	negs	r2, r2
 80003be:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim1);
 80003c0:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <main+0xa0>)
 80003c2:	0018      	movs	r0, r3
 80003c4:	f002 fc76 	bl	8002cb4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80003c8:	46c0      	nop			@ (mov r8, r8)
 80003ca:	e7fd      	b.n	80003c8 <main+0x88>
 80003cc:	20000028 	.word	0x20000028
 80003d0:	00001388 	.word	0x00001388
 80003d4:	20000135 	.word	0x20000135
 80003d8:	2000007c 	.word	0x2000007c
 80003dc:	48000400 	.word	0x48000400
 80003e0:	200000e0 	.word	0x200000e0

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b099      	sub	sp, #100	@ 0x64
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	242c      	movs	r4, #44	@ 0x2c
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	0018      	movs	r0, r3
 80003f0:	2334      	movs	r3, #52	@ 0x34
 80003f2:	001a      	movs	r2, r3
 80003f4:	2100      	movs	r1, #0
 80003f6:	f003 f841 	bl	800347c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fa:	231c      	movs	r3, #28
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	0018      	movs	r0, r3
 8000400:	2310      	movs	r3, #16
 8000402:	001a      	movs	r2, r3
 8000404:	2100      	movs	r1, #0
 8000406:	f003 f839 	bl	800347c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800040a:	003b      	movs	r3, r7
 800040c:	0018      	movs	r0, r3
 800040e:	231c      	movs	r3, #28
 8000410:	001a      	movs	r2, r3
 8000412:	2100      	movs	r1, #0
 8000414:	f003 f832 	bl	800347c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000418:	0021      	movs	r1, r4
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2222      	movs	r2, #34	@ 0x22
 800041e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2201      	movs	r2, #1
 8000424:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2201      	movs	r2, #1
 800042a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2210      	movs	r2, #16
 8000430:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2200      	movs	r2, #0
 8000436:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000438:	187b      	adds	r3, r7, r1
 800043a:	0018      	movs	r0, r3
 800043c:	f001 fa8c 	bl	8001958 <HAL_RCC_OscConfig>
 8000440:	1e03      	subs	r3, r0, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000444:	f000 f97c 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000448:	211c      	movs	r1, #28
 800044a:	187b      	adds	r3, r7, r1
 800044c:	2207      	movs	r2, #7
 800044e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000450:	187b      	adds	r3, r7, r1
 8000452:	2203      	movs	r2, #3
 8000454:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2101      	movs	r1, #1
 8000466:	0018      	movs	r0, r3
 8000468:	f001 fdfc 	bl	8002064 <HAL_RCC_ClockConfig>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000470:	f000 f966 	bl	8000740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000474:	003b      	movs	r3, r7
 8000476:	2220      	movs	r2, #32
 8000478:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800047a:	003b      	movs	r3, r7
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000480:	003b      	movs	r3, r7
 8000482:	0018      	movs	r0, r3
 8000484:	f001 ff3a 	bl	80022fc <HAL_RCCEx_PeriphCLKConfig>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800048c:	f000 f958 	bl	8000740 <Error_Handler>
  }
}
 8000490:	46c0      	nop			@ (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b019      	add	sp, #100	@ 0x64
 8000496:	bd90      	pop	{r4, r7, pc}

08000498 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800049c:	4b1b      	ldr	r3, [pc, #108]	@ (800050c <MX_I2C1_Init+0x74>)
 800049e:	4a1c      	ldr	r2, [pc, #112]	@ (8000510 <MX_I2C1_Init+0x78>)
 80004a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004a2:	4b1a      	ldr	r3, [pc, #104]	@ (800050c <MX_I2C1_Init+0x74>)
 80004a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000514 <MX_I2C1_Init+0x7c>)
 80004a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004a8:	4b18      	ldr	r3, [pc, #96]	@ (800050c <MX_I2C1_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004ae:	4b17      	ldr	r3, [pc, #92]	@ (800050c <MX_I2C1_Init+0x74>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b4:	4b15      	ldr	r3, [pc, #84]	@ (800050c <MX_I2C1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004ba:	4b14      	ldr	r3, [pc, #80]	@ (800050c <MX_I2C1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004c0:	4b12      	ldr	r3, [pc, #72]	@ (800050c <MX_I2C1_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c6:	4b11      	ldr	r3, [pc, #68]	@ (800050c <MX_I2C1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <MX_I2C1_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <MX_I2C1_Init+0x74>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fd4f 	bl	8000f78 <HAL_I2C_Init>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004de:	f000 f92f 	bl	8000740 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004e2:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <MX_I2C1_Init+0x74>)
 80004e4:	2100      	movs	r1, #0
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 f99e 	bl	8001828 <HAL_I2CEx_ConfigAnalogFilter>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004f0:	f000 f926 	bl	8000740 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <MX_I2C1_Init+0x74>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 f9e1 	bl	80018c0 <HAL_I2CEx_ConfigDigitalFilter>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000502:	f000 f91d 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000028 	.word	0x20000028
 8000510:	40005400 	.word	0x40005400
 8000514:	2000090e 	.word	0x2000090e

08000518 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800051c:	4b1b      	ldr	r3, [pc, #108]	@ (800058c <MX_SPI2_Init+0x74>)
 800051e:	4a1c      	ldr	r2, [pc, #112]	@ (8000590 <MX_SPI2_Init+0x78>)
 8000520:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000522:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <MX_SPI2_Init+0x74>)
 8000524:	2282      	movs	r2, #130	@ 0x82
 8000526:	0052      	lsls	r2, r2, #1
 8000528:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800052a:	4b18      	ldr	r3, [pc, #96]	@ (800058c <MX_SPI2_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000530:	4b16      	ldr	r3, [pc, #88]	@ (800058c <MX_SPI2_Init+0x74>)
 8000532:	22e0      	movs	r2, #224	@ 0xe0
 8000534:	00d2      	lsls	r2, r2, #3
 8000536:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000538:	4b14      	ldr	r3, [pc, #80]	@ (800058c <MX_SPI2_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <MX_SPI2_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000544:	4b11      	ldr	r3, [pc, #68]	@ (800058c <MX_SPI2_Init+0x74>)
 8000546:	2280      	movs	r2, #128	@ 0x80
 8000548:	0092      	lsls	r2, r2, #2
 800054a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800054c:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <MX_SPI2_Init+0x74>)
 800054e:	2208      	movs	r2, #8
 8000550:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000552:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <MX_SPI2_Init+0x74>)
 8000554:	2200      	movs	r2, #0
 8000556:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000558:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <MX_SPI2_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800055e:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <MX_SPI2_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000564:	4b09      	ldr	r3, [pc, #36]	@ (800058c <MX_SPI2_Init+0x74>)
 8000566:	2207      	movs	r2, #7
 8000568:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800056a:	4b08      	ldr	r3, [pc, #32]	@ (800058c <MX_SPI2_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <MX_SPI2_Init+0x74>)
 8000572:	2208      	movs	r2, #8
 8000574:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000576:	4b05      	ldr	r3, [pc, #20]	@ (800058c <MX_SPI2_Init+0x74>)
 8000578:	0018      	movs	r0, r3
 800057a:	f001 ffbd 	bl	80024f8 <HAL_SPI_Init>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000582:	f000 f8dd 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	2000007c 	.word	0x2000007c
 8000590:	40003800 	.word	0x40003800

08000594 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800059a:	2308      	movs	r3, #8
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	0018      	movs	r0, r3
 80005a0:	2310      	movs	r3, #16
 80005a2:	001a      	movs	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f002 ff69 	bl	800347c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005aa:	003b      	movs	r3, r7
 80005ac:	0018      	movs	r0, r3
 80005ae:	2308      	movs	r3, #8
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	f002 ff62 	bl	800347c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <MX_TIM1_Init+0xa4>)
 80005ba:	4a20      	ldr	r2, [pc, #128]	@ (800063c <MX_TIM1_Init+0xa8>)
 80005bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3839;
 80005be:	4b1e      	ldr	r3, [pc, #120]	@ (8000638 <MX_TIM1_Init+0xa4>)
 80005c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000640 <MX_TIM1_Init+0xac>)
 80005c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <MX_TIM1_Init+0xa4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 80005ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <MX_TIM1_Init+0xa4>)
 80005cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000644 <MX_TIM1_Init+0xb0>)
 80005ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d0:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <MX_TIM1_Init+0xa4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005d6:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <MX_TIM1_Init+0xa4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005dc:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <MX_TIM1_Init+0xa4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005e2:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_TIM1_Init+0xa4>)
 80005e4:	0018      	movs	r0, r3
 80005e6:	f002 fb15 	bl	8002c14 <HAL_TIM_Base_Init>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80005ee:	f000 f8a7 	bl	8000740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f2:	2108      	movs	r1, #8
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	0152      	lsls	r2, r2, #5
 80005fa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005fc:	187a      	adds	r2, r7, r1
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <MX_TIM1_Init+0xa4>)
 8000600:	0011      	movs	r1, r2
 8000602:	0018      	movs	r0, r3
 8000604:	f002 fcbe 	bl	8002f84 <HAL_TIM_ConfigClockSource>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800060c:	f000 f898 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000610:	003b      	movs	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000616:	003b      	movs	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800061c:	003a      	movs	r2, r7
 800061e:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <MX_TIM1_Init+0xa4>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f002 febc 	bl	80033a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800062c:	f000 f888 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b006      	add	sp, #24
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000e0 	.word	0x200000e0
 800063c:	40012c00 	.word	0x40012c00
 8000640:	00000eff 	.word	0x00000eff
 8000644:	0000c34f 	.word	0x0000c34f

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b089      	sub	sp, #36	@ 0x24
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	240c      	movs	r4, #12
 8000650:	193b      	adds	r3, r7, r4
 8000652:	0018      	movs	r0, r3
 8000654:	2314      	movs	r3, #20
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f002 ff0f 	bl	800347c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065e:	4b36      	ldr	r3, [pc, #216]	@ (8000738 <MX_GPIO_Init+0xf0>)
 8000660:	695a      	ldr	r2, [r3, #20]
 8000662:	4b35      	ldr	r3, [pc, #212]	@ (8000738 <MX_GPIO_Init+0xf0>)
 8000664:	2180      	movs	r1, #128	@ 0x80
 8000666:	03c9      	lsls	r1, r1, #15
 8000668:	430a      	orrs	r2, r1
 800066a:	615a      	str	r2, [r3, #20]
 800066c:	4b32      	ldr	r3, [pc, #200]	@ (8000738 <MX_GPIO_Init+0xf0>)
 800066e:	695a      	ldr	r2, [r3, #20]
 8000670:	2380      	movs	r3, #128	@ 0x80
 8000672:	03db      	lsls	r3, r3, #15
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <MX_GPIO_Init+0xf0>)
 800067c:	695a      	ldr	r2, [r3, #20]
 800067e:	4b2e      	ldr	r3, [pc, #184]	@ (8000738 <MX_GPIO_Init+0xf0>)
 8000680:	2180      	movs	r1, #128	@ 0x80
 8000682:	02c9      	lsls	r1, r1, #11
 8000684:	430a      	orrs	r2, r1
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	4b2b      	ldr	r3, [pc, #172]	@ (8000738 <MX_GPIO_Init+0xf0>)
 800068a:	695a      	ldr	r2, [r3, #20]
 800068c:	2380      	movs	r3, #128	@ 0x80
 800068e:	02db      	lsls	r3, r3, #11
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <MX_GPIO_Init+0xf0>)
 8000698:	695a      	ldr	r2, [r3, #20]
 800069a:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <MX_GPIO_Init+0xf0>)
 800069c:	2180      	movs	r1, #128	@ 0x80
 800069e:	0289      	lsls	r1, r1, #10
 80006a0:	430a      	orrs	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <MX_GPIO_Init+0xf0>)
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	2380      	movs	r3, #128	@ 0x80
 80006aa:	029b      	lsls	r3, r3, #10
 80006ac:	4013      	ands	r3, r2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|RG_STROBE_Pin, GPIO_PIN_RESET);
 80006b2:	2398      	movs	r3, #152	@ 0x98
 80006b4:	01db      	lsls	r3, r3, #7
 80006b6:	4821      	ldr	r0, [pc, #132]	@ (800073c <MX_GPIO_Init+0xf4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	0019      	movs	r1, r3
 80006bc:	f000 fc3e 	bl	8000f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80006c0:	2380      	movs	r3, #128	@ 0x80
 80006c2:	015b      	lsls	r3, r3, #5
 80006c4:	481d      	ldr	r0, [pc, #116]	@ (800073c <MX_GPIO_Init+0xf4>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	0019      	movs	r1, r3
 80006ca:	f000 fc37 	bl	8000f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80006ce:	23e0      	movs	r3, #224	@ 0xe0
 80006d0:	00d9      	lsls	r1, r3, #3
 80006d2:	2390      	movs	r3, #144	@ 0x90
 80006d4:	05db      	lsls	r3, r3, #23
 80006d6:	2200      	movs	r2, #0
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 fc2f 	bl	8000f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 PB12 RG_STROBE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|RG_STROBE_Pin;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	22b8      	movs	r2, #184	@ 0xb8
 80006e2:	01d2      	lsls	r2, r2, #7
 80006e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2201      	movs	r2, #1
 80006ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	4a10      	ldr	r2, [pc, #64]	@ (800073c <MX_GPIO_Init+0xf4>)
 80006fc:	0019      	movs	r1, r3
 80006fe:	0010      	movs	r0, r2
 8000700:	f000 faa4 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000704:	0021      	movs	r1, r4
 8000706:	187b      	adds	r3, r7, r1
 8000708:	22e0      	movs	r2, #224	@ 0xe0
 800070a:	00d2      	lsls	r2, r2, #3
 800070c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2201      	movs	r2, #1
 8000712:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	187a      	adds	r2, r7, r1
 8000722:	2390      	movs	r3, #144	@ 0x90
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fa8f 	bl	8000c4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b009      	add	sp, #36	@ 0x24
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	40021000 	.word	0x40021000
 800073c:	48000400 	.word	0x48000400

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	e7fd      	b.n	8000748 <Error_Handler+0x8>

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <HAL_MspInit+0x44>)
 8000754:	699a      	ldr	r2, [r3, #24]
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <HAL_MspInit+0x44>)
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	619a      	str	r2, [r3, #24]
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <HAL_MspInit+0x44>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_MspInit+0x44>)
 800076c:	69da      	ldr	r2, [r3, #28]
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <HAL_MspInit+0x44>)
 8000770:	2180      	movs	r1, #128	@ 0x80
 8000772:	0549      	lsls	r1, r1, #21
 8000774:	430a      	orrs	r2, r1
 8000776:	61da      	str	r2, [r3, #28]
 8000778:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <HAL_MspInit+0x44>)
 800077a:	69da      	ldr	r2, [r3, #28]
 800077c:	2380      	movs	r3, #128	@ 0x80
 800077e:	055b      	lsls	r3, r3, #21
 8000780:	4013      	ands	r3, r2
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b08b      	sub	sp, #44	@ 0x2c
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	2414      	movs	r4, #20
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	0018      	movs	r0, r3
 80007a2:	2314      	movs	r3, #20
 80007a4:	001a      	movs	r2, r3
 80007a6:	2100      	movs	r1, #0
 80007a8:	f002 fe68 	bl	800347c <memset>
  if(hi2c->Instance==I2C1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000824 <HAL_I2C_MspInit+0x90>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d132      	bne.n	800081c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <HAL_I2C_MspInit+0x94>)
 80007b8:	695a      	ldr	r2, [r3, #20]
 80007ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <HAL_I2C_MspInit+0x94>)
 80007bc:	2180      	movs	r1, #128	@ 0x80
 80007be:	02c9      	lsls	r1, r1, #11
 80007c0:	430a      	orrs	r2, r1
 80007c2:	615a      	str	r2, [r3, #20]
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <HAL_I2C_MspInit+0x94>)
 80007c6:	695a      	ldr	r2, [r3, #20]
 80007c8:	2380      	movs	r3, #128	@ 0x80
 80007ca:	02db      	lsls	r3, r3, #11
 80007cc:	4013      	ands	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	22c0      	movs	r2, #192	@ 0xc0
 80007d6:	0092      	lsls	r2, r2, #2
 80007d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007da:	0021      	movs	r1, r4
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2212      	movs	r2, #18
 80007e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2203      	movs	r2, #3
 80007ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2201      	movs	r2, #1
 80007f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	4a0d      	ldr	r2, [pc, #52]	@ (800082c <HAL_I2C_MspInit+0x98>)
 80007f8:	0019      	movs	r1, r3
 80007fa:	0010      	movs	r0, r2
 80007fc:	f000 fa26 	bl	8000c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <HAL_I2C_MspInit+0x94>)
 8000802:	69da      	ldr	r2, [r3, #28]
 8000804:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <HAL_I2C_MspInit+0x94>)
 8000806:	2180      	movs	r1, #128	@ 0x80
 8000808:	0389      	lsls	r1, r1, #14
 800080a:	430a      	orrs	r2, r1
 800080c:	61da      	str	r2, [r3, #28]
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <HAL_I2C_MspInit+0x94>)
 8000810:	69da      	ldr	r2, [r3, #28]
 8000812:	2380      	movs	r3, #128	@ 0x80
 8000814:	039b      	lsls	r3, r3, #14
 8000816:	4013      	ands	r3, r2
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b00b      	add	sp, #44	@ 0x2c
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	40005400 	.word	0x40005400
 8000828:	40021000 	.word	0x40021000
 800082c:	48000400 	.word	0x48000400

08000830 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b08b      	sub	sp, #44	@ 0x2c
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	2414      	movs	r4, #20
 800083a:	193b      	adds	r3, r7, r4
 800083c:	0018      	movs	r0, r3
 800083e:	2314      	movs	r3, #20
 8000840:	001a      	movs	r2, r3
 8000842:	2100      	movs	r1, #0
 8000844:	f002 fe1a 	bl	800347c <memset>
  if(hspi->Instance==SPI2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a1c      	ldr	r2, [pc, #112]	@ (80008c0 <HAL_SPI_MspInit+0x90>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d132      	bne.n	80008b8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000852:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <HAL_SPI_MspInit+0x94>)
 8000854:	69da      	ldr	r2, [r3, #28]
 8000856:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <HAL_SPI_MspInit+0x94>)
 8000858:	2180      	movs	r1, #128	@ 0x80
 800085a:	01c9      	lsls	r1, r1, #7
 800085c:	430a      	orrs	r2, r1
 800085e:	61da      	str	r2, [r3, #28]
 8000860:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <HAL_SPI_MspInit+0x94>)
 8000862:	69da      	ldr	r2, [r3, #28]
 8000864:	2380      	movs	r3, #128	@ 0x80
 8000866:	01db      	lsls	r3, r3, #7
 8000868:	4013      	ands	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <HAL_SPI_MspInit+0x94>)
 8000870:	695a      	ldr	r2, [r3, #20]
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <HAL_SPI_MspInit+0x94>)
 8000874:	2180      	movs	r1, #128	@ 0x80
 8000876:	02c9      	lsls	r1, r1, #11
 8000878:	430a      	orrs	r2, r1
 800087a:	615a      	str	r2, [r3, #20]
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <HAL_SPI_MspInit+0x94>)
 800087e:	695a      	ldr	r2, [r3, #20]
 8000880:	2380      	movs	r3, #128	@ 0x80
 8000882:	02db      	lsls	r3, r3, #11
 8000884:	4013      	ands	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	22a0      	movs	r2, #160	@ 0xa0
 800088e:	0212      	lsls	r2, r2, #8
 8000890:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	0021      	movs	r1, r4
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2202      	movs	r2, #2
 8000898:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2203      	movs	r2, #3
 80008a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	4a06      	ldr	r2, [pc, #24]	@ (80008c8 <HAL_SPI_MspInit+0x98>)
 80008b0:	0019      	movs	r1, r3
 80008b2:	0010      	movs	r0, r2
 80008b4:	f000 f9ca 	bl	8000c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b00b      	add	sp, #44	@ 0x2c
 80008be:	bd90      	pop	{r4, r7, pc}
 80008c0:	40003800 	.word	0x40003800
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000400 	.word	0x48000400

080008cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000914 <HAL_TIM_Base_MspInit+0x48>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d115      	bne.n	800090a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <HAL_TIM_Base_MspInit+0x4c>)
 80008e0:	699a      	ldr	r2, [r3, #24]
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <HAL_TIM_Base_MspInit+0x4c>)
 80008e4:	2180      	movs	r1, #128	@ 0x80
 80008e6:	0109      	lsls	r1, r1, #4
 80008e8:	430a      	orrs	r2, r1
 80008ea:	619a      	str	r2, [r3, #24]
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <HAL_TIM_Base_MspInit+0x4c>)
 80008ee:	699a      	ldr	r2, [r3, #24]
 80008f0:	2380      	movs	r3, #128	@ 0x80
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4013      	ands	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	200d      	movs	r0, #13
 8000900:	f000 f972 	bl	8000be8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000904:	200d      	movs	r0, #13
 8000906:	f000 f984 	bl	8000c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b004      	add	sp, #16
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	40012c00 	.word	0x40012c00
 8000918:	40021000 	.word	0x40021000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000920:	46c0      	nop			@ (mov r8, r8)
 8000922:	e7fd      	b.n	8000920 <NMI_Handler+0x4>

08000924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	e7fd      	b.n	8000928 <HardFault_Handler+0x4>

0800092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f888 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000954:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000956:	0018      	movs	r0, r3
 8000958:	f002 f9fe 	bl	8002d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	200000e0 	.word	0x200000e0

08000968 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000974:	480d      	ldr	r0, [pc, #52]	@ (80009ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000976:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000978:	f7ff fff6 	bl	8000968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800097e:	490d      	ldr	r1, [pc, #52]	@ (80009b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000980:	4a0d      	ldr	r2, [pc, #52]	@ (80009b8 <LoopForever+0xe>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000994:	4c0a      	ldr	r4, [pc, #40]	@ (80009c0 <LoopForever+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009a2:	f002 fd73 	bl	800348c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a6:	f7ff fccb 	bl	8000340 <main>

080009aa <LoopForever>:

LoopForever:
    b LoopForever
 80009aa:	e7fe      	b.n	80009aa <LoopForever>
  ldr   r0, =_estack
 80009ac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009b8:	08003524 	.word	0x08003524
  ldr r2, =_sbss
 80009bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c0:	2000014c 	.word	0x2000014c

080009c4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_COMP_IRQHandler>
	...

080009c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <HAL_Init+0x24>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <HAL_Init+0x24>)
 80009d2:	2110      	movs	r1, #16
 80009d4:	430a      	orrs	r2, r1
 80009d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f809 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009de:	f7ff feb5 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	40022000 	.word	0x40022000

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <HAL_InitTick+0x5c>)
 80009fa:	681c      	ldr	r4, [r3, #0]
 80009fc:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <HAL_InitTick+0x60>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	0019      	movs	r1, r3
 8000a02:	23fa      	movs	r3, #250	@ 0xfa
 8000a04:	0098      	lsls	r0, r3, #2
 8000a06:	f7ff fb7f 	bl	8000108 <__udivsi3>
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	0020      	movs	r0, r4
 8000a10:	f7ff fb7a 	bl	8000108 <__udivsi3>
 8000a14:	0003      	movs	r3, r0
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 f90b 	bl	8000c32 <HAL_SYSTICK_Config>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e00f      	b.n	8000a44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d80b      	bhi.n	8000a42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	425b      	negs	r3, r3
 8000a30:	2200      	movs	r2, #0
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 f8d8 	bl	8000be8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_InitTick+0x64>)
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b003      	add	sp, #12
 8000a4a:	bd90      	pop	{r4, r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <HAL_IncTick+0x1c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	001a      	movs	r2, r3
 8000a62:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <HAL_IncTick+0x20>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	18d2      	adds	r2, r2, r3
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <HAL_IncTick+0x20>)
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000148 	.word	0x20000148

08000a7c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b02      	ldr	r3, [pc, #8]	@ (8000a8c <HAL_GetTick+0x10>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	20000148 	.word	0x20000148

08000a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	0002      	movs	r2, r0
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aa2:	d809      	bhi.n	8000ab8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	231f      	movs	r3, #31
 8000aac:	401a      	ands	r2, r3
 8000aae:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <__NVIC_EnableIRQ+0x30>)
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4091      	lsls	r1, r2
 8000ab4:	000a      	movs	r2, r1
 8000ab6:	601a      	str	r2, [r3, #0]
  }
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b002      	add	sp, #8
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	0002      	movs	r2, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ad8:	d828      	bhi.n	8000b2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ada:	4a2f      	ldr	r2, [pc, #188]	@ (8000b98 <__NVIC_SetPriority+0xd4>)
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	33c0      	adds	r3, #192	@ 0xc0
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	589b      	ldr	r3, [r3, r2]
 8000aea:	1dfa      	adds	r2, r7, #7
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	0011      	movs	r1, r2
 8000af0:	2203      	movs	r2, #3
 8000af2:	400a      	ands	r2, r1
 8000af4:	00d2      	lsls	r2, r2, #3
 8000af6:	21ff      	movs	r1, #255	@ 0xff
 8000af8:	4091      	lsls	r1, r2
 8000afa:	000a      	movs	r2, r1
 8000afc:	43d2      	mvns	r2, r2
 8000afe:	401a      	ands	r2, r3
 8000b00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	019b      	lsls	r3, r3, #6
 8000b06:	22ff      	movs	r2, #255	@ 0xff
 8000b08:	401a      	ands	r2, r3
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	0018      	movs	r0, r3
 8000b10:	2303      	movs	r3, #3
 8000b12:	4003      	ands	r3, r0
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b18:	481f      	ldr	r0, [pc, #124]	@ (8000b98 <__NVIC_SetPriority+0xd4>)
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	430a      	orrs	r2, r1
 8000b24:	33c0      	adds	r3, #192	@ 0xc0
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b2a:	e031      	b.n	8000b90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b9c <__NVIC_SetPriority+0xd8>)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	0019      	movs	r1, r3
 8000b34:	230f      	movs	r3, #15
 8000b36:	400b      	ands	r3, r1
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	3306      	adds	r3, #6
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	3304      	adds	r3, #4
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	1dfa      	adds	r2, r7, #7
 8000b48:	7812      	ldrb	r2, [r2, #0]
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	400a      	ands	r2, r1
 8000b50:	00d2      	lsls	r2, r2, #3
 8000b52:	21ff      	movs	r1, #255	@ 0xff
 8000b54:	4091      	lsls	r1, r2
 8000b56:	000a      	movs	r2, r1
 8000b58:	43d2      	mvns	r2, r2
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	22ff      	movs	r2, #255	@ 0xff
 8000b64:	401a      	ands	r2, r3
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	4003      	ands	r3, r0
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b74:	4809      	ldr	r0, [pc, #36]	@ (8000b9c <__NVIC_SetPriority+0xd8>)
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	001c      	movs	r4, r3
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	4023      	ands	r3, r4
 8000b80:	3b08      	subs	r3, #8
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	430a      	orrs	r2, r1
 8000b86:	3306      	adds	r3, #6
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	18c3      	adds	r3, r0, r3
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	46c0      	nop			@ (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b003      	add	sp, #12
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	1e5a      	subs	r2, r3, #1
 8000bac:	2380      	movs	r3, #128	@ 0x80
 8000bae:	045b      	lsls	r3, r3, #17
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d301      	bcc.n	8000bb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e010      	b.n	8000bda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <SysTick_Config+0x44>)
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	3a01      	subs	r2, #1
 8000bbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	2103      	movs	r1, #3
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff ff7c 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <SysTick_Config+0x44>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	@ (8000be4 <SysTick_Config+0x44>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	0018      	movs	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	1c02      	adds	r2, r0, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff ff5d 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b004      	add	sp, #16
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	0002      	movs	r2, r0
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b25b      	sxtb	r3, r3
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff ff33 	bl	8000a90 <__NVIC_EnableIRQ>
}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b002      	add	sp, #8
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff ffaf 	bl	8000ba0 <SysTick_Config>
 8000c42:	0003      	movs	r3, r0
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b002      	add	sp, #8
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5a:	e155      	b.n	8000f08 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	4091      	lsls	r1, r2
 8000c66:	000a      	movs	r2, r1
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d100      	bne.n	8000c74 <HAL_GPIO_Init+0x28>
 8000c72:	e146      	b.n	8000f02 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2203      	movs	r2, #3
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d005      	beq.n	8000c8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2203      	movs	r2, #3
 8000c86:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d130      	bne.n	8000cee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	409a      	lsls	r2, r3
 8000c9a:	0013      	movs	r3, r2
 8000c9c:	43da      	mvns	r2, r3
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	409a      	lsls	r2, r3
 8000cae:	0013      	movs	r3, r2
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	0013      	movs	r3, r2
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	2201      	movs	r2, #1
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	0013      	movs	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d017      	beq.n	8000d2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2203      	movs	r2, #3
 8000d30:	4013      	ands	r3, r2
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d123      	bne.n	8000d7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	0092      	lsls	r2, r2, #2
 8000d40:	58d3      	ldr	r3, [r2, r3]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	2207      	movs	r2, #7
 8000d48:	4013      	ands	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	43da      	mvns	r2, r3
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	691a      	ldr	r2, [r3, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	2107      	movs	r1, #7
 8000d62:	400b      	ands	r3, r1
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	6939      	ldr	r1, [r7, #16]
 8000d7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	409a      	lsls	r2, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	23c0      	movs	r3, #192	@ 0xc0
 8000db8:	029b      	lsls	r3, r3, #10
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d100      	bne.n	8000dc0 <HAL_GPIO_Init+0x174>
 8000dbe:	e0a0      	b.n	8000f02 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc0:	4b57      	ldr	r3, [pc, #348]	@ (8000f20 <HAL_GPIO_Init+0x2d4>)
 8000dc2:	699a      	ldr	r2, [r3, #24]
 8000dc4:	4b56      	ldr	r3, [pc, #344]	@ (8000f20 <HAL_GPIO_Init+0x2d4>)
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	619a      	str	r2, [r3, #24]
 8000dcc:	4b54      	ldr	r3, [pc, #336]	@ (8000f20 <HAL_GPIO_Init+0x2d4>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd8:	4a52      	ldr	r2, [pc, #328]	@ (8000f24 <HAL_GPIO_Init+0x2d8>)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	589b      	ldr	r3, [r3, r2]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4013      	ands	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	409a      	lsls	r2, r3
 8000df2:	0013      	movs	r3, r2
 8000df4:	43da      	mvns	r2, r3
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	2390      	movs	r3, #144	@ 0x90
 8000e00:	05db      	lsls	r3, r3, #23
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d019      	beq.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a47      	ldr	r2, [pc, #284]	@ (8000f28 <HAL_GPIO_Init+0x2dc>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d013      	beq.n	8000e36 <HAL_GPIO_Init+0x1ea>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a46      	ldr	r2, [pc, #280]	@ (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d00d      	beq.n	8000e32 <HAL_GPIO_Init+0x1e6>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a45      	ldr	r2, [pc, #276]	@ (8000f30 <HAL_GPIO_Init+0x2e4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d007      	beq.n	8000e2e <HAL_GPIO_Init+0x1e2>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a44      	ldr	r2, [pc, #272]	@ (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_GPIO_Init+0x1de>
 8000e26:	2304      	movs	r3, #4
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_Init+0x1f0>
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x1f0>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x1f0>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x1f0>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x1f0>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	2103      	movs	r1, #3
 8000e40:	400a      	ands	r2, r1
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e4c:	4935      	ldr	r1, [pc, #212]	@ (8000f24 <HAL_GPIO_Init+0x2d8>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5a:	4b37      	ldr	r3, [pc, #220]	@ (8000f38 <HAL_GPIO_Init+0x2ec>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	43da      	mvns	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	2380      	movs	r3, #128	@ 0x80
 8000e70:	035b      	lsls	r3, r3, #13
 8000e72:	4013      	ands	r3, r2
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f38 <HAL_GPIO_Init+0x2ec>)
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e84:	4b2c      	ldr	r3, [pc, #176]	@ (8000f38 <HAL_GPIO_Init+0x2ec>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	43da      	mvns	r2, r3
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	2380      	movs	r3, #128	@ 0x80
 8000e9a:	039b      	lsls	r3, r3, #14
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ea8:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <HAL_GPIO_Init+0x2ec>)
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000eae:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <HAL_GPIO_Init+0x2ec>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	2380      	movs	r3, #128	@ 0x80
 8000ec4:	029b      	lsls	r3, r3, #10
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <HAL_GPIO_Init+0x2ec>)
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <HAL_GPIO_Init+0x2ec>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	43da      	mvns	r2, r3
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	025b      	lsls	r3, r3, #9
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <HAL_GPIO_Init+0x2ec>)
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	40da      	lsrs	r2, r3
 8000f10:	1e13      	subs	r3, r2, #0
 8000f12:	d000      	beq.n	8000f16 <HAL_GPIO_Init+0x2ca>
 8000f14:	e6a2      	b.n	8000c5c <HAL_GPIO_Init+0x10>
  } 
}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b006      	add	sp, #24
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010000 	.word	0x40010000
 8000f28:	48000400 	.word	0x48000400
 8000f2c:	48000800 	.word	0x48000800
 8000f30:	48000c00 	.word	0x48000c00
 8000f34:	48001000 	.word	0x48001000
 8000f38:	40010400 	.word	0x40010400

08000f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	0008      	movs	r0, r1
 8000f46:	0011      	movs	r1, r2
 8000f48:	1cbb      	adds	r3, r7, #2
 8000f4a:	1c02      	adds	r2, r0, #0
 8000f4c:	801a      	strh	r2, [r3, #0]
 8000f4e:	1c7b      	adds	r3, r7, #1
 8000f50:	1c0a      	adds	r2, r1, #0
 8000f52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f54:	1c7b      	adds	r3, r7, #1
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d004      	beq.n	8000f66 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f5c:	1cbb      	adds	r3, r7, #2
 8000f5e:	881a      	ldrh	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f64:	e003      	b.n	8000f6e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f66:	1cbb      	adds	r3, r7, #2
 8000f68:	881a      	ldrh	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e082      	b.n	8001090 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2241      	movs	r2, #65	@ 0x41
 8000f8e:	5c9b      	ldrb	r3, [r3, r2]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d107      	bne.n	8000fa6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2240      	movs	r2, #64	@ 0x40
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff fbf7 	bl	8000794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2241      	movs	r2, #65	@ 0x41
 8000faa:	2124      	movs	r1, #36	@ 0x24
 8000fac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	438a      	bics	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4934      	ldr	r1, [pc, #208]	@ (8001098 <HAL_I2C_Init+0x120>)
 8000fc8:	400a      	ands	r2, r1
 8000fca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4931      	ldr	r1, [pc, #196]	@ (800109c <HAL_I2C_Init+0x124>)
 8000fd8:	400a      	ands	r2, r1
 8000fda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d108      	bne.n	8000ff6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2180      	movs	r1, #128	@ 0x80
 8000fee:	0209      	lsls	r1, r1, #8
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	e007      	b.n	8001006 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2184      	movs	r1, #132	@ 0x84
 8001000:	0209      	lsls	r1, r1, #8
 8001002:	430a      	orrs	r2, r1
 8001004:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d104      	bne.n	8001018 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2280      	movs	r2, #128	@ 0x80
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	491f      	ldr	r1, [pc, #124]	@ (80010a0 <HAL_I2C_Init+0x128>)
 8001024:	430a      	orrs	r2, r1
 8001026:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	491a      	ldr	r1, [pc, #104]	@ (800109c <HAL_I2C_Init+0x124>)
 8001034:	400a      	ands	r2, r1
 8001036:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	431a      	orrs	r2, r3
 8001042:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69d9      	ldr	r1, [r3, #28]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a1a      	ldr	r2, [r3, #32]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2101      	movs	r1, #1
 800106e:	430a      	orrs	r2, r1
 8001070:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2241      	movs	r2, #65	@ 0x41
 800107c:	2120      	movs	r1, #32
 800107e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2242      	movs	r2, #66	@ 0x42
 800108a:	2100      	movs	r1, #0
 800108c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	0018      	movs	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	b002      	add	sp, #8
 8001096:	bd80      	pop	{r7, pc}
 8001098:	f0ffffff 	.word	0xf0ffffff
 800109c:	ffff7fff 	.word	0xffff7fff
 80010a0:	02008000 	.word	0x02008000

080010a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	000c      	movs	r4, r1
 80010ae:	0010      	movs	r0, r2
 80010b0:	0019      	movs	r1, r3
 80010b2:	230a      	movs	r3, #10
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	1c22      	adds	r2, r4, #0
 80010b8:	801a      	strh	r2, [r3, #0]
 80010ba:	2308      	movs	r3, #8
 80010bc:	18fb      	adds	r3, r7, r3
 80010be:	1c02      	adds	r2, r0, #0
 80010c0:	801a      	strh	r2, [r3, #0]
 80010c2:	1dbb      	adds	r3, r7, #6
 80010c4:	1c0a      	adds	r2, r1, #0
 80010c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2241      	movs	r2, #65	@ 0x41
 80010cc:	5c9b      	ldrb	r3, [r3, r2]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b20      	cmp	r3, #32
 80010d2:	d000      	beq.n	80010d6 <HAL_I2C_Mem_Read+0x32>
 80010d4:	e110      	b.n	80012f8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80010d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d004      	beq.n	80010e6 <HAL_I2C_Mem_Read+0x42>
 80010dc:	232c      	movs	r3, #44	@ 0x2c
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d105      	bne.n	80010f2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2280      	movs	r2, #128	@ 0x80
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e103      	b.n	80012fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2240      	movs	r2, #64	@ 0x40
 80010f6:	5c9b      	ldrb	r3, [r3, r2]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <HAL_I2C_Mem_Read+0x5c>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e0fc      	b.n	80012fa <HAL_I2C_Mem_Read+0x256>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2240      	movs	r2, #64	@ 0x40
 8001104:	2101      	movs	r1, #1
 8001106:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001108:	f7ff fcb8 	bl	8000a7c <HAL_GetTick>
 800110c:	0003      	movs	r3, r0
 800110e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	0219      	lsls	r1, r3, #8
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2319      	movs	r3, #25
 800111c:	2201      	movs	r2, #1
 800111e:	f000 f979 	bl	8001414 <I2C_WaitOnFlagUntilTimeout>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d001      	beq.n	800112a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e0e7      	b.n	80012fa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2241      	movs	r2, #65	@ 0x41
 800112e:	2122      	movs	r1, #34	@ 0x22
 8001130:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2242      	movs	r2, #66	@ 0x42
 8001136:	2140      	movs	r1, #64	@ 0x40
 8001138:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001144:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	222c      	movs	r2, #44	@ 0x2c
 800114a:	18ba      	adds	r2, r7, r2
 800114c:	8812      	ldrh	r2, [r2, #0]
 800114e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2200      	movs	r2, #0
 8001154:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001156:	1dbb      	adds	r3, r7, #6
 8001158:	881c      	ldrh	r4, [r3, #0]
 800115a:	2308      	movs	r3, #8
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	881a      	ldrh	r2, [r3, #0]
 8001160:	230a      	movs	r3, #10
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	8819      	ldrh	r1, [r3, #0]
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	0023      	movs	r3, r4
 8001172:	f000 f8cb 	bl	800130c <I2C_RequestMemoryRead>
 8001176:	1e03      	subs	r3, r0, #0
 8001178:	d005      	beq.n	8001186 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2240      	movs	r2, #64	@ 0x40
 800117e:	2100      	movs	r1, #0
 8001180:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e0b9      	b.n	80012fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800118a:	b29b      	uxth	r3, r3
 800118c:	2bff      	cmp	r3, #255	@ 0xff
 800118e:	d911      	bls.n	80011b4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	22ff      	movs	r2, #255	@ 0xff
 8001194:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800119a:	b2da      	uxtb	r2, r3
 800119c:	2380      	movs	r3, #128	@ 0x80
 800119e:	045c      	lsls	r4, r3, #17
 80011a0:	230a      	movs	r3, #10
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	8819      	ldrh	r1, [r3, #0]
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	4b56      	ldr	r3, [pc, #344]	@ (8001304 <HAL_I2C_Mem_Read+0x260>)
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	0023      	movs	r3, r4
 80011ae:	f000 fb01 	bl	80017b4 <I2C_TransferConfig>
 80011b2:	e012      	b.n	80011da <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	049c      	lsls	r4, r3, #18
 80011c8:	230a      	movs	r3, #10
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	8819      	ldrh	r1, [r3, #0]
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001304 <HAL_I2C_Mem_Read+0x260>)
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	0023      	movs	r3, r4
 80011d6:	f000 faed 	bl	80017b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80011da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	0013      	movs	r3, r2
 80011e4:	2200      	movs	r2, #0
 80011e6:	2104      	movs	r1, #4
 80011e8:	f000 f914 	bl	8001414 <I2C_WaitOnFlagUntilTimeout>
 80011ec:	1e03      	subs	r3, r0, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e082      	b.n	80012fa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001210:	3b01      	subs	r3, #1
 8001212:	b29a      	uxth	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800121c:	b29b      	uxth	r3, r3
 800121e:	3b01      	subs	r3, #1
 8001220:	b29a      	uxth	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800122a:	b29b      	uxth	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d03a      	beq.n	80012a6 <HAL_I2C_Mem_Read+0x202>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001234:	2b00      	cmp	r3, #0
 8001236:	d136      	bne.n	80012a6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	0013      	movs	r3, r2
 8001242:	2200      	movs	r2, #0
 8001244:	2180      	movs	r1, #128	@ 0x80
 8001246:	f000 f8e5 	bl	8001414 <I2C_WaitOnFlagUntilTimeout>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d001      	beq.n	8001252 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e053      	b.n	80012fa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001256:	b29b      	uxth	r3, r3
 8001258:	2bff      	cmp	r3, #255	@ 0xff
 800125a:	d911      	bls.n	8001280 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	22ff      	movs	r2, #255	@ 0xff
 8001260:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001266:	b2da      	uxtb	r2, r3
 8001268:	2380      	movs	r3, #128	@ 0x80
 800126a:	045c      	lsls	r4, r3, #17
 800126c:	230a      	movs	r3, #10
 800126e:	18fb      	adds	r3, r7, r3
 8001270:	8819      	ldrh	r1, [r3, #0]
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	2300      	movs	r3, #0
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	0023      	movs	r3, r4
 800127a:	f000 fa9b 	bl	80017b4 <I2C_TransferConfig>
 800127e:	e012      	b.n	80012a6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001284:	b29a      	uxth	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800128e:	b2da      	uxtb	r2, r3
 8001290:	2380      	movs	r3, #128	@ 0x80
 8001292:	049c      	lsls	r4, r3, #18
 8001294:	230a      	movs	r3, #10
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	8819      	ldrh	r1, [r3, #0]
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	2300      	movs	r3, #0
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	0023      	movs	r3, r4
 80012a2:	f000 fa87 	bl	80017b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d194      	bne.n	80011da <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	0018      	movs	r0, r3
 80012b8:	f000 f940 	bl	800153c <I2C_WaitOnSTOPFlagUntilTimeout>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d001      	beq.n	80012c4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e01a      	b.n	80012fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2220      	movs	r2, #32
 80012ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	490c      	ldr	r1, [pc, #48]	@ (8001308 <HAL_I2C_Mem_Read+0x264>)
 80012d8:	400a      	ands	r2, r1
 80012da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2241      	movs	r2, #65	@ 0x41
 80012e0:	2120      	movs	r1, #32
 80012e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2242      	movs	r2, #66	@ 0x42
 80012e8:	2100      	movs	r1, #0
 80012ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2240      	movs	r2, #64	@ 0x40
 80012f0:	2100      	movs	r1, #0
 80012f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e000      	b.n	80012fa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80012f8:	2302      	movs	r3, #2
  }
}
 80012fa:	0018      	movs	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b007      	add	sp, #28
 8001300:	bd90      	pop	{r4, r7, pc}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	80002400 	.word	0x80002400
 8001308:	fe00e800 	.word	0xfe00e800

0800130c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800130c:	b5b0      	push	{r4, r5, r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af02      	add	r7, sp, #8
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	000c      	movs	r4, r1
 8001316:	0010      	movs	r0, r2
 8001318:	0019      	movs	r1, r3
 800131a:	250a      	movs	r5, #10
 800131c:	197b      	adds	r3, r7, r5
 800131e:	1c22      	adds	r2, r4, #0
 8001320:	801a      	strh	r2, [r3, #0]
 8001322:	2308      	movs	r3, #8
 8001324:	18fb      	adds	r3, r7, r3
 8001326:	1c02      	adds	r2, r0, #0
 8001328:	801a      	strh	r2, [r3, #0]
 800132a:	1dbb      	adds	r3, r7, #6
 800132c:	1c0a      	adds	r2, r1, #0
 800132e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001330:	1dbb      	adds	r3, r7, #6
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	197b      	adds	r3, r7, r5
 8001338:	8819      	ldrh	r1, [r3, #0]
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	4b23      	ldr	r3, [pc, #140]	@ (80013cc <I2C_RequestMemoryRead+0xc0>)
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2300      	movs	r3, #0
 8001342:	f000 fa37 	bl	80017b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001348:	6a39      	ldr	r1, [r7, #32]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	0018      	movs	r0, r3
 800134e:	f000 f8af 	bl	80014b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001352:	1e03      	subs	r3, r0, #0
 8001354:	d001      	beq.n	800135a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e033      	b.n	80013c2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800135a:	1dbb      	adds	r3, r7, #6
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d107      	bne.n	8001372 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001362:	2308      	movs	r3, #8
 8001364:	18fb      	adds	r3, r7, r3
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001370:	e019      	b.n	80013a6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001372:	2308      	movs	r3, #8
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	b2da      	uxtb	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001386:	6a39      	ldr	r1, [r7, #32]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	0018      	movs	r0, r3
 800138c:	f000 f890 	bl	80014b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001390:	1e03      	subs	r3, r0, #0
 8001392:	d001      	beq.n	8001398 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e014      	b.n	80013c2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001398:	2308      	movs	r3, #8
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80013a6:	6a3a      	ldr	r2, [r7, #32]
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	0013      	movs	r3, r2
 80013b0:	2200      	movs	r2, #0
 80013b2:	2140      	movs	r1, #64	@ 0x40
 80013b4:	f000 f82e 	bl	8001414 <I2C_WaitOnFlagUntilTimeout>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d001      	beq.n	80013c0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b004      	add	sp, #16
 80013c8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	80002000 	.word	0x80002000

080013d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d103      	bne.n	80013ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2200      	movs	r2, #0
 80013ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2201      	movs	r2, #1
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d007      	beq.n	800140c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2101      	movs	r1, #1
 8001408:	430a      	orrs	r2, r1
 800140a:	619a      	str	r2, [r3, #24]
  }
}
 800140c:	46c0      	nop			@ (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b002      	add	sp, #8
 8001412:	bd80      	pop	{r7, pc}

08001414 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	1dfb      	adds	r3, r7, #7
 8001422:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001424:	e030      	b.n	8001488 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	d02d      	beq.n	8001488 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800142c:	f7ff fb26 	bl	8000a7c <HAL_GetTick>
 8001430:	0002      	movs	r2, r0
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d302      	bcc.n	8001442 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d122      	bne.n	8001488 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	4013      	ands	r3, r2
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	425a      	negs	r2, r3
 8001452:	4153      	adcs	r3, r2
 8001454:	b2db      	uxtb	r3, r3
 8001456:	001a      	movs	r2, r3
 8001458:	1dfb      	adds	r3, r7, #7
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d113      	bne.n	8001488 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001464:	2220      	movs	r2, #32
 8001466:	431a      	orrs	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2241      	movs	r2, #65	@ 0x41
 8001470:	2120      	movs	r1, #32
 8001472:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2242      	movs	r2, #66	@ 0x42
 8001478:	2100      	movs	r1, #0
 800147a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2240      	movs	r2, #64	@ 0x40
 8001480:	2100      	movs	r1, #0
 8001482:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e00f      	b.n	80014a8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	4013      	ands	r3, r2
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	425a      	negs	r2, r3
 8001498:	4153      	adcs	r3, r2
 800149a:	b2db      	uxtb	r3, r3
 800149c:	001a      	movs	r2, r3
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d0bf      	beq.n	8001426 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b004      	add	sp, #16
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014bc:	e032      	b.n	8001524 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	0018      	movs	r0, r3
 80014c6:	f000 f87d 	bl	80015c4 <I2C_IsErrorOccurred>
 80014ca:	1e03      	subs	r3, r0, #0
 80014cc:	d001      	beq.n	80014d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e030      	b.n	8001534 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	3301      	adds	r3, #1
 80014d6:	d025      	beq.n	8001524 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014d8:	f7ff fad0 	bl	8000a7c <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d302      	bcc.n	80014ee <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d11a      	bne.n	8001524 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2202      	movs	r2, #2
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d013      	beq.n	8001524 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001500:	2220      	movs	r2, #32
 8001502:	431a      	orrs	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2241      	movs	r2, #65	@ 0x41
 800150c:	2120      	movs	r1, #32
 800150e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2242      	movs	r2, #66	@ 0x42
 8001514:	2100      	movs	r1, #0
 8001516:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2240      	movs	r2, #64	@ 0x40
 800151c:	2100      	movs	r1, #0
 800151e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e007      	b.n	8001534 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	2b02      	cmp	r3, #2
 8001530:	d1c5      	bne.n	80014be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b004      	add	sp, #16
 800153a:	bd80      	pop	{r7, pc}

0800153c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001548:	e02f      	b.n	80015aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	0018      	movs	r0, r3
 8001552:	f000 f837 	bl	80015c4 <I2C_IsErrorOccurred>
 8001556:	1e03      	subs	r3, r0, #0
 8001558:	d001      	beq.n	800155e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e02d      	b.n	80015ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800155e:	f7ff fa8d 	bl	8000a7c <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	429a      	cmp	r2, r3
 800156c:	d302      	bcc.n	8001574 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d11a      	bne.n	80015aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2220      	movs	r2, #32
 800157c:	4013      	ands	r3, r2
 800157e:	2b20      	cmp	r3, #32
 8001580:	d013      	beq.n	80015aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	2220      	movs	r2, #32
 8001588:	431a      	orrs	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2241      	movs	r2, #65	@ 0x41
 8001592:	2120      	movs	r1, #32
 8001594:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2242      	movs	r2, #66	@ 0x42
 800159a:	2100      	movs	r1, #0
 800159c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2240      	movs	r2, #64	@ 0x40
 80015a2:	2100      	movs	r1, #0
 80015a4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e007      	b.n	80015ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2220      	movs	r2, #32
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b20      	cmp	r3, #32
 80015b6:	d1c8      	bne.n	800154a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	0018      	movs	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	b004      	add	sp, #16
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d0:	2327      	movs	r3, #39	@ 0x27
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2210      	movs	r2, #16
 80015ec:	4013      	ands	r3, r2
 80015ee:	d100      	bne.n	80015f2 <I2C_IsErrorOccurred+0x2e>
 80015f0:	e079      	b.n	80016e6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2210      	movs	r2, #16
 80015f8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80015fa:	e057      	b.n	80016ac <I2C_IsErrorOccurred+0xe8>
 80015fc:	2227      	movs	r2, #39	@ 0x27
 80015fe:	18bb      	adds	r3, r7, r2
 8001600:	18ba      	adds	r2, r7, r2
 8001602:	7812      	ldrb	r2, [r2, #0]
 8001604:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3301      	adds	r3, #1
 800160a:	d04f      	beq.n	80016ac <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800160c:	f7ff fa36 	bl	8000a7c <HAL_GetTick>
 8001610:	0002      	movs	r2, r0
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	429a      	cmp	r2, r3
 800161a:	d302      	bcc.n	8001622 <I2C_IsErrorOccurred+0x5e>
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d144      	bne.n	80016ac <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	01db      	lsls	r3, r3, #7
 800162c:	4013      	ands	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001630:	2013      	movs	r0, #19
 8001632:	183b      	adds	r3, r7, r0
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	2142      	movs	r1, #66	@ 0x42
 8001638:	5c52      	ldrb	r2, [r2, r1]
 800163a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699a      	ldr	r2, [r3, #24]
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	401a      	ands	r2, r3
 8001648:	2380      	movs	r3, #128	@ 0x80
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	429a      	cmp	r2, r3
 800164e:	d126      	bne.n	800169e <I2C_IsErrorOccurred+0xda>
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	2380      	movs	r3, #128	@ 0x80
 8001654:	01db      	lsls	r3, r3, #7
 8001656:	429a      	cmp	r2, r3
 8001658:	d021      	beq.n	800169e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800165a:	183b      	adds	r3, r7, r0
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b20      	cmp	r3, #32
 8001660:	d01d      	beq.n	800169e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2180      	movs	r1, #128	@ 0x80
 800166e:	01c9      	lsls	r1, r1, #7
 8001670:	430a      	orrs	r2, r1
 8001672:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001674:	f7ff fa02 	bl	8000a7c <HAL_GetTick>
 8001678:	0003      	movs	r3, r0
 800167a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800167c:	e00f      	b.n	800169e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800167e:	f7ff f9fd 	bl	8000a7c <HAL_GetTick>
 8001682:	0002      	movs	r2, r0
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b19      	cmp	r3, #25
 800168a:	d908      	bls.n	800169e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	2220      	movs	r2, #32
 8001690:	4313      	orrs	r3, r2
 8001692:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001694:	2327      	movs	r3, #39	@ 0x27
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]

              break;
 800169c:	e006      	b.n	80016ac <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	2220      	movs	r2, #32
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	d1e8      	bne.n	800167e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2220      	movs	r2, #32
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b20      	cmp	r3, #32
 80016b8:	d004      	beq.n	80016c4 <I2C_IsErrorOccurred+0x100>
 80016ba:	2327      	movs	r3, #39	@ 0x27
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d09b      	beq.n	80015fc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80016c4:	2327      	movs	r3, #39	@ 0x27
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d103      	bne.n	80016d6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2220      	movs	r2, #32
 80016d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	2204      	movs	r2, #4
 80016da:	4313      	orrs	r3, r2
 80016dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80016de:	2327      	movs	r3, #39	@ 0x27
 80016e0:	18fb      	adds	r3, r7, r3
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4013      	ands	r3, r2
 80016f6:	d00c      	beq.n	8001712 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	2201      	movs	r2, #1
 80016fc:	4313      	orrs	r3, r2
 80016fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2280      	movs	r2, #128	@ 0x80
 8001706:	0052      	lsls	r2, r2, #1
 8001708:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800170a:	2327      	movs	r3, #39	@ 0x27
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4013      	ands	r3, r2
 800171a:	d00c      	beq.n	8001736 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	2208      	movs	r2, #8
 8001720:	4313      	orrs	r3, r2
 8001722:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2280      	movs	r2, #128	@ 0x80
 800172a:	00d2      	lsls	r2, r2, #3
 800172c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800172e:	2327      	movs	r3, #39	@ 0x27
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	2380      	movs	r3, #128	@ 0x80
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d00c      	beq.n	800175a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	2202      	movs	r2, #2
 8001744:	4313      	orrs	r3, r2
 8001746:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2280      	movs	r2, #128	@ 0x80
 800174e:	0092      	lsls	r2, r2, #2
 8001750:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001752:	2327      	movs	r3, #39	@ 0x27
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800175a:	2327      	movs	r3, #39	@ 0x27
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01d      	beq.n	80017a0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	0018      	movs	r0, r3
 8001768:	f7ff fe32 	bl	80013d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	490e      	ldr	r1, [pc, #56]	@ (80017b0 <I2C_IsErrorOccurred+0x1ec>)
 8001778:	400a      	ands	r2, r1
 800177a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	431a      	orrs	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2241      	movs	r2, #65	@ 0x41
 800178c:	2120      	movs	r1, #32
 800178e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2242      	movs	r2, #66	@ 0x42
 8001794:	2100      	movs	r1, #0
 8001796:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2240      	movs	r2, #64	@ 0x40
 800179c:	2100      	movs	r1, #0
 800179e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80017a0:	2327      	movs	r3, #39	@ 0x27
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	781b      	ldrb	r3, [r3, #0]
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b00a      	add	sp, #40	@ 0x28
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	fe00e800 	.word	0xfe00e800

080017b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	0008      	movs	r0, r1
 80017be:	0011      	movs	r1, r2
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	240a      	movs	r4, #10
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	1c02      	adds	r2, r0, #0
 80017c8:	801a      	strh	r2, [r3, #0]
 80017ca:	2009      	movs	r0, #9
 80017cc:	183b      	adds	r3, r7, r0
 80017ce:	1c0a      	adds	r2, r1, #0
 80017d0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	059b      	lsls	r3, r3, #22
 80017d8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017da:	183b      	adds	r3, r7, r0
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	0419      	lsls	r1, r3, #16
 80017e0:	23ff      	movs	r3, #255	@ 0xff
 80017e2:	041b      	lsls	r3, r3, #16
 80017e4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017e6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ee:	4313      	orrs	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	085b      	lsrs	r3, r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017fe:	0d51      	lsrs	r1, r2, #21
 8001800:	2280      	movs	r2, #128	@ 0x80
 8001802:	00d2      	lsls	r2, r2, #3
 8001804:	400a      	ands	r2, r1
 8001806:	4907      	ldr	r1, [pc, #28]	@ (8001824 <I2C_TransferConfig+0x70>)
 8001808:	430a      	orrs	r2, r1
 800180a:	43d2      	mvns	r2, r2
 800180c:	401a      	ands	r2, r3
 800180e:	0011      	movs	r1, r2
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	430a      	orrs	r2, r1
 8001818:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b007      	add	sp, #28
 8001820:	bd90      	pop	{r4, r7, pc}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	03ff63ff 	.word	0x03ff63ff

08001828 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2241      	movs	r2, #65	@ 0x41
 8001836:	5c9b      	ldrb	r3, [r3, r2]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b20      	cmp	r3, #32
 800183c:	d138      	bne.n	80018b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2240      	movs	r2, #64	@ 0x40
 8001842:	5c9b      	ldrb	r3, [r3, r2]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001848:	2302      	movs	r3, #2
 800184a:	e032      	b.n	80018b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2240      	movs	r2, #64	@ 0x40
 8001850:	2101      	movs	r1, #1
 8001852:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2241      	movs	r2, #65	@ 0x41
 8001858:	2124      	movs	r1, #36	@ 0x24
 800185a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2101      	movs	r1, #1
 8001868:	438a      	bics	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4911      	ldr	r1, [pc, #68]	@ (80018bc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001878:	400a      	ands	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6819      	ldr	r1, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2241      	movs	r2, #65	@ 0x41
 80018a0:	2120      	movs	r1, #32
 80018a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2240      	movs	r2, #64	@ 0x40
 80018a8:	2100      	movs	r1, #0
 80018aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e000      	b.n	80018b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018b0:	2302      	movs	r3, #2
  }
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	ffffefff 	.word	0xffffefff

080018c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2241      	movs	r2, #65	@ 0x41
 80018ce:	5c9b      	ldrb	r3, [r3, r2]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	d139      	bne.n	800194a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2240      	movs	r2, #64	@ 0x40
 80018da:	5c9b      	ldrb	r3, [r3, r2]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e033      	b.n	800194c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2240      	movs	r2, #64	@ 0x40
 80018e8:	2101      	movs	r1, #1
 80018ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2241      	movs	r2, #65	@ 0x41
 80018f0:	2124      	movs	r1, #36	@ 0x24
 80018f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2101      	movs	r1, #1
 8001900:	438a      	bics	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a11      	ldr	r2, [pc, #68]	@ (8001954 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001910:	4013      	ands	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2241      	movs	r2, #65	@ 0x41
 800193a:	2120      	movs	r1, #32
 800193c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2240      	movs	r2, #64	@ 0x40
 8001942:	2100      	movs	r1, #0
 8001944:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800194a:	2302      	movs	r3, #2
  }
}
 800194c:	0018      	movs	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	b004      	add	sp, #16
 8001952:	bd80      	pop	{r7, pc}
 8001954:	fffff0ff 	.word	0xfffff0ff

08001958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	f000 fb76 	bl	8002058 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2201      	movs	r2, #1
 8001972:	4013      	ands	r3, r2
 8001974:	d100      	bne.n	8001978 <HAL_RCC_OscConfig+0x20>
 8001976:	e08e      	b.n	8001a96 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001978:	4bc5      	ldr	r3, [pc, #788]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	220c      	movs	r2, #12
 800197e:	4013      	ands	r3, r2
 8001980:	2b04      	cmp	r3, #4
 8001982:	d00e      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001984:	4bc2      	ldr	r3, [pc, #776]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	220c      	movs	r2, #12
 800198a:	4013      	ands	r3, r2
 800198c:	2b08      	cmp	r3, #8
 800198e:	d117      	bne.n	80019c0 <HAL_RCC_OscConfig+0x68>
 8001990:	4bbf      	ldr	r3, [pc, #764]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	23c0      	movs	r3, #192	@ 0xc0
 8001996:	025b      	lsls	r3, r3, #9
 8001998:	401a      	ands	r2, r3
 800199a:	2380      	movs	r3, #128	@ 0x80
 800199c:	025b      	lsls	r3, r3, #9
 800199e:	429a      	cmp	r2, r3
 80019a0:	d10e      	bne.n	80019c0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a2:	4bbb      	ldr	r3, [pc, #748]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2380      	movs	r3, #128	@ 0x80
 80019a8:	029b      	lsls	r3, r3, #10
 80019aa:	4013      	ands	r3, r2
 80019ac:	d100      	bne.n	80019b0 <HAL_RCC_OscConfig+0x58>
 80019ae:	e071      	b.n	8001a94 <HAL_RCC_OscConfig+0x13c>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d000      	beq.n	80019ba <HAL_RCC_OscConfig+0x62>
 80019b8:	e06c      	b.n	8001a94 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	f000 fb4c 	bl	8002058 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d107      	bne.n	80019d8 <HAL_RCC_OscConfig+0x80>
 80019c8:	4bb1      	ldr	r3, [pc, #708]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4bb0      	ldr	r3, [pc, #704]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 80019ce:	2180      	movs	r1, #128	@ 0x80
 80019d0:	0249      	lsls	r1, r1, #9
 80019d2:	430a      	orrs	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e02f      	b.n	8001a38 <HAL_RCC_OscConfig+0xe0>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10c      	bne.n	80019fa <HAL_RCC_OscConfig+0xa2>
 80019e0:	4bab      	ldr	r3, [pc, #684]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4baa      	ldr	r3, [pc, #680]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 80019e6:	49ab      	ldr	r1, [pc, #684]	@ (8001c94 <HAL_RCC_OscConfig+0x33c>)
 80019e8:	400a      	ands	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	4ba8      	ldr	r3, [pc, #672]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4ba7      	ldr	r3, [pc, #668]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 80019f2:	49a9      	ldr	r1, [pc, #676]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e01e      	b.n	8001a38 <HAL_RCC_OscConfig+0xe0>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d10e      	bne.n	8001a20 <HAL_RCC_OscConfig+0xc8>
 8001a02:	4ba3      	ldr	r3, [pc, #652]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4ba2      	ldr	r3, [pc, #648]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001a08:	2180      	movs	r1, #128	@ 0x80
 8001a0a:	02c9      	lsls	r1, r1, #11
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	4b9f      	ldr	r3, [pc, #636]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b9e      	ldr	r3, [pc, #632]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001a16:	2180      	movs	r1, #128	@ 0x80
 8001a18:	0249      	lsls	r1, r1, #9
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0xe0>
 8001a20:	4b9b      	ldr	r3, [pc, #620]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b9a      	ldr	r3, [pc, #616]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001a26:	499b      	ldr	r1, [pc, #620]	@ (8001c94 <HAL_RCC_OscConfig+0x33c>)
 8001a28:	400a      	ands	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	4b98      	ldr	r3, [pc, #608]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b97      	ldr	r3, [pc, #604]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001a32:	4999      	ldr	r1, [pc, #612]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d014      	beq.n	8001a6a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff f81c 	bl	8000a7c <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a4a:	f7ff f817 	bl	8000a7c <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b64      	cmp	r3, #100	@ 0x64
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e2fd      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5c:	4b8c      	ldr	r3, [pc, #560]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	@ 0x80
 8001a62:	029b      	lsls	r3, r3, #10
 8001a64:	4013      	ands	r3, r2
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0xf2>
 8001a68:	e015      	b.n	8001a96 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7ff f807 	bl	8000a7c <HAL_GetTick>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff f802 	bl	8000a7c <HAL_GetTick>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	@ 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e2e8      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	4b82      	ldr	r3, [pc, #520]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	2380      	movs	r3, #128	@ 0x80
 8001a8c:	029b      	lsls	r3, r3, #10
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x11c>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d100      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x14a>
 8001aa0:	e06c      	b.n	8001b7c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d00e      	beq.n	8001aca <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aac:	4b78      	ldr	r3, [pc, #480]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	220c      	movs	r2, #12
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d11f      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1a0>
 8001ab8:	4b75      	ldr	r3, [pc, #468]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	23c0      	movs	r3, #192	@ 0xc0
 8001abe:	025b      	lsls	r3, r3, #9
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	2380      	movs	r3, #128	@ 0x80
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d116      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	4b71      	ldr	r3, [pc, #452]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x188>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e2bb      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae0:	4b6b      	ldr	r3, [pc, #428]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	22f8      	movs	r2, #248	@ 0xf8
 8001ae6:	4393      	bics	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00da      	lsls	r2, r3, #3
 8001af0:	4b67      	ldr	r3, [pc, #412]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	e041      	b.n	8001b7c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d024      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b00:	4b63      	ldr	r3, [pc, #396]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b62      	ldr	r3, [pc, #392]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001b06:	2101      	movs	r1, #1
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7fe ffb6 	bl	8000a7c <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b16:	f7fe ffb1 	bl	8000a7c <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e297      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	4b59      	ldr	r3, [pc, #356]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d0f1      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b32:	4b57      	ldr	r3, [pc, #348]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	22f8      	movs	r2, #248	@ 0xf8
 8001b38:	4393      	bics	r3, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	00da      	lsls	r2, r3, #3
 8001b42:	4b53      	ldr	r3, [pc, #332]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e018      	b.n	8001b7c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4a:	4b51      	ldr	r3, [pc, #324]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b50      	ldr	r3, [pc, #320]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001b50:	2101      	movs	r1, #1
 8001b52:	438a      	bics	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7fe ff91 	bl	8000a7c <HAL_GetTick>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b60:	f7fe ff8c 	bl	8000a7c <HAL_GetTick>
 8001b64:	0002      	movs	r2, r0
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e272      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	4b47      	ldr	r3, [pc, #284]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2202      	movs	r2, #2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d1f1      	bne.n	8001b60 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2208      	movs	r2, #8
 8001b82:	4013      	ands	r3, r2
 8001b84:	d036      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d019      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8e:	4b40      	ldr	r3, [pc, #256]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b92:	4b3f      	ldr	r3, [pc, #252]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001b94:	2101      	movs	r1, #1
 8001b96:	430a      	orrs	r2, r1
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7fe ff6f 	bl	8000a7c <HAL_GetTick>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7fe ff6a 	bl	8000a7c <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e250      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	4b36      	ldr	r3, [pc, #216]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	2202      	movs	r2, #2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d0f1      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x24c>
 8001bc0:	e018      	b.n	8001bf4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc2:	4b33      	ldr	r3, [pc, #204]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001bc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bc6:	4b32      	ldr	r3, [pc, #200]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	438a      	bics	r2, r1
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7fe ff55 	bl	8000a7c <HAL_GetTick>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7fe ff50 	bl	8000a7c <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e236      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bea:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bee:	2202      	movs	r2, #2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d1f1      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d100      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2a8>
 8001bfe:	e0b5      	b.n	8001d6c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c00:	201f      	movs	r0, #31
 8001c02:	183b      	adds	r3, r7, r0
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c08:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001c0a:	69da      	ldr	r2, [r3, #28]
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	055b      	lsls	r3, r3, #21
 8001c10:	4013      	ands	r3, r2
 8001c12:	d110      	bne.n	8001c36 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001c1a:	2180      	movs	r1, #128	@ 0x80
 8001c1c:	0549      	lsls	r1, r1, #21
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	61da      	str	r2, [r3, #28]
 8001c22:	4b1b      	ldr	r3, [pc, #108]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	2380      	movs	r3, #128	@ 0x80
 8001c28:	055b      	lsls	r3, r3, #21
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c30:	183b      	adds	r3, r7, r0
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <HAL_RCC_OscConfig+0x344>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d11a      	bne.n	8001c78 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c42:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <HAL_RCC_OscConfig+0x344>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <HAL_RCC_OscConfig+0x344>)
 8001c48:	2180      	movs	r1, #128	@ 0x80
 8001c4a:	0049      	lsls	r1, r1, #1
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c50:	f7fe ff14 	bl	8000a7c <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5a:	f7fe ff0f 	bl	8000a7c <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b64      	cmp	r3, #100	@ 0x64
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e1f5      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <HAL_RCC_OscConfig+0x344>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	@ 0x80
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4013      	ands	r3, r2
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d10f      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x348>
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001c82:	6a1a      	ldr	r2, [r3, #32]
 8001c84:	4b02      	ldr	r3, [pc, #8]	@ (8001c90 <HAL_RCC_OscConfig+0x338>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	621a      	str	r2, [r3, #32]
 8001c8c:	e036      	b.n	8001cfc <HAL_RCC_OscConfig+0x3a4>
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	40021000 	.word	0x40021000
 8001c94:	fffeffff 	.word	0xfffeffff
 8001c98:	fffbffff 	.word	0xfffbffff
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x36a>
 8001ca8:	4bca      	ldr	r3, [pc, #808]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001caa:	6a1a      	ldr	r2, [r3, #32]
 8001cac:	4bc9      	ldr	r3, [pc, #804]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	438a      	bics	r2, r1
 8001cb2:	621a      	str	r2, [r3, #32]
 8001cb4:	4bc7      	ldr	r3, [pc, #796]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001cb6:	6a1a      	ldr	r2, [r3, #32]
 8001cb8:	4bc6      	ldr	r3, [pc, #792]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001cba:	2104      	movs	r1, #4
 8001cbc:	438a      	bics	r2, r1
 8001cbe:	621a      	str	r2, [r3, #32]
 8001cc0:	e01c      	b.n	8001cfc <HAL_RCC_OscConfig+0x3a4>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x38c>
 8001cca:	4bc2      	ldr	r3, [pc, #776]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001ccc:	6a1a      	ldr	r2, [r3, #32]
 8001cce:	4bc1      	ldr	r3, [pc, #772]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001cd0:	2104      	movs	r1, #4
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	621a      	str	r2, [r3, #32]
 8001cd6:	4bbf      	ldr	r3, [pc, #764]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001cd8:	6a1a      	ldr	r2, [r3, #32]
 8001cda:	4bbe      	ldr	r3, [pc, #760]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001cdc:	2101      	movs	r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	621a      	str	r2, [r3, #32]
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0x3a4>
 8001ce4:	4bbb      	ldr	r3, [pc, #748]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001ce6:	6a1a      	ldr	r2, [r3, #32]
 8001ce8:	4bba      	ldr	r3, [pc, #744]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	438a      	bics	r2, r1
 8001cee:	621a      	str	r2, [r3, #32]
 8001cf0:	4bb8      	ldr	r3, [pc, #736]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001cf2:	6a1a      	ldr	r2, [r3, #32]
 8001cf4:	4bb7      	ldr	r3, [pc, #732]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001cf6:	2104      	movs	r1, #4
 8001cf8:	438a      	bics	r2, r1
 8001cfa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d014      	beq.n	8001d2e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7fe feba 	bl	8000a7c <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0c:	e009      	b.n	8001d22 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7fe feb5 	bl	8000a7c <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	4aaf      	ldr	r2, [pc, #700]	@ (8001fd8 <HAL_RCC_OscConfig+0x680>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e19a      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d22:	4bac      	ldr	r3, [pc, #688]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	2202      	movs	r2, #2
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x3b6>
 8001d2c:	e013      	b.n	8001d56 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2e:	f7fe fea5 	bl	8000a7c <HAL_GetTick>
 8001d32:	0003      	movs	r3, r0
 8001d34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d36:	e009      	b.n	8001d4c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d38:	f7fe fea0 	bl	8000a7c <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	4aa5      	ldr	r2, [pc, #660]	@ (8001fd8 <HAL_RCC_OscConfig+0x680>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e185      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4c:	4ba1      	ldr	r3, [pc, #644]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	2202      	movs	r2, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d56:	231f      	movs	r3, #31
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d105      	bne.n	8001d6c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d60:	4b9c      	ldr	r3, [pc, #624]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	4b9b      	ldr	r3, [pc, #620]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001d66:	499d      	ldr	r1, [pc, #628]	@ (8001fdc <HAL_RCC_OscConfig+0x684>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2210      	movs	r2, #16
 8001d72:	4013      	ands	r3, r2
 8001d74:	d063      	beq.n	8001e3e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d12a      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d7e:	4b95      	ldr	r3, [pc, #596]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001d80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d82:	4b94      	ldr	r3, [pc, #592]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001d84:	2104      	movs	r1, #4
 8001d86:	430a      	orrs	r2, r1
 8001d88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d8a:	4b92      	ldr	r3, [pc, #584]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d8e:	4b91      	ldr	r3, [pc, #580]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001d90:	2101      	movs	r1, #1
 8001d92:	430a      	orrs	r2, r1
 8001d94:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7fe fe71 	bl	8000a7c <HAL_GetTick>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001da0:	f7fe fe6c 	bl	8000a7c <HAL_GetTick>
 8001da4:	0002      	movs	r2, r0
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e152      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001db2:	4b88      	ldr	r3, [pc, #544]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db6:	2202      	movs	r2, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	d0f1      	beq.n	8001da0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dbc:	4b85      	ldr	r3, [pc, #532]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dc0:	22f8      	movs	r2, #248	@ 0xf8
 8001dc2:	4393      	bics	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	00da      	lsls	r2, r3, #3
 8001dcc:	4b81      	ldr	r3, [pc, #516]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dd2:	e034      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	3305      	adds	r3, #5
 8001dda:	d111      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ddc:	4b7d      	ldr	r3, [pc, #500]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001dde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001de0:	4b7c      	ldr	r3, [pc, #496]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001de2:	2104      	movs	r1, #4
 8001de4:	438a      	bics	r2, r1
 8001de6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001de8:	4b7a      	ldr	r3, [pc, #488]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dec:	22f8      	movs	r2, #248	@ 0xf8
 8001dee:	4393      	bics	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	00da      	lsls	r2, r3, #3
 8001df8:	4b76      	ldr	r3, [pc, #472]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dfe:	e01e      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e00:	4b74      	ldr	r3, [pc, #464]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001e02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e04:	4b73      	ldr	r3, [pc, #460]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001e06:	2104      	movs	r1, #4
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e0c:	4b71      	ldr	r3, [pc, #452]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001e0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e10:	4b70      	ldr	r3, [pc, #448]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001e12:	2101      	movs	r1, #1
 8001e14:	438a      	bics	r2, r1
 8001e16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7fe fe30 	bl	8000a7c <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e22:	f7fe fe2b 	bl	8000a7c <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e111      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e34:	4b67      	ldr	r3, [pc, #412]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e38:	2202      	movs	r2, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d1f1      	bne.n	8001e22 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2220      	movs	r2, #32
 8001e44:	4013      	ands	r3, r2
 8001e46:	d05c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e48:	4b62      	ldr	r3, [pc, #392]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	220c      	movs	r2, #12
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b0c      	cmp	r3, #12
 8001e52:	d00e      	beq.n	8001e72 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e54:	4b5f      	ldr	r3, [pc, #380]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	220c      	movs	r2, #12
 8001e5a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d114      	bne.n	8001e8a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e60:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	23c0      	movs	r3, #192	@ 0xc0
 8001e66:	025b      	lsls	r3, r3, #9
 8001e68:	401a      	ands	r2, r3
 8001e6a:	23c0      	movs	r3, #192	@ 0xc0
 8001e6c:	025b      	lsls	r3, r3, #9
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d10b      	bne.n	8001e8a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001e72:	4b58      	ldr	r3, [pc, #352]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e76:	2380      	movs	r3, #128	@ 0x80
 8001e78:	029b      	lsls	r3, r3, #10
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d040      	beq.n	8001f00 <HAL_RCC_OscConfig+0x5a8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d03c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e0e6      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01b      	beq.n	8001eca <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e92:	4b50      	ldr	r3, [pc, #320]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001e94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e96:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001e98:	2180      	movs	r1, #128	@ 0x80
 8001e9a:	0249      	lsls	r1, r1, #9
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fdec 	bl	8000a7c <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eaa:	f7fe fde7 	bl	8000a7c <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e0cd      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ebc:	4b45      	ldr	r3, [pc, #276]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001ebe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	029b      	lsls	r3, r3, #10
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x552>
 8001ec8:	e01b      	b.n	8001f02 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001eca:	4b42      	ldr	r3, [pc, #264]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ece:	4b41      	ldr	r3, [pc, #260]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001ed0:	4943      	ldr	r1, [pc, #268]	@ (8001fe0 <HAL_RCC_OscConfig+0x688>)
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7fe fdd1 	bl	8000a7c <HAL_GetTick>
 8001eda:	0003      	movs	r3, r0
 8001edc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ee0:	f7fe fdcc 	bl	8000a7c <HAL_GetTick>
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0b2      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ef2:	4b38      	ldr	r3, [pc, #224]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ef6:	2380      	movs	r3, #128	@ 0x80
 8001ef8:	029b      	lsls	r3, r3, #10
 8001efa:	4013      	ands	r3, r2
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x588>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f00:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d100      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5b4>
 8001f0a:	e0a4      	b.n	8002056 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0c:	4b31      	ldr	r3, [pc, #196]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	220c      	movs	r2, #12
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d100      	bne.n	8001f1a <HAL_RCC_OscConfig+0x5c2>
 8001f18:	e078      	b.n	800200c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d14c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001f28:	492e      	ldr	r1, [pc, #184]	@ (8001fe4 <HAL_RCC_OscConfig+0x68c>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7fe fda5 	bl	8000a7c <HAL_GetTick>
 8001f32:	0003      	movs	r3, r0
 8001f34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f38:	f7fe fda0 	bl	8000a7c <HAL_GetTick>
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e086      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4a:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	2380      	movs	r3, #128	@ 0x80
 8001f50:	049b      	lsls	r3, r3, #18
 8001f52:	4013      	ands	r3, r2
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f56:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	4393      	bics	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f64:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001f66:	430a      	orrs	r2, r1
 8001f68:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe8 <HAL_RCC_OscConfig+0x690>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	0019      	movs	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001f80:	430a      	orrs	r2, r1
 8001f82:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001f8a:	2180      	movs	r1, #128	@ 0x80
 8001f8c:	0449      	lsls	r1, r1, #17
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7fe fd73 	bl	8000a7c <HAL_GetTick>
 8001f96:	0003      	movs	r3, r0
 8001f98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7fe fd6e 	bl	8000a7c <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e054      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	2380      	movs	r3, #128	@ 0x80
 8001fb4:	049b      	lsls	r3, r3, #18
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x644>
 8001fba:	e04c      	b.n	8002056 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <HAL_RCC_OscConfig+0x67c>)
 8001fc2:	4908      	ldr	r1, [pc, #32]	@ (8001fe4 <HAL_RCC_OscConfig+0x68c>)
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fd58 	bl	8000a7c <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x6a6>
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	00001388 	.word	0x00001388
 8001fdc:	efffffff 	.word	0xefffffff
 8001fe0:	fffeffff 	.word	0xfffeffff
 8001fe4:	feffffff 	.word	0xfeffffff
 8001fe8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe fd46 	bl	8000a7c <HAL_GetTick>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e02c      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffe:	4b18      	ldr	r3, [pc, #96]	@ (8002060 <HAL_RCC_OscConfig+0x708>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	@ 0x80
 8002004:	049b      	lsls	r3, r3, #18
 8002006:	4013      	ands	r3, r2
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x694>
 800200a:	e024      	b.n	8002056 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e01f      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <HAL_RCC_OscConfig+0x708>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <HAL_RCC_OscConfig+0x708>)
 8002020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002022:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	23c0      	movs	r3, #192	@ 0xc0
 8002028:	025b      	lsls	r3, r3, #9
 800202a:	401a      	ands	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	429a      	cmp	r2, r3
 8002032:	d10e      	bne.n	8002052 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	220f      	movs	r2, #15
 8002038:	401a      	ands	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d107      	bne.n	8002052 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	23f0      	movs	r3, #240	@ 0xf0
 8002046:	039b      	lsls	r3, r3, #14
 8002048:	401a      	ands	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d001      	beq.n	8002056 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b008      	add	sp, #32
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000

08002064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0bf      	b.n	80021f8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002078:	4b61      	ldr	r3, [pc, #388]	@ (8002200 <HAL_RCC_ClockConfig+0x19c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2201      	movs	r2, #1
 800207e:	4013      	ands	r3, r2
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d911      	bls.n	80020aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b5e      	ldr	r3, [pc, #376]	@ (8002200 <HAL_RCC_ClockConfig+0x19c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2201      	movs	r2, #1
 800208c:	4393      	bics	r3, r2
 800208e:	0019      	movs	r1, r3
 8002090:	4b5b      	ldr	r3, [pc, #364]	@ (8002200 <HAL_RCC_ClockConfig+0x19c>)
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002098:	4b59      	ldr	r3, [pc, #356]	@ (8002200 <HAL_RCC_ClockConfig+0x19c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2201      	movs	r2, #1
 800209e:	4013      	ands	r3, r2
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0a6      	b.n	80021f8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d015      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2204      	movs	r2, #4
 80020ba:	4013      	ands	r3, r2
 80020bc:	d006      	beq.n	80020cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020be:	4b51      	ldr	r3, [pc, #324]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4b50      	ldr	r3, [pc, #320]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 80020c4:	21e0      	movs	r1, #224	@ 0xe0
 80020c6:	00c9      	lsls	r1, r1, #3
 80020c8:	430a      	orrs	r2, r1
 80020ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	22f0      	movs	r2, #240	@ 0xf0
 80020d2:	4393      	bics	r3, r2
 80020d4:	0019      	movs	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	4b4a      	ldr	r3, [pc, #296]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 80020dc:	430a      	orrs	r2, r1
 80020de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2201      	movs	r2, #1
 80020e6:	4013      	ands	r3, r2
 80020e8:	d04c      	beq.n	8002184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4b44      	ldr	r3, [pc, #272]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	@ 0x80
 80020f8:	029b      	lsls	r3, r3, #10
 80020fa:	4013      	ands	r3, r2
 80020fc:	d120      	bne.n	8002140 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e07a      	b.n	80021f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	4b3e      	ldr	r3, [pc, #248]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	@ 0x80
 8002110:	049b      	lsls	r3, r3, #18
 8002112:	4013      	ands	r3, r2
 8002114:	d114      	bne.n	8002140 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06e      	b.n	80021f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002122:	4b38      	ldr	r3, [pc, #224]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 8002124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002126:	2380      	movs	r3, #128	@ 0x80
 8002128:	029b      	lsls	r3, r3, #10
 800212a:	4013      	ands	r3, r2
 800212c:	d108      	bne.n	8002140 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e062      	b.n	80021f8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002132:	4b34      	ldr	r3, [pc, #208]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2202      	movs	r2, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e05b      	b.n	80021f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002140:	4b30      	ldr	r3, [pc, #192]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2203      	movs	r2, #3
 8002146:	4393      	bics	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4b2d      	ldr	r3, [pc, #180]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 8002150:	430a      	orrs	r2, r1
 8002152:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002154:	f7fe fc92 	bl	8000a7c <HAL_GetTick>
 8002158:	0003      	movs	r3, r0
 800215a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215c:	e009      	b.n	8002172 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215e:	f7fe fc8d 	bl	8000a7c <HAL_GetTick>
 8002162:	0002      	movs	r2, r0
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	4a27      	ldr	r2, [pc, #156]	@ (8002208 <HAL_RCC_ClockConfig+0x1a4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e042      	b.n	80021f8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	4b24      	ldr	r3, [pc, #144]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	220c      	movs	r2, #12
 8002178:	401a      	ands	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	429a      	cmp	r2, r3
 8002182:	d1ec      	bne.n	800215e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002184:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <HAL_RCC_ClockConfig+0x19c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2201      	movs	r2, #1
 800218a:	4013      	ands	r3, r2
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d211      	bcs.n	80021b6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_RCC_ClockConfig+0x19c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2201      	movs	r2, #1
 8002198:	4393      	bics	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	4b18      	ldr	r3, [pc, #96]	@ (8002200 <HAL_RCC_ClockConfig+0x19c>)
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a4:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <HAL_RCC_ClockConfig+0x19c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2201      	movs	r2, #1
 80021aa:	4013      	ands	r3, r2
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e020      	b.n	80021f8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2204      	movs	r2, #4
 80021bc:	4013      	ands	r3, r2
 80021be:	d009      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021c0:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a11      	ldr	r2, [pc, #68]	@ (800220c <HAL_RCC_ClockConfig+0x1a8>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021d4:	f000 f820 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021d8:	0001      	movs	r1, r0
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <HAL_RCC_ClockConfig+0x1a0>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	220f      	movs	r2, #15
 80021e2:	4013      	ands	r3, r2
 80021e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002210 <HAL_RCC_ClockConfig+0x1ac>)
 80021e6:	5cd3      	ldrb	r3, [r2, r3]
 80021e8:	000a      	movs	r2, r1
 80021ea:	40da      	lsrs	r2, r3
 80021ec:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_RCC_ClockConfig+0x1b0>)
 80021ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f7fe fbfd 	bl	80009f0 <HAL_InitTick>
  
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b004      	add	sp, #16
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40022000 	.word	0x40022000
 8002204:	40021000 	.word	0x40021000
 8002208:	00001388 	.word	0x00001388
 800220c:	fffff8ff 	.word	0xfffff8ff
 8002210:	080034ec 	.word	0x080034ec
 8002214:	20000000 	.word	0x20000000

08002218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002232:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	220c      	movs	r2, #12
 800223c:	4013      	ands	r3, r2
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d046      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0xb8>
 8002242:	d848      	bhi.n	80022d6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002244:	2b04      	cmp	r3, #4
 8002246:	d002      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x36>
 8002248:	2b08      	cmp	r3, #8
 800224a:	d003      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x3c>
 800224c:	e043      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800224e:	4b27      	ldr	r3, [pc, #156]	@ (80022ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8002250:	613b      	str	r3, [r7, #16]
      break;
 8002252:	e043      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	0c9b      	lsrs	r3, r3, #18
 8002258:	220f      	movs	r2, #15
 800225a:	4013      	ands	r3, r2
 800225c:	4a24      	ldr	r2, [pc, #144]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800225e:	5cd3      	ldrb	r3, [r2, r3]
 8002260:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002262:	4b21      	ldr	r3, [pc, #132]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002266:	220f      	movs	r2, #15
 8002268:	4013      	ands	r3, r2
 800226a:	4a22      	ldr	r2, [pc, #136]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800226c:	5cd3      	ldrb	r3, [r2, r3]
 800226e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	23c0      	movs	r3, #192	@ 0xc0
 8002274:	025b      	lsls	r3, r3, #9
 8002276:	401a      	ands	r2, r3
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	025b      	lsls	r3, r3, #9
 800227c:	429a      	cmp	r2, r3
 800227e:	d109      	bne.n	8002294 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	481a      	ldr	r0, [pc, #104]	@ (80022ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8002284:	f7fd ff40 	bl	8000108 <__udivsi3>
 8002288:	0003      	movs	r3, r0
 800228a:	001a      	movs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4353      	muls	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	e01a      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	23c0      	movs	r3, #192	@ 0xc0
 8002298:	025b      	lsls	r3, r3, #9
 800229a:	401a      	ands	r2, r3
 800229c:	23c0      	movs	r3, #192	@ 0xc0
 800229e:	025b      	lsls	r3, r3, #9
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d109      	bne.n	80022b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	4814      	ldr	r0, [pc, #80]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80022a8:	f7fd ff2e 	bl	8000108 <__udivsi3>
 80022ac:	0003      	movs	r3, r0
 80022ae:	001a      	movs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4353      	muls	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e008      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	480c      	ldr	r0, [pc, #48]	@ (80022ec <HAL_RCC_GetSysClockFreq+0xd4>)
 80022bc:	f7fd ff24 	bl	8000108 <__udivsi3>
 80022c0:	0003      	movs	r3, r0
 80022c2:	001a      	movs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4353      	muls	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	613b      	str	r3, [r7, #16]
      break;
 80022ce:	e005      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80022d0:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80022d2:	613b      	str	r3, [r7, #16]
      break;
 80022d4:	e002      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022d6:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <HAL_RCC_GetSysClockFreq+0xd4>)
 80022d8:	613b      	str	r3, [r7, #16]
      break;
 80022da:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022dc:	693b      	ldr	r3, [r7, #16]
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b006      	add	sp, #24
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	40021000 	.word	0x40021000
 80022ec:	007a1200 	.word	0x007a1200
 80022f0:	080034fc 	.word	0x080034fc
 80022f4:	0800350c 	.word	0x0800350c
 80022f8:	02dc6c00 	.word	0x02dc6c00

080022fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	025b      	lsls	r3, r3, #9
 8002314:	4013      	ands	r3, r2
 8002316:	d100      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002318:	e08e      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800231a:	2017      	movs	r0, #23
 800231c:	183b      	adds	r3, r7, r0
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b6e      	ldr	r3, [pc, #440]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	055b      	lsls	r3, r3, #21
 800232a:	4013      	ands	r3, r2
 800232c:	d110      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b6b      	ldr	r3, [pc, #428]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	4b6a      	ldr	r3, [pc, #424]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002334:	2180      	movs	r1, #128	@ 0x80
 8002336:	0549      	lsls	r1, r1, #21
 8002338:	430a      	orrs	r2, r1
 800233a:	61da      	str	r2, [r3, #28]
 800233c:	4b67      	ldr	r3, [pc, #412]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	055b      	lsls	r3, r3, #21
 8002344:	4013      	ands	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234a:	183b      	adds	r3, r7, r0
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	4b63      	ldr	r3, [pc, #396]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2380      	movs	r3, #128	@ 0x80
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4013      	ands	r3, r2
 800235a:	d11a      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235c:	4b60      	ldr	r3, [pc, #384]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b5f      	ldr	r3, [pc, #380]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002362:	2180      	movs	r1, #128	@ 0x80
 8002364:	0049      	lsls	r1, r1, #1
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236a:	f7fe fb87 	bl	8000a7c <HAL_GetTick>
 800236e:	0003      	movs	r3, r0
 8002370:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	e008      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002374:	f7fe fb82 	bl	8000a7c <HAL_GetTick>
 8002378:	0002      	movs	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	@ 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0a6      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4b56      	ldr	r3, [pc, #344]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	2380      	movs	r3, #128	@ 0x80
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4013      	ands	r3, r2
 8002390:	d0f0      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002392:	4b52      	ldr	r3, [pc, #328]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	23c0      	movs	r3, #192	@ 0xc0
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4013      	ands	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d034      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	23c0      	movs	r3, #192	@ 0xc0
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4013      	ands	r3, r2
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d02c      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023b4:	4b49      	ldr	r3, [pc, #292]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a4a      	ldr	r2, [pc, #296]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023be:	4b47      	ldr	r3, [pc, #284]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	4b46      	ldr	r3, [pc, #280]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023c4:	2180      	movs	r1, #128	@ 0x80
 80023c6:	0249      	lsls	r1, r1, #9
 80023c8:	430a      	orrs	r2, r1
 80023ca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023cc:	4b43      	ldr	r3, [pc, #268]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023ce:	6a1a      	ldr	r2, [r3, #32]
 80023d0:	4b42      	ldr	r3, [pc, #264]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023d2:	4945      	ldr	r1, [pc, #276]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80023d4:	400a      	ands	r2, r1
 80023d6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023d8:	4b40      	ldr	r3, [pc, #256]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7fe fb49 	bl	8000a7c <HAL_GetTick>
 80023ea:	0003      	movs	r3, r0
 80023ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ee:	e009      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f0:	f7fe fb44 	bl	8000a7c <HAL_GetTick>
 80023f4:	0002      	movs	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	4a3c      	ldr	r2, [pc, #240]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e067      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002404:	4b35      	ldr	r3, [pc, #212]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	2202      	movs	r2, #2
 800240a:	4013      	ands	r3, r2
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800240e:	4b33      	ldr	r3, [pc, #204]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a34      	ldr	r2, [pc, #208]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002414:	4013      	ands	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	4b2f      	ldr	r3, [pc, #188]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800241e:	430a      	orrs	r2, r1
 8002420:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002422:	2317      	movs	r3, #23
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d105      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242c:	4b2b      	ldr	r3, [pc, #172]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	4b2a      	ldr	r3, [pc, #168]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002432:	492f      	ldr	r1, [pc, #188]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002434:	400a      	ands	r2, r1
 8002436:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2201      	movs	r2, #1
 800243e:	4013      	ands	r3, r2
 8002440:	d009      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002442:	4b26      	ldr	r3, [pc, #152]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	2203      	movs	r2, #3
 8002448:	4393      	bics	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	4b22      	ldr	r3, [pc, #136]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002452:	430a      	orrs	r2, r1
 8002454:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2202      	movs	r2, #2
 800245c:	4013      	ands	r3, r2
 800245e:	d009      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002460:	4b1e      	ldr	r3, [pc, #120]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002464:	4a23      	ldr	r2, [pc, #140]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002466:	4013      	ands	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002470:	430a      	orrs	r2, r1
 8002472:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2220      	movs	r2, #32
 800247a:	4013      	ands	r3, r2
 800247c:	d009      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800247e:	4b17      	ldr	r3, [pc, #92]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	2210      	movs	r2, #16
 8002484:	4393      	bics	r3, r2
 8002486:	0019      	movs	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800248e:	430a      	orrs	r2, r1
 8002490:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	029b      	lsls	r3, r3, #10
 800249a:	4013      	ands	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800249e:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	2280      	movs	r2, #128	@ 0x80
 80024a4:	4393      	bics	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699a      	ldr	r2, [r3, #24]
 80024ac:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	2380      	movs	r3, #128	@ 0x80
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4013      	ands	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024be:	4b07      	ldr	r3, [pc, #28]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	2240      	movs	r2, #64	@ 0x40
 80024c4:	4393      	bics	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	4b03      	ldr	r3, [pc, #12]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024ce:	430a      	orrs	r2, r1
 80024d0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b006      	add	sp, #24
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40007000 	.word	0x40007000
 80024e4:	fffffcff 	.word	0xfffffcff
 80024e8:	fffeffff 	.word	0xfffeffff
 80024ec:	00001388 	.word	0x00001388
 80024f0:	efffffff 	.word	0xefffffff
 80024f4:	fffcffff 	.word	0xfffcffff

080024f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0a8      	b.n	800265c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	2382      	movs	r3, #130	@ 0x82
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	429a      	cmp	r2, r3
 800251c:	d009      	beq.n	8002532 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	61da      	str	r2, [r3, #28]
 8002524:	e005      	b.n	8002532 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	225d      	movs	r2, #93	@ 0x5d
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	225c      	movs	r2, #92	@ 0x5c
 8002548:	2100      	movs	r1, #0
 800254a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	0018      	movs	r0, r3
 8002550:	f7fe f96e 	bl	8000830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	225d      	movs	r2, #93	@ 0x5d
 8002558:	2102      	movs	r1, #2
 800255a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2140      	movs	r1, #64	@ 0x40
 8002568:	438a      	bics	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	23e0      	movs	r3, #224	@ 0xe0
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	429a      	cmp	r2, r3
 8002576:	d902      	bls.n	800257e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e002      	b.n	8002584 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	015b      	lsls	r3, r3, #5
 8002582:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	23f0      	movs	r3, #240	@ 0xf0
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	429a      	cmp	r2, r3
 800258e:	d008      	beq.n	80025a2 <HAL_SPI_Init+0xaa>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	23e0      	movs	r3, #224	@ 0xe0
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	429a      	cmp	r2, r3
 800259a:	d002      	beq.n	80025a2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	2382      	movs	r3, #130	@ 0x82
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	401a      	ands	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6899      	ldr	r1, [r3, #8]
 80025b0:	2384      	movs	r3, #132	@ 0x84
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	400b      	ands	r3, r1
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2102      	movs	r1, #2
 80025be:	400b      	ands	r3, r1
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	2101      	movs	r1, #1
 80025c8:	400b      	ands	r3, r1
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6999      	ldr	r1, [r3, #24]
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	400b      	ands	r3, r1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	2138      	movs	r1, #56	@ 0x38
 80025de:	400b      	ands	r3, r1
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	2180      	movs	r1, #128	@ 0x80
 80025e8:	400b      	ands	r3, r1
 80025ea:	431a      	orrs	r2, r3
 80025ec:	0011      	movs	r1, r2
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025f2:	2380      	movs	r3, #128	@ 0x80
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	401a      	ands	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	2204      	movs	r2, #4
 8002608:	401a      	ands	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260e:	2110      	movs	r1, #16
 8002610:	400b      	ands	r3, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002618:	2108      	movs	r1, #8
 800261a:	400b      	ands	r3, r1
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68d9      	ldr	r1, [r3, #12]
 8002622:	23f0      	movs	r3, #240	@ 0xf0
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	400b      	ands	r3, r1
 8002628:	431a      	orrs	r2, r3
 800262a:	0011      	movs	r1, r2
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	015b      	lsls	r3, r3, #5
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4907      	ldr	r1, [pc, #28]	@ (8002664 <HAL_SPI_Init+0x16c>)
 8002648:	400a      	ands	r2, r1
 800264a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	225d      	movs	r2, #93	@ 0x5d
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b004      	add	sp, #16
 8002662:	bd80      	pop	{r7, pc}
 8002664:	fffff7ff 	.word	0xfffff7ff

08002668 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	1dbb      	adds	r3, r7, #6
 8002676:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002678:	231f      	movs	r3, #31
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	225c      	movs	r2, #92	@ 0x5c
 8002684:	5c9b      	ldrb	r3, [r3, r2]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_SPI_Transmit+0x26>
 800268a:	2302      	movs	r3, #2
 800268c:	e147      	b.n	800291e <HAL_SPI_Transmit+0x2b6>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	225c      	movs	r2, #92	@ 0x5c
 8002692:	2101      	movs	r1, #1
 8002694:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002696:	f7fe f9f1 	bl	8000a7c <HAL_GetTick>
 800269a:	0003      	movs	r3, r0
 800269c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800269e:	2316      	movs	r3, #22
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	1dba      	adds	r2, r7, #6
 80026a4:	8812      	ldrh	r2, [r2, #0]
 80026a6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	225d      	movs	r2, #93	@ 0x5d
 80026ac:	5c9b      	ldrb	r3, [r3, r2]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d004      	beq.n	80026be <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80026b4:	231f      	movs	r3, #31
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	2202      	movs	r2, #2
 80026ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80026bc:	e128      	b.n	8002910 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_SPI_Transmit+0x64>
 80026c4:	1dbb      	adds	r3, r7, #6
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d104      	bne.n	80026d6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80026cc:	231f      	movs	r3, #31
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80026d4:	e11c      	b.n	8002910 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	225d      	movs	r2, #93	@ 0x5d
 80026da:	2103      	movs	r1, #3
 80026dc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1dba      	adds	r2, r7, #6
 80026ee:	8812      	ldrh	r2, [r2, #0]
 80026f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1dba      	adds	r2, r7, #6
 80026f6:	8812      	ldrh	r2, [r2, #0]
 80026f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2244      	movs	r2, #68	@ 0x44
 8002704:	2100      	movs	r1, #0
 8002706:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2246      	movs	r2, #70	@ 0x46
 800270c:	2100      	movs	r1, #0
 800270e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	2380      	movs	r3, #128	@ 0x80
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	429a      	cmp	r2, r3
 8002726:	d110      	bne.n	800274a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2140      	movs	r1, #64	@ 0x40
 8002734:	438a      	bics	r2, r1
 8002736:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2180      	movs	r1, #128	@ 0x80
 8002744:	01c9      	lsls	r1, r1, #7
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2240      	movs	r2, #64	@ 0x40
 8002752:	4013      	ands	r3, r2
 8002754:	2b40      	cmp	r3, #64	@ 0x40
 8002756:	d007      	beq.n	8002768 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2140      	movs	r1, #64	@ 0x40
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	23e0      	movs	r3, #224	@ 0xe0
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	429a      	cmp	r2, r3
 8002772:	d952      	bls.n	800281a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_SPI_Transmit+0x11e>
 800277c:	2316      	movs	r3, #22
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d143      	bne.n	800280e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278a:	881a      	ldrh	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002796:	1c9a      	adds	r2, r3, #2
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027aa:	e030      	b.n	800280e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2202      	movs	r2, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d112      	bne.n	80027e0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027be:	881a      	ldrh	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ca:	1c9a      	adds	r2, r3, #2
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027de:	e016      	b.n	800280e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027e0:	f7fe f94c 	bl	8000a7c <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d802      	bhi.n	80027f6 <HAL_SPI_Transmit+0x18e>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	d102      	bne.n	80027fc <HAL_SPI_Transmit+0x194>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d108      	bne.n	800280e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80027fc:	231f      	movs	r3, #31
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	2203      	movs	r2, #3
 8002802:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	225d      	movs	r2, #93	@ 0x5d
 8002808:	2101      	movs	r1, #1
 800280a:	5499      	strb	r1, [r3, r2]
          goto error;
 800280c:	e080      	b.n	8002910 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1c9      	bne.n	80027ac <HAL_SPI_Transmit+0x144>
 8002818:	e053      	b.n	80028c2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_SPI_Transmit+0x1c4>
 8002822:	2316      	movs	r3, #22
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d145      	bne.n	80028b8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	330c      	adds	r3, #12
 8002836:	7812      	ldrb	r2, [r2, #0]
 8002838:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002852:	e031      	b.n	80028b8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2202      	movs	r2, #2
 800285c:	4013      	ands	r3, r2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d113      	bne.n	800288a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330c      	adds	r3, #12
 800286c:	7812      	ldrb	r2, [r2, #0]
 800286e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002888:	e016      	b.n	80028b8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800288a:	f7fe f8f7 	bl	8000a7c <HAL_GetTick>
 800288e:	0002      	movs	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d802      	bhi.n	80028a0 <HAL_SPI_Transmit+0x238>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	d102      	bne.n	80028a6 <HAL_SPI_Transmit+0x23e>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80028a6:	231f      	movs	r3, #31
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2203      	movs	r2, #3
 80028ac:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	225d      	movs	r2, #93	@ 0x5d
 80028b2:	2101      	movs	r1, #1
 80028b4:	5499      	strb	r1, [r3, r2]
          goto error;
 80028b6:	e02b      	b.n	8002910 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1c8      	bne.n	8002854 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f000 f95d 	bl	8002b88 <SPI_EndRxTxTransaction>
 80028ce:	1e03      	subs	r3, r0, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80028fe:	231f      	movs	r3, #31
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e003      	b.n	8002910 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	225d      	movs	r2, #93	@ 0x5d
 800290c:	2101      	movs	r1, #1
 800290e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	225c      	movs	r2, #92	@ 0x5c
 8002914:	2100      	movs	r1, #0
 8002916:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002918:	231f      	movs	r3, #31
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	781b      	ldrb	r3, [r3, #0]
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b008      	add	sp, #32
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	1dfb      	adds	r3, r7, #7
 8002936:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002938:	f7fe f8a0 	bl	8000a7c <HAL_GetTick>
 800293c:	0002      	movs	r2, r0
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	18d3      	adds	r3, r2, r3
 8002946:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002948:	f7fe f898 	bl	8000a7c <HAL_GetTick>
 800294c:	0003      	movs	r3, r0
 800294e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002950:	4b3a      	ldr	r3, [pc, #232]	@ (8002a3c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	015b      	lsls	r3, r3, #5
 8002956:	0d1b      	lsrs	r3, r3, #20
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	4353      	muls	r3, r2
 800295c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800295e:	e058      	b.n	8002a12 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	d055      	beq.n	8002a12 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002966:	f7fe f889 	bl	8000a7c <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	429a      	cmp	r2, r3
 8002974:	d902      	bls.n	800297c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d142      	bne.n	8002a02 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	21e0      	movs	r1, #224	@ 0xe0
 8002988:	438a      	bics	r2, r1
 800298a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	2382      	movs	r3, #130	@ 0x82
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	429a      	cmp	r2, r3
 8002996:	d113      	bne.n	80029c0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d005      	beq.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d107      	bne.n	80029c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2140      	movs	r1, #64	@ 0x40
 80029bc:	438a      	bics	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c4:	2380      	movs	r3, #128	@ 0x80
 80029c6:	019b      	lsls	r3, r3, #6
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d110      	bne.n	80029ee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	491a      	ldr	r1, [pc, #104]	@ (8002a40 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80029d8:	400a      	ands	r2, r1
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2180      	movs	r1, #128	@ 0x80
 80029e8:	0189      	lsls	r1, r1, #6
 80029ea:	430a      	orrs	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	225d      	movs	r2, #93	@ 0x5d
 80029f2:	2101      	movs	r1, #1
 80029f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	225c      	movs	r2, #92	@ 0x5c
 80029fa:	2100      	movs	r1, #0
 80029fc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e017      	b.n	8002a32 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	425a      	negs	r2, r3
 8002a22:	4153      	adcs	r3, r2
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	001a      	movs	r2, r3
 8002a28:	1dfb      	adds	r3, r7, #7
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d197      	bne.n	8002960 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b008      	add	sp, #32
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	ffffdfff 	.word	0xffffdfff

08002a44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	@ 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002a52:	2317      	movs	r3, #23
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002a5a:	f7fe f80f 	bl	8000a7c <HAL_GetTick>
 8002a5e:	0002      	movs	r2, r0
 8002a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	18d3      	adds	r3, r2, r3
 8002a68:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002a6a:	f7fe f807 	bl	8000a7c <HAL_GetTick>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	330c      	adds	r3, #12
 8002a78:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002a7a:	4b41      	ldr	r3, [pc, #260]	@ (8002b80 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	0013      	movs	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	189b      	adds	r3, r3, r2
 8002a84:	00da      	lsls	r2, r3, #3
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	0d1b      	lsrs	r3, r3, #20
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8c:	4353      	muls	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002a90:	e068      	b.n	8002b64 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	23c0      	movs	r3, #192	@ 0xc0
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d10a      	bne.n	8002ab2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	2117      	movs	r1, #23
 8002aaa:	187b      	adds	r3, r7, r1
 8002aac:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002aae:	187b      	adds	r3, r7, r1
 8002ab0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	d055      	beq.n	8002b64 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ab8:	f7fd ffe0 	bl	8000a7c <HAL_GetTick>
 8002abc:	0002      	movs	r2, r0
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d902      	bls.n	8002ace <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d142      	bne.n	8002b54 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	21e0      	movs	r1, #224	@ 0xe0
 8002ada:	438a      	bics	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	2382      	movs	r3, #130	@ 0x82
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d113      	bne.n	8002b12 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	2380      	movs	r3, #128	@ 0x80
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d005      	beq.n	8002b02 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	2380      	movs	r3, #128	@ 0x80
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d107      	bne.n	8002b12 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2140      	movs	r1, #64	@ 0x40
 8002b0e:	438a      	bics	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b16:	2380      	movs	r3, #128	@ 0x80
 8002b18:	019b      	lsls	r3, r3, #6
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d110      	bne.n	8002b40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4916      	ldr	r1, [pc, #88]	@ (8002b84 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2180      	movs	r1, #128	@ 0x80
 8002b3a:	0189      	lsls	r1, r1, #6
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	225d      	movs	r2, #93	@ 0x5d
 8002b44:	2101      	movs	r1, #1
 8002b46:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	225c      	movs	r2, #92	@ 0x5c
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e010      	b.n	8002b76 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d18e      	bne.n	8002a92 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b00a      	add	sp, #40	@ 0x28
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	20000000 	.word	0x20000000
 8002b84:	ffffdfff 	.word	0xffffdfff

08002b88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	23c0      	movs	r3, #192	@ 0xc0
 8002b98:	0159      	lsls	r1, r3, #5
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	0013      	movs	r3, r2
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f7ff ff4e 	bl	8002a44 <SPI_WaitFifoStateUntilTimeout>
 8002ba8:	1e03      	subs	r3, r0, #0
 8002baa:	d007      	beq.n	8002bbc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e027      	b.n	8002c0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	0013      	movs	r3, r2
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2180      	movs	r1, #128	@ 0x80
 8002bca:	f7ff fead 	bl	8002928 <SPI_WaitFlagStateUntilTimeout>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d007      	beq.n	8002be2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e014      	b.n	8002c0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	23c0      	movs	r3, #192	@ 0xc0
 8002be6:	00d9      	lsls	r1, r3, #3
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	0013      	movs	r3, r2
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f7ff ff27 	bl	8002a44 <SPI_WaitFifoStateUntilTimeout>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d007      	beq.n	8002c0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfe:	2220      	movs	r2, #32
 8002c00:	431a      	orrs	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e000      	b.n	8002c0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b004      	add	sp, #16
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e042      	b.n	8002cac <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	223d      	movs	r2, #61	@ 0x3d
 8002c2a:	5c9b      	ldrb	r3, [r3, r2]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d107      	bne.n	8002c42 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	223c      	movs	r2, #60	@ 0x3c
 8002c36:	2100      	movs	r1, #0
 8002c38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7fd fe45 	bl	80008cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223d      	movs	r2, #61	@ 0x3d
 8002c46:	2102      	movs	r1, #2
 8002c48:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3304      	adds	r3, #4
 8002c52:	0019      	movs	r1, r3
 8002c54:	0010      	movs	r0, r2
 8002c56:	f000 fa89 	bl	800316c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2246      	movs	r2, #70	@ 0x46
 8002c5e:	2101      	movs	r1, #1
 8002c60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	223e      	movs	r2, #62	@ 0x3e
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	223f      	movs	r2, #63	@ 0x3f
 8002c6e:	2101      	movs	r1, #1
 8002c70:	5499      	strb	r1, [r3, r2]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2240      	movs	r2, #64	@ 0x40
 8002c76:	2101      	movs	r1, #1
 8002c78:	5499      	strb	r1, [r3, r2]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2241      	movs	r2, #65	@ 0x41
 8002c7e:	2101      	movs	r1, #1
 8002c80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2242      	movs	r2, #66	@ 0x42
 8002c86:	2101      	movs	r1, #1
 8002c88:	5499      	strb	r1, [r3, r2]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2243      	movs	r2, #67	@ 0x43
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5499      	strb	r1, [r3, r2]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2244      	movs	r2, #68	@ 0x44
 8002c96:	2101      	movs	r1, #1
 8002c98:	5499      	strb	r1, [r3, r2]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2245      	movs	r2, #69	@ 0x45
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	223d      	movs	r2, #61	@ 0x3d
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	223d      	movs	r2, #61	@ 0x3d
 8002cc0:	5c9b      	ldrb	r3, [r3, r2]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d001      	beq.n	8002ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e03b      	b.n	8002d44 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	223d      	movs	r2, #61	@ 0x3d
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2101      	movs	r1, #1
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a18      	ldr	r2, [pc, #96]	@ (8002d4c <HAL_TIM_Base_Start_IT+0x98>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00f      	beq.n	8002d0e <HAL_TIM_Base_Start_IT+0x5a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	2380      	movs	r3, #128	@ 0x80
 8002cf4:	05db      	lsls	r3, r3, #23
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d009      	beq.n	8002d0e <HAL_TIM_Base_Start_IT+0x5a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a14      	ldr	r2, [pc, #80]	@ (8002d50 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d004      	beq.n	8002d0e <HAL_TIM_Base_Start_IT+0x5a>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a12      	ldr	r2, [pc, #72]	@ (8002d54 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d111      	bne.n	8002d32 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2207      	movs	r2, #7
 8002d16:	4013      	ands	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b06      	cmp	r3, #6
 8002d1e:	d010      	beq.n	8002d42 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d30:	e007      	b.n	8002d42 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b004      	add	sp, #16
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40012c00 	.word	0x40012c00
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40014000 	.word	0x40014000

08002d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2202      	movs	r2, #2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d124      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2202      	movs	r2, #2
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d11d      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2203      	movs	r2, #3
 8002d82:	4252      	negs	r2, r2
 8002d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2203      	movs	r2, #3
 8002d94:	4013      	ands	r3, r2
 8002d96:	d004      	beq.n	8002da2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 f9ce 	bl	800313c <HAL_TIM_IC_CaptureCallback>
 8002da0:	e007      	b.n	8002db2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f000 f9c1 	bl	800312c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 f9cd 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d125      	bne.n	8002e12 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2204      	movs	r2, #4
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d11e      	bne.n	8002e12 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2205      	movs	r2, #5
 8002dda:	4252      	negs	r2, r2
 8002ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	23c0      	movs	r3, #192	@ 0xc0
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4013      	ands	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 f9a1 	bl	800313c <HAL_TIM_IC_CaptureCallback>
 8002dfa:	e007      	b.n	8002e0c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 f994 	bl	800312c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	0018      	movs	r0, r3
 8002e08:	f000 f9a0 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d124      	bne.n	8002e6a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2208      	movs	r2, #8
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d11d      	bne.n	8002e6a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2209      	movs	r2, #9
 8002e34:	4252      	negs	r2, r2
 8002e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	2203      	movs	r2, #3
 8002e46:	4013      	ands	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 f975 	bl	800313c <HAL_TIM_IC_CaptureCallback>
 8002e52:	e007      	b.n	8002e64 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	0018      	movs	r0, r3
 8002e58:	f000 f968 	bl	800312c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 f974 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2210      	movs	r2, #16
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d125      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2210      	movs	r2, #16
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d11e      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2211      	movs	r2, #17
 8002e8c:	4252      	negs	r2, r2
 8002e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2208      	movs	r2, #8
 8002e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	23c0      	movs	r3, #192	@ 0xc0
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f000 f948 	bl	800313c <HAL_TIM_IC_CaptureCallback>
 8002eac:	e007      	b.n	8002ebe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f000 f93b 	bl	800312c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f000 f947 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d10f      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d108      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	4252      	negs	r2, r2
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7fd fa13 	bl	8000318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2280      	movs	r2, #128	@ 0x80
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b80      	cmp	r3, #128	@ 0x80
 8002efe:	d10f      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2280      	movs	r2, #128	@ 0x80
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b80      	cmp	r3, #128	@ 0x80
 8002f0c:	d108      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2281      	movs	r2, #129	@ 0x81
 8002f14:	4252      	negs	r2, r2
 8002f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 faa6 	bl	800346c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2240      	movs	r2, #64	@ 0x40
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b40      	cmp	r3, #64	@ 0x40
 8002f2c:	d10f      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2240      	movs	r2, #64	@ 0x40
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b40      	cmp	r3, #64	@ 0x40
 8002f3a:	d108      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2241      	movs	r2, #65	@ 0x41
 8002f42:	4252      	negs	r2, r2
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f000 f907 	bl	800315c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2220      	movs	r2, #32
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d10f      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	d108      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2221      	movs	r2, #33	@ 0x21
 8002f70:	4252      	negs	r2, r2
 8002f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f000 fa70 	bl	800345c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f7c:	46c0      	nop			@ (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	230f      	movs	r3, #15
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	223c      	movs	r2, #60	@ 0x3c
 8002f9a:	5c9b      	ldrb	r3, [r3, r2]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIM_ConfigClockSource+0x20>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e0bc      	b.n	800311e <HAL_TIM_ConfigClockSource+0x19a>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	223c      	movs	r2, #60	@ 0x3c
 8002fa8:	2101      	movs	r1, #1
 8002faa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	223d      	movs	r2, #61	@ 0x3d
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2277      	movs	r2, #119	@ 0x77
 8002fc0:	4393      	bics	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4a58      	ldr	r2, [pc, #352]	@ (8003128 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2280      	movs	r2, #128	@ 0x80
 8002fda:	0192      	lsls	r2, r2, #6
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d040      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0xde>
 8002fe0:	2280      	movs	r2, #128	@ 0x80
 8002fe2:	0192      	lsls	r2, r2, #6
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d900      	bls.n	8002fea <HAL_TIM_ConfigClockSource+0x66>
 8002fe8:	e088      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x178>
 8002fea:	2280      	movs	r2, #128	@ 0x80
 8002fec:	0152      	lsls	r2, r2, #5
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d100      	bne.n	8002ff4 <HAL_TIM_ConfigClockSource+0x70>
 8002ff2:	e088      	b.n	8003106 <HAL_TIM_ConfigClockSource+0x182>
 8002ff4:	2280      	movs	r2, #128	@ 0x80
 8002ff6:	0152      	lsls	r2, r2, #5
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d900      	bls.n	8002ffe <HAL_TIM_ConfigClockSource+0x7a>
 8002ffc:	e07e      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x178>
 8002ffe:	2b70      	cmp	r3, #112	@ 0x70
 8003000:	d018      	beq.n	8003034 <HAL_TIM_ConfigClockSource+0xb0>
 8003002:	d900      	bls.n	8003006 <HAL_TIM_ConfigClockSource+0x82>
 8003004:	e07a      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x178>
 8003006:	2b60      	cmp	r3, #96	@ 0x60
 8003008:	d04f      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x126>
 800300a:	d900      	bls.n	800300e <HAL_TIM_ConfigClockSource+0x8a>
 800300c:	e076      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x178>
 800300e:	2b50      	cmp	r3, #80	@ 0x50
 8003010:	d03b      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x106>
 8003012:	d900      	bls.n	8003016 <HAL_TIM_ConfigClockSource+0x92>
 8003014:	e072      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x178>
 8003016:	2b40      	cmp	r3, #64	@ 0x40
 8003018:	d057      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x146>
 800301a:	d900      	bls.n	800301e <HAL_TIM_ConfigClockSource+0x9a>
 800301c:	e06e      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x178>
 800301e:	2b30      	cmp	r3, #48	@ 0x30
 8003020:	d063      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x166>
 8003022:	d86b      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x178>
 8003024:	2b20      	cmp	r3, #32
 8003026:	d060      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x166>
 8003028:	d868      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x178>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d05d      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x166>
 800302e:	2b10      	cmp	r3, #16
 8003030:	d05b      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x166>
 8003032:	e063      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003044:	f000 f98c 	bl	8003360 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2277      	movs	r2, #119	@ 0x77
 8003054:	4313      	orrs	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	609a      	str	r2, [r3, #8]
      break;
 8003060:	e052      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003072:	f000 f975 	bl	8003360 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2180      	movs	r1, #128	@ 0x80
 8003082:	01c9      	lsls	r1, r1, #7
 8003084:	430a      	orrs	r2, r1
 8003086:	609a      	str	r2, [r3, #8]
      break;
 8003088:	e03e      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003096:	001a      	movs	r2, r3
 8003098:	f000 f8e8 	bl	800326c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2150      	movs	r1, #80	@ 0x50
 80030a2:	0018      	movs	r0, r3
 80030a4:	f000 f942 	bl	800332c <TIM_ITRx_SetConfig>
      break;
 80030a8:	e02e      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030b6:	001a      	movs	r2, r3
 80030b8:	f000 f906 	bl	80032c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2160      	movs	r1, #96	@ 0x60
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 f932 	bl	800332c <TIM_ITRx_SetConfig>
      break;
 80030c8:	e01e      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d6:	001a      	movs	r2, r3
 80030d8:	f000 f8c8 	bl	800326c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2140      	movs	r1, #64	@ 0x40
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 f922 	bl	800332c <TIM_ITRx_SetConfig>
      break;
 80030e8:	e00e      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	0019      	movs	r1, r3
 80030f4:	0010      	movs	r0, r2
 80030f6:	f000 f919 	bl	800332c <TIM_ITRx_SetConfig>
      break;
 80030fa:	e005      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80030fc:	230f      	movs	r3, #15
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
      break;
 8003104:	e000      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003106:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	223d      	movs	r2, #61	@ 0x3d
 800310c:	2101      	movs	r1, #1
 800310e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	223c      	movs	r2, #60	@ 0x3c
 8003114:	2100      	movs	r1, #0
 8003116:	5499      	strb	r1, [r3, r2]

  return status;
 8003118:	230f      	movs	r3, #15
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	781b      	ldrb	r3, [r3, #0]
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b004      	add	sp, #16
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			@ (mov r8, r8)
 8003128:	ffff00ff 	.word	0xffff00ff

0800312c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003134:	46c0      	nop			@ (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003144:	46c0      	nop			@ (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003154:	46c0      	nop			@ (mov r8, r8)
 8003156:	46bd      	mov	sp, r7
 8003158:	b002      	add	sp, #8
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003164:	46c0      	nop			@ (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b002      	add	sp, #8
 800316a:	bd80      	pop	{r7, pc}

0800316c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a34      	ldr	r2, [pc, #208]	@ (8003250 <TIM_Base_SetConfig+0xe4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d008      	beq.n	8003196 <TIM_Base_SetConfig+0x2a>
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	2380      	movs	r3, #128	@ 0x80
 8003188:	05db      	lsls	r3, r3, #23
 800318a:	429a      	cmp	r2, r3
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0x2a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a30      	ldr	r2, [pc, #192]	@ (8003254 <TIM_Base_SetConfig+0xe8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2270      	movs	r2, #112	@ 0x70
 800319a:	4393      	bics	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a29      	ldr	r2, [pc, #164]	@ (8003250 <TIM_Base_SetConfig+0xe4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d018      	beq.n	80031e2 <TIM_Base_SetConfig+0x76>
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	2380      	movs	r3, #128	@ 0x80
 80031b4:	05db      	lsls	r3, r3, #23
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d013      	beq.n	80031e2 <TIM_Base_SetConfig+0x76>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a25      	ldr	r2, [pc, #148]	@ (8003254 <TIM_Base_SetConfig+0xe8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00f      	beq.n	80031e2 <TIM_Base_SetConfig+0x76>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a24      	ldr	r2, [pc, #144]	@ (8003258 <TIM_Base_SetConfig+0xec>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00b      	beq.n	80031e2 <TIM_Base_SetConfig+0x76>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a23      	ldr	r2, [pc, #140]	@ (800325c <TIM_Base_SetConfig+0xf0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <TIM_Base_SetConfig+0x76>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a22      	ldr	r2, [pc, #136]	@ (8003260 <TIM_Base_SetConfig+0xf4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d003      	beq.n	80031e2 <TIM_Base_SetConfig+0x76>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a21      	ldr	r2, [pc, #132]	@ (8003264 <TIM_Base_SetConfig+0xf8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d108      	bne.n	80031f4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4a20      	ldr	r2, [pc, #128]	@ (8003268 <TIM_Base_SetConfig+0xfc>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	4393      	bics	r3, r2
 80031fa:	001a      	movs	r2, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a0c      	ldr	r2, [pc, #48]	@ (8003250 <TIM_Base_SetConfig+0xe4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00b      	beq.n	800323a <TIM_Base_SetConfig+0xce>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a0d      	ldr	r2, [pc, #52]	@ (800325c <TIM_Base_SetConfig+0xf0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d007      	beq.n	800323a <TIM_Base_SetConfig+0xce>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a0c      	ldr	r2, [pc, #48]	@ (8003260 <TIM_Base_SetConfig+0xf4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d003      	beq.n	800323a <TIM_Base_SetConfig+0xce>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a0b      	ldr	r2, [pc, #44]	@ (8003264 <TIM_Base_SetConfig+0xf8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d103      	bne.n	8003242 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	615a      	str	r2, [r3, #20]
}
 8003248:	46c0      	nop			@ (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b004      	add	sp, #16
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40000400 	.word	0x40000400
 8003258:	40002000 	.word	0x40002000
 800325c:	40014000 	.word	0x40014000
 8003260:	40014400 	.word	0x40014400
 8003264:	40014800 	.word	0x40014800
 8003268:	fffffcff 	.word	0xfffffcff

0800326c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	2201      	movs	r2, #1
 8003284:	4393      	bics	r3, r2
 8003286:	001a      	movs	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	22f0      	movs	r2, #240	@ 0xf0
 8003296:	4393      	bics	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	220a      	movs	r2, #10
 80032a8:	4393      	bics	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	621a      	str	r2, [r3, #32]
}
 80032c0:	46c0      	nop			@ (mov r8, r8)
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b006      	add	sp, #24
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	2210      	movs	r2, #16
 80032da:	4393      	bics	r3, r2
 80032dc:	001a      	movs	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <TIM_TI2_ConfigInputStage+0x60>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	031b      	lsls	r3, r3, #12
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	22a0      	movs	r2, #160	@ 0xa0
 8003304:	4393      	bics	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	621a      	str	r2, [r3, #32]
}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b006      	add	sp, #24
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	ffff0fff 	.word	0xffff0fff

0800332c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2270      	movs	r2, #112	@ 0x70
 8003340:	4393      	bics	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	2207      	movs	r2, #7
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	609a      	str	r2, [r3, #8]
}
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b004      	add	sp, #16
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	4a09      	ldr	r2, [pc, #36]	@ (800339c <TIM_ETR_SetConfig+0x3c>)
 8003378:	4013      	ands	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	021a      	lsls	r2, r3, #8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	431a      	orrs	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	609a      	str	r2, [r3, #8]
}
 8003394:	46c0      	nop			@ (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b006      	add	sp, #24
 800339a:	bd80      	pop	{r7, pc}
 800339c:	ffff00ff 	.word	0xffff00ff

080033a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	223c      	movs	r2, #60	@ 0x3c
 80033ae:	5c9b      	ldrb	r3, [r3, r2]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e047      	b.n	8003448 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	223c      	movs	r2, #60	@ 0x3c
 80033bc:	2101      	movs	r1, #1
 80033be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	223d      	movs	r2, #61	@ 0x3d
 80033c4:	2102      	movs	r1, #2
 80033c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2270      	movs	r2, #112	@ 0x70
 80033dc:	4393      	bics	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a16      	ldr	r2, [pc, #88]	@ (8003450 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00f      	beq.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	2380      	movs	r3, #128	@ 0x80
 8003402:	05db      	lsls	r3, r3, #23
 8003404:	429a      	cmp	r2, r3
 8003406:	d009      	beq.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a11      	ldr	r2, [pc, #68]	@ (8003454 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a10      	ldr	r2, [pc, #64]	@ (8003458 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d10c      	bne.n	8003436 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2280      	movs	r2, #128	@ 0x80
 8003420:	4393      	bics	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	4313      	orrs	r3, r2
 800342c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	223d      	movs	r2, #61	@ 0x3d
 800343a:	2101      	movs	r1, #1
 800343c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	223c      	movs	r2, #60	@ 0x3c
 8003442:	2100      	movs	r1, #0
 8003444:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b004      	add	sp, #16
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40012c00 	.word	0x40012c00
 8003454:	40000400 	.word	0x40000400
 8003458:	40014000 	.word	0x40014000

0800345c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003464:	46c0      	nop			@ (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003474:	46c0      	nop			@ (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}

0800347c <memset>:
 800347c:	0003      	movs	r3, r0
 800347e:	1882      	adds	r2, r0, r2
 8003480:	4293      	cmp	r3, r2
 8003482:	d100      	bne.n	8003486 <memset+0xa>
 8003484:	4770      	bx	lr
 8003486:	7019      	strb	r1, [r3, #0]
 8003488:	3301      	adds	r3, #1
 800348a:	e7f9      	b.n	8003480 <memset+0x4>

0800348c <__libc_init_array>:
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	2600      	movs	r6, #0
 8003490:	4c0c      	ldr	r4, [pc, #48]	@ (80034c4 <__libc_init_array+0x38>)
 8003492:	4d0d      	ldr	r5, [pc, #52]	@ (80034c8 <__libc_init_array+0x3c>)
 8003494:	1b64      	subs	r4, r4, r5
 8003496:	10a4      	asrs	r4, r4, #2
 8003498:	42a6      	cmp	r6, r4
 800349a:	d109      	bne.n	80034b0 <__libc_init_array+0x24>
 800349c:	2600      	movs	r6, #0
 800349e:	f000 f819 	bl	80034d4 <_init>
 80034a2:	4c0a      	ldr	r4, [pc, #40]	@ (80034cc <__libc_init_array+0x40>)
 80034a4:	4d0a      	ldr	r5, [pc, #40]	@ (80034d0 <__libc_init_array+0x44>)
 80034a6:	1b64      	subs	r4, r4, r5
 80034a8:	10a4      	asrs	r4, r4, #2
 80034aa:	42a6      	cmp	r6, r4
 80034ac:	d105      	bne.n	80034ba <__libc_init_array+0x2e>
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
 80034b0:	00b3      	lsls	r3, r6, #2
 80034b2:	58eb      	ldr	r3, [r5, r3]
 80034b4:	4798      	blx	r3
 80034b6:	3601      	adds	r6, #1
 80034b8:	e7ee      	b.n	8003498 <__libc_init_array+0xc>
 80034ba:	00b3      	lsls	r3, r6, #2
 80034bc:	58eb      	ldr	r3, [r5, r3]
 80034be:	4798      	blx	r3
 80034c0:	3601      	adds	r6, #1
 80034c2:	e7f2      	b.n	80034aa <__libc_init_array+0x1e>
 80034c4:	0800351c 	.word	0x0800351c
 80034c8:	0800351c 	.word	0x0800351c
 80034cc:	08003520 	.word	0x08003520
 80034d0:	0800351c 	.word	0x0800351c

080034d4 <_init>:
 80034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034da:	bc08      	pop	{r3}
 80034dc:	469e      	mov	lr, r3
 80034de:	4770      	bx	lr

080034e0 <_fini>:
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e6:	bc08      	pop	{r3}
 80034e8:	469e      	mov	lr, r3
 80034ea:	4770      	bx	lr
